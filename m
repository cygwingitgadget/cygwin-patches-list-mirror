From: "Robert Collins" <robert.collins@itdomain.com.au>
To: <cygwin-patches@cygwin.com>
Subject: cygwin/newlib types patchs
Date: Wed, 21 Mar 2001 01:11:00 -0000
Message-id: <008101c0b1e6$d2b92f80$0200a8c0@lifelesswks>
X-SW-Source: 2001-q1/msg00221.html
Content-type: multipart/mixed; boundary="----------=_1583532846-65438-28"

This is a multi-part message in MIME format...

------------=_1583532846-65438-28
Content-length: 1204

This diff was taken from the src/ level (immediately above winsup and
newlib) - but I've split it into two... however I'm mailing them
together because if only one is applied, cygwin & newlib will no longer
place nicely together.

Chris, I hope this is a bit easier on you...


newlib ChangeLog:
21 Mar 2001 Robert Collins <rbtcollins@hotmail.com>
    * libc/include/sys/signal.h: Test for __CYGWIN__ as well as
_POSIX_THREADS
    * libc/include/sys/types.h:
      Allow __CYGWIN__ for the POSIX_THREADS types.
      Include <cygwin/types.h> rather than use the _POSIX_THREADS
structs from newlib.

cygwin ChangeLog:
21 Mar 2001 Robert Collins <rbtcollins@hotmail.com>
    * pthread.cc: Use POSIX definition of pthread_kill.
    * thread.cc: Use POSIX definition of pthread_kill.
      Remove obsolete macro NOT_IMP.
    * thread.h: Include <pthread.h>
      Remove defines duplicated in <pthread.h>
      Move typedefs for pthread_*_t to <cygwin/types.h>
    * pthread.h: Move typedefs for pthread_*_t to <cygwin/types.h>
      Remove pthread_kill and pthread_sigmask as they are now visible in
<sys/types.h>
    * include/cygwin/types.h: Add pthread_*_t typedefs for user code and
for building cygwin.

------------=_1583532846-65438-28
Content-Type: text/x-diff; charset=us-ascii; name="newlib.patch"
Content-Disposition: inline; filename="newlib.patch"
Content-Transfer-Encoding: base64
Content-Length: 3217

SW5kZXg6IG5ld2xpYi9saWJjL2luY2x1ZGUvc3lzL3NpZ25hbC5oCj09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9jdnMvc3JjL3NyYy9uZXds
aWIvbGliYy9pbmNsdWRlL3N5cy9zaWduYWwuaCx2CnJldHJpZXZpbmcgcmV2
aXNpb24gMS43CmRpZmYgLXUgLXAgLXIxLjcgc2lnbmFsLmgKLS0tIHNpZ25h
bC5oCTIwMDEvMDIvMTUgMDY6NDI6MzUJMS43CisrKyBzaWduYWwuaAkyMDAx
LzAzLzIxIDA4OjM3OjU3CkBAIC0xMzQsNyArMTM0LDcgQEAgc3RydWN0IHNp
Z2FjdGlvbiAKIAogaW50IF9FWEZVTihzaWdwcm9jbWFzaywgKGludCBob3cs
IGNvbnN0IHNpZ3NldF90ICpzZXQsIHNpZ3NldF90ICpvc2V0KSk7CiAKLSNp
ZiBkZWZpbmVkKF9QT1NJWF9USFJFQURTKQorI2lmIGRlZmluZWQoX1BPU0lY
X1RIUkVBRFMpIHx8IGRlZmluZWQoX19DWUdXSU5fXykKIGludCBfRVhGVU4o
cHRocmVhZF9zaWdtYXNrLCAoaW50IGhvdywgY29uc3Qgc2lnc2V0X3QgKnNl
dCwgc2lnc2V0X3QgKm9zZXQpKTsKICNlbmRpZgogCkBAIC0xNTgsNyArMTU4
LDcgQEAgaW50IF9FWEZVTihzaWdwZW5kaW5nLCAoc2lnc2V0X3QgKikpOwog
aW50IF9FWEZVTihzaWdzdXNwZW5kLCAoY29uc3Qgc2lnc2V0X3QgKikpOwog
aW50IF9FWEZVTihzaWdwYXVzZSwgKGludCkpOwogCi0jaWYgZGVmaW5lZChf
UE9TSVhfVEhSRUFEUykKKyNpZiBkZWZpbmVkKF9QT1NJWF9USFJFQURTKSB8
fCBkZWZpbmVkKF9fQ1lHV0lOX18pCiBpbnQgX0VYRlVOKHB0aHJlYWRfa2ls
bCwgKHB0aHJlYWRfdCB0aHJlYWQsIGludCBzaWcpKTsKICNlbmRpZgogCklu
ZGV4OiBuZXdsaWIvbGliYy9pbmNsdWRlL3N5cy90eXBlcy5oCj09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9jdnMvc3JjL3NyYy9uZXdsaWIv
bGliYy9pbmNsdWRlL3N5cy90eXBlcy5oLHYKcmV0cmlldmluZyByZXZpc2lv
biAxLjUKZGlmZiAtdSAtcCAtcjEuNSB0eXBlcy5oCi0tLSB0eXBlcy5oCTIw
MDAvMTIvMTIgMDE6MjQ6MDgJMS41CisrKyB0eXBlcy5oCTIwMDEvMDMvMjEg
MDg6Mzc6NTgKQEAgLTIwMiw3ICsyMDIsNyBAQCB0eXBlZGVmCXN0cnVjdCBf
dHlwZXNfZmRfc2V0IHsKICAgIGNvbmRpdGlvbiB2YXJpYWJsZXMsIGFuZCBr
ZXlzLiAgQnV0IHNpbmNlIFJURU1TIGlzIGN1cnJlbnRseSB0aGUgb25seQog
ICAgbmV3bGliIHVzZXIgb2YgdGhlc2UsIHRoZSBpZmRlZiBpcyBqdXN0IG9u
IFJURU1TLiAqLwogCi0jaWYgZGVmaW5lZChfX3J0ZW1zX18pCisjaWYgZGVm
aW5lZChfX3J0ZW1zX18pIHx8IGRlZmluZWQoX19DWUdXSU5fXykKIAogI2lm
bmRlZiBfX2Nsb2NraWRfdF9kZWZpbmVkCiB0eXBlZGVmIF9DTE9DS0lEX1Rf
IGNsb2NraWRfdDsKQEAgLTIxNiw4ICsyMTYsMTYgQEAgdHlwZWRlZiBfVElN
RVJfVF8gdGltZXJfdDsKIAogI2luY2x1ZGUgPHN5cy9mZWF0dXJlcy5oPgog
Ci0jaWYgZGVmaW5lZChfUE9TSVhfVEhSRUFEUykKIAorLyogQ3lnd2luIHdp
bGwgcHJvYmFibHkgbmV2ZXIgaGF2ZSBmdWxsIHBvc2l4IGNvbXBsaWFuY2Ug
ZHVlIHRvIGxpdHRsZSB0aGluZ3MKKyAqIGxpa2UgYW4gaW5hYmlsaXR5IHRv
IHNldCB0aGUgc3RhY2thZGRyZXNzLiBDeWd3aW4gaXMgYWxzbyB1c2luZyB2
b2lkICogIAorICogcG9pbnRlcnMgcmF0aGVyIHRoYW4gc3RydWN0cyB0byBl
bnN1cmUgbWF4aW11bSBiaW5hcnkgY29tcGF0YWJpbGl0eSB3aXRoCisgKiBw
cmV2aW91cyByZWxlYXNlcy4KKyAqIFRoaXMgbWVhbnMgdGhhdCB3ZSBkb24n
dCB1c2UgdGhlIHR5cGVzIGRlZmluZWQgaGVyZSwgYnV0IHJhdGhlciBpbgor
ICogPGN5Z3dpbi90eXBlcy5oPgorICovCisjaWYgZGVmaW5lZChfUE9TSVhf
VEhSRUFEUykgJiYgIShfX0NZR1dJTl9fKQorCiAjaW5jbHVkZSA8c3lzL3Nj
aGVkLmg+CiAKIC8qCkBAIC0zMDksNyArMzE3LDEwIEBAIHR5cGVkZWYgc3Ry
dWN0IHsKICAgaW50ICAgaXNfaW5pdGlhbGl6ZWQ7ICAvKiBpcyB0aGlzIHN0
cnVjdHVyZSBpbml0aWFsaXplZD8gKi8KICAgaW50ICAgaW5pdF9leGVjdXRl
ZDsgICAvKiBoYXMgdGhlIGluaXRpYWxpemF0aW9uIHJvdXRpbmUgYmVlbiBy
dW4/ICovCiB9IHB0aHJlYWRfb25jZV90OyAgICAgICAvKiBkeW5hbWljIHBh
Y2thZ2UgaW5pdGlhbGl6YXRpb24gKi8KLQorI2Vsc2UKKyNpZiBkZWZpbmVk
IChfX0NZR1dJTl9fKQorI2luY2x1ZGUgPGN5Z3dpbi90eXBlcy5oPgorI2Vu
ZGlmCiAjZW5kaWYgLyogZGVmaW5lZChfUE9TSVhfVEhSRUFEUykgKi8KIAog
I2VuZGlmICAvKiBkZWZpbmVkKF9fcnRlbXNfXykgKi8K

------------=_1583532846-65438-28
Content-Type: text/x-diff; charset=us-ascii; name="types.patch"
Content-Disposition: inline; filename="types.patch"
Content-Transfer-Encoding: base64
Content-Length: 8443

SW5kZXg6IHdpbnN1cC9jeWd3aW4vcHRocmVhZC5jYwo9PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09ClJDUyBmaWxlOiAvY3ZzL3NyYy9zcmMvd2luc3VwL2N5Z3dp
bi9wdGhyZWFkLmNjLHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjYKZGlmZiAt
dSAtcCAtcjEuNiBwdGhyZWFkLmNjCi0tLSBwdGhyZWFkLmNjCTIwMDEvMDMv
MjEgMDI6MTc6NTcJMS42CisrKyBwdGhyZWFkLmNjCTIwMDEvMDMvMjEgMDg6
Mzg6MTMKQEAgLTExNSw3ICsxMTUsNyBAQCBleHRlcm4gIkMiCiAgIH0KIAog
LyogVGhyZWFkIHNpZ25hbCAqLwotICBpbnQgcHRocmVhZF9raWxsIChwdGhy
ZWFkX3QgKiB0aHJlYWQsIGludCBzaWcpCisgIGludCBwdGhyZWFkX2tpbGwg
KHB0aHJlYWRfdCB0aHJlYWQsIGludCBzaWcpCiAgIHsKICAgICByZXR1cm4g
X19wdGhyZWFkX2tpbGwgKHRocmVhZCwgc2lnKTsKICAgfQpJbmRleDogd2lu
c3VwL2N5Z3dpbi90aHJlYWQuY2MKPT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpS
Q1MgZmlsZTogL2N2cy9zcmMvc3JjL3dpbnN1cC9jeWd3aW4vdGhyZWFkLmNj
LHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjIwCmRpZmYgLXUgLXAgLXIxLjIw
IHRocmVhZC5jYwotLS0gdGhyZWFkLmNjCTIwMDEvMDMvMjEgMDI6MTc6NTcJ
MS4yMAorKysgdGhyZWFkLmNjCTIwMDEvMDMvMjEgMDg6Mzg6MTgKQEAgLTMz
LDggKzMzLDYgQEAgZXh0ZXJuIGludCB0aHJlYWRzYWZlOwogCiAjZGVmaW5l
IE1UX0lOVEVSRkFDRSB1c2VyX2RhdGEtPnRocmVhZGludGVyZmFjZQogCi0j
ZGVmaW5lIE5PVF9JTVAobikgIHN5c3RlbV9wcmludGYgKCJub3QgaW1wbGVt
ZW50ZWQgJXNcbiIsIG4pOyByZXR1cm4gMDsKLQogc3RydWN0IF9yZWVudCAq
CiBfcmVlbnRfY2xpYiAoKQogewpAQCAtODk3LDE2ICs4OTUsMTYgQEAgX19w
dGhyZWFkX2NvbmRhdHRyX2Rlc3Ryb3kgKHB0aHJlYWRfY29uZAogCiAvKiBU
aHJlYWQgc2lnbmFsICovCiBpbnQKLV9fcHRocmVhZF9raWxsIChwdGhyZWFk
X3QgKiB0aHJlYWQsIGludCBzaWcpCitfX3B0aHJlYWRfa2lsbCAocHRocmVh
ZF90IHRocmVhZCwgaW50IHNpZykKIHsKIC8vIGxvY2sgbXlzZWxmLCBmb3Ig
dGhlIHVzZSBvZiB0aHJlYWQyc2lnbmFsCiAgIC8vIHR3byBkaWZmZXIga2ls
bHMgbWlnaHQgY2xhc2g6IEZJWE1FCiAKLSAgaWYgKCF2ZXJpZnlhYmxlX29i
amVjdF9pc3ZhbGlkICgqdGhyZWFkLCBQVEhSRUFEX01BR0lDKSkKKyAgaWYg
KCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICh0aHJlYWQsIFBUSFJFQURf
TUFHSUMpKQogICAgIHJldHVybiBFSU5WQUw7CiAKLSAgaWYgKCgqdGhyZWFk
KS0+c2lncykKLSAgICBteXNlbGYtPnNldHRocmVhZDJzaWduYWwgKCp0aHJl
YWQpOworICBpZiAodGhyZWFkLT5zaWdzKQorICAgIG15c2VsZi0+c2V0dGhy
ZWFkMnNpZ25hbCAodGhyZWFkKTsKIAogICBpbnQgcnZhbCA9IF9raWxsICht
eXNlbGYtPnBpZCwgc2lnKTsKIApJbmRleDogd2luc3VwL2N5Z3dpbi90aHJl
YWQuaAo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvY3ZzL3Ny
Yy9zcmMvd2luc3VwL2N5Z3dpbi90aHJlYWQuaCx2CnJldHJpZXZpbmcgcmV2
aXNpb24gMS4xMgpkaWZmIC11IC1wIC1yMS4xMiB0aHJlYWQuaAotLS0gdGhy
ZWFkLmgJMjAwMS8wMy8yMSAwMjoxNzo1OAkxLjEyCisrKyB0aHJlYWQuaAky
MDAxLzAzLzIxIDA4OjM4OjE5CkBAIC0zOSwyMSArMzksNyBAQCBleHRlcm4g
IkMiCiAKICNlbHNlCiAKLS8vI2luY2x1ZGUgPHB0aHJlYWQuaD4KLS8qIEZJ
WE1FOiB0aGVzZSBhcmUgZGVmaW5lZCBpbiBwdGhyZWFkLmgsIGJ1dCBwdGhy
ZWFkLmggZGVmaW5lcyBzeW1ib2xzIGl0IHNob3VsZG4ndCAtCi0gKiBhbGwg
dGhlIHR5cGVzLgotICovCi0jZGVmaW5lIFBUSFJFQURfUFJPQ0VTU19QUklW
QVRFIDAKLSNkZWZpbmUgUFRIUkVBRF9QUk9DRVNTX1NIQVJFRCAgMQotI2Rl
ZmluZSBQVEhSRUFEX0RFU1RSVUNUT1JfSVRFUkFUSU9OUyAxCi0vKiBUbHMg
aGFzIDY0IGl0ZW1zIGZvciBwcmUgd2luMjAwMCAtIGFuZCB3ZSBkb24ndCB3
YW50IHRvIHVzZSB0aGVtIGFsbCA6XQotICogQmVmb3JlIGNvbW1pdHRpbmcg
ZGlzY3VzcyB0aGlzIHdpdGggdGhlIGxpc3QKLSAqLwotI2RlZmluZSBQVEhS
RUFEX0tFWVNfTUFYIDMyCi0jZGVmaW5lIFBUSFJFQURfQ1JFQVRFX0RFVEFD
SEVEIDEKLS8qIHRoZSBkZWZhdWx0IDogam9pbmFibGUgKi8KLSNkZWZpbmUg
UFRIUkVBRF9DUkVBVEVfSk9JTkFCTEUgMAotCisjaW5jbHVkZSA8cHRocmVh
ZC5oPgogI2luY2x1ZGUgPHNpZ25hbC5oPgogI2luY2x1ZGUgPHB3ZC5oPgog
I2luY2x1ZGUgPGdycC5oPgpAQCAtMjkxLDE3ICsyNzcsNiBAQCBwdWJsaWM6
CiAgICB+c2VtYXBob3JlICgpOwogfTsKIAotdHlwZWRlZiBjbGFzcyBwdGhy
ZWFkICpwdGhyZWFkX3Q7Ci10eXBlZGVmIGNsYXNzIHB0aHJlYWRfbXV0ZXgg
KnB0aHJlYWRfbXV0ZXhfdDsKLS8qIHNlbSByb3V0aW5lcyBiZWxvbmcgaW4g
c2VtYXBob3JlLmNjICovCi10eXBlZGVmIGNsYXNzIHNlbWFwaG9yZSAqc2Vt
X3Q7Ci0KLXR5cGVkZWYgY2xhc3MgcHRocmVhZF9rZXkgKnB0aHJlYWRfa2V5
X3Q7Ci10eXBlZGVmIGNsYXNzIHB0aHJlYWRfYXR0ciAqcHRocmVhZF9hdHRy
X3Q7Ci10eXBlZGVmIGNsYXNzIHB0aHJlYWRfbXV0ZXhhdHRyICpwdGhyZWFk
X211dGV4YXR0cl90OwotdHlwZWRlZiBjbGFzcyBwdGhyZWFkX2NvbmRhdHRy
ICpwdGhyZWFkX2NvbmRhdHRyX3Q7Ci10eXBlZGVmIGNsYXNzIHB0aHJlYWRf
Y29uZCAqcHRocmVhZF9jb25kX3Q7Ci0KIGNsYXNzIE1UaW50ZXJmYWNlCiB7
CiBwdWJsaWM6CkBAIC0zNzgsNyArMzUzLDcgQEAgX19wdGhyZWFkX2F0dHJf
Z2V0c3RhY2thZGRyKC4uLik7CiAgIGludCBfX3B0aHJlYWRfY29uZGF0dHJf
c2V0cHNoYXJlZCAocHRocmVhZF9jb25kYXR0cl90ICogYXR0ciwgaW50IHBz
aGFyZWQpOwogCiAvKiBUaHJlYWQgc2lnbmFsICovCi0gIGludCBfX3B0aHJl
YWRfa2lsbCAocHRocmVhZF90ICogdGhyZWFkLCBpbnQgc2lnKTsKKyAgaW50
IF9fcHRocmVhZF9raWxsIChwdGhyZWFkX3QgdGhyZWFkLCBpbnQgc2lnKTsK
ICAgaW50IF9fcHRocmVhZF9zaWdtYXNrIChpbnQgb3BlcmF0aW9uLCBjb25z
dCBzaWdzZXRfdCAqIHNldCwKIAkJCSBzaWdzZXRfdCAqIG9sZF9zZXQpOwog
CkluZGV4OiB3aW5zdXAvY3lnd2luL2luY2x1ZGUvcHRocmVhZC5oCj09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9jdnMvc3JjL3NyYy93aW5z
dXAvY3lnd2luL2luY2x1ZGUvcHRocmVhZC5oLHYKcmV0cmlldmluZyByZXZp
c2lvbiAxLjQKZGlmZiAtdSAtcCAtcjEuNCBwdGhyZWFkLmgKLS0tIHB0aHJl
YWQuaAkyMDAxLzAzLzIxIDAyOjE3OjU4CTEuNAorKysgcHRocmVhZC5oCTIw
MDEvMDMvMjEgMDg6Mzg6MTkKQEAgLTQwLDIwICs0MCw2IEBAIGV4dGVybiAi
QyIKIC8qIHRoZSBkZWZhdWx0IDogam9pbmFibGUgKi8KICNkZWZpbmUgUFRI
UkVBRF9DUkVBVEVfSk9JTkFCTEUgMAogCi0KLS8qIHRoZXNlIHNob3VsZG4n
dCBiZSBkZWZpbmVkIGhlcmUgYnV0IGluIHN5cy90eXBlcy4KLSAqIGRlZmlu
aW5nIGluIHN5cy90eXBlcyBtdWdodCBhbHNvIGFsbG93IHVzIHRvIG92ZXJy
aWRlIHRoZW0gZm9yIHRoZSBpbnRlcm5hbCBmdW5jdGlvbnMKLSAqIG1vcmUg
ZWFzaWx5IChpbnRlcm5hbCBzeXMvdHlwZXMgdnMgZXh0ZXJuYWwgc3lzL3R5
cGUgLSBkZXYgdGhvdWdodHMgb24gdGhpcz8gCi0gKi8KLSAgdHlwZWRlZiB2
b2lkICpwdGhyZWFkX3Q7Ci0gIHR5cGVkZWYgdm9pZCAqcHRocmVhZF9tdXRl
eF90OwotCi0gIHR5cGVkZWYgdm9pZCAqcHRocmVhZF9rZXlfdDsKLSAgdHlw
ZWRlZiB2b2lkICpwdGhyZWFkX2F0dHJfdDsKLSAgdHlwZWRlZiB2b2lkICpw
dGhyZWFkX211dGV4YXR0cl90OwotICB0eXBlZGVmIHZvaWQgKnB0aHJlYWRf
Y29uZGF0dHJfdDsKLSAgdHlwZWRlZiB2b2lkICpwdGhyZWFkX2NvbmRfdDsK
LQogLyogIFRocmVhZENyZWF0aW9uICovCiAgIGludCBwdGhyZWFkX2NyZWF0
ZSAocHRocmVhZF90ICogdGhyZWFkLCBjb25zdCBwdGhyZWFkX2F0dHJfdCAq
IGF0dHIsCiAJCSAgICAgIHZvaWQgKigqKSh2b2lkICopLCB2b2lkICphcmcp
OwpAQCAtOTAsMTEgKzc2LDYgQEAgZXh0ZXJuICJDIgogICBpbnQgcHRocmVh
ZF9rZXlfZGVsZXRlIChwdGhyZWFkX2tleV90ICoga2V5KTsKICAgaW50IHB0
aHJlYWRfc2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5LCBjb25zdCB2
b2lkICp2YWx1ZSk7CiAgIHZvaWQgKnB0aHJlYWRfZ2V0c3BlY2lmaWMgKHB0
aHJlYWRfa2V5X3Qga2V5KTsKLQotLyogVGhyZWFkIHNpZ25hbCAoc2hvdWxk
IGJlIGluIHNpZ25hbC5oKSAqLwotICBpbnQgcHRocmVhZF9raWxsIChwdGhy
ZWFkX3QgKiB0aHJlYWQsIGludCBzaWcpOwotICBpbnQgcHRocmVhZF9zaWdt
YXNrIChpbnQgb3BlcmF0aW9uLCBjb25zdCBzaWdzZXRfdCAqIHNldCwKLQkJ
ICAgICAgIHNpZ3NldF90ICogb2xkX3NldCk7CiAKIC8qICBJRCAqLwogICBw
dGhyZWFkX3QgcHRocmVhZF9zZWxmICgpOwpJbmRleDogd2luc3VwL2N5Z3dp
bi9pbmNsdWRlL2N5Z3dpbi90eXBlcy5oCj09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0KUkNTIGZpbGU6IC9jdnMvc3JjL3NyYy93aW5zdXAvY3lnd2luL2luY2x1
ZGUvY3lnd2luL3R5cGVzLmgsdgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMS4x
LjEKZGlmZiAtdSAtcCAtcjEuMS4xLjEgdHlwZXMuaAotLS0gdHlwZXMuaAky
MDAwLzAyLzE3IDE5OjM4OjMxCTEuMS4xLjEKKysrIHR5cGVzLmgJMjAwMS8w
My8yMSAwODozODoxOQpAQCAtMSArMSw0OSBAQAotLyogdHlwZXMuaCAqLwor
LyogdHlwZXMuaAorCisgICBDb3B5cmlnaHQgMjAwMSBSZWQgSGF0IEluYy4g
CisgICBXcml0dGVuIGJ5IFJvYmVydCBDb2xsaW5zIDxyYnRjb2xsaW5zQGhv
dG1haWwuY29tPgorCitUaGlzIGZpbGUgaXMgcGFydCBvZiBDeWd3aW4uCisK
K1RoaXMgc29mdHdhcmUgaXMgYSBjb3B5cmlnaHRlZCB3b3JrIGxpY2Vuc2Vk
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUKK0N5Z3dpbiBsaWNlbnNlLiAgUGxl
YXNlIGNvbnN1bHQgdGhlIGZpbGUgIkNZR1dJTl9MSUNFTlNFIiBmb3IKK2Rl
dGFpbHMuICovCisKKyNpZmRlZiBfX2NwbHVzcGx1cworZXh0ZXJuICJDIiB7
CisjZW5kaWYKKworI2lmbmRlZiBfQ1lHV0lOX1RZUEVTX0gKKyNkZWZpbmUg
X0NZR1dJTl9UWVBFU19ICisKKyNpZiAhZGVmaW5lZChfX0lOU0lERV9DWUdX
SU5fXykgfHwgIWRlZmluZWQoX19jcGx1c3BsdXMpCisKKyAgdHlwZWRlZiB2
b2lkICpwdGhyZWFkX3Q7CisgIHR5cGVkZWYgdm9pZCAqcHRocmVhZF9tdXRl
eF90OworCisgIHR5cGVkZWYgdm9pZCAqcHRocmVhZF9rZXlfdDsKKyAgdHlw
ZWRlZiB2b2lkICpwdGhyZWFkX2F0dHJfdDsKKyAgdHlwZWRlZiB2b2lkICpw
dGhyZWFkX211dGV4YXR0cl90OworICB0eXBlZGVmIHZvaWQgKnB0aHJlYWRf
Y29uZGF0dHJfdDsKKyAgdHlwZWRlZiB2b2lkICpwdGhyZWFkX2NvbmRfdDsK
KworI2Vsc2UKKworLyogcHRocmVhZHMgdHlwZXMgKi8KKwordHlwZWRlZiBj
bGFzcyBwdGhyZWFkICpwdGhyZWFkX3Q7Cit0eXBlZGVmIGNsYXNzIHB0aHJl
YWRfbXV0ZXggKnB0aHJlYWRfbXV0ZXhfdDsKK3R5cGVkZWYgY2xhc3MgcHRo
cmVhZF9rZXkgKnB0aHJlYWRfa2V5X3Q7Cit0eXBlZGVmIGNsYXNzIHB0aHJl
YWRfYXR0ciAqcHRocmVhZF9hdHRyX3Q7Cit0eXBlZGVmIGNsYXNzIHB0aHJl
YWRfbXV0ZXhhdHRyICpwdGhyZWFkX211dGV4YXR0cl90OwordHlwZWRlZiBj
bGFzcyBwdGhyZWFkX2NvbmRhdHRyICpwdGhyZWFkX2NvbmRhdHRyX3Q7Cit0
eXBlZGVmIGNsYXNzIHB0aHJlYWRfY29uZCAqcHRocmVhZF9jb25kX3Q7CisK
Ky8qIHNlbWFwaG9yZXMgdHlwZXMgKi8KK3R5cGVkZWYgY2xhc3Mgc2VtYXBo
b3JlICpzZW1fdDsKKyNlbmRpZiAvKiBfX0lOU0lERV9DWUdXSU5fXyAqLwor
I2VuZGlmIC8qIF9DWUdXSU5fVFlQRVNfSCAqLworCisjaWZkZWYgX19jcGx1
c3BsdXMKK30KKyNlbmRpZgo=

------------=_1583532846-65438-28--
