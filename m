From: "Robert Collins" <robert.collins@itdomain.com.au>
To: <cygwin-patches@cygwin.com>
Subject: FW: sched* functions, pthread rework
Date: Tue, 20 Mar 2001 17:45:00 -0000
Message-id: <EA18B9FA0FE4194AA2B4CDB91F73C0EF02E274@itdomain002.itdomain.net.au>
X-SW-Source: 2001-q1/msg00217.html
Content-type: multipart/mixed; boundary="----------=_1583532846-65438-26"

This is a multi-part message in MIME format...

------------=_1583532846-65438-26
Content-length: 2459

Ok here's round one of a full overhaul of the pthreads code.
This appears fully stable to me. Rather than emulating some of the win32
features (such as using an array to store the thread list) this simply
utilises win32 for most of the functionality needed. I've replaced a lot
of the Macro'd one liners (about 6 lines er macro) with two line tests,
which has aided my debugging unbelievably.

For clarity: the sched* functions are not thread related and should be
in cygwin1.dll even when it's built non threaded..
 
New files: sched.cc, include/semaphore.h, include/sched.h
 
There are still 6 FIXME's in the code: 3 are notes for adding optional
features, 2 are from before my time and I'll look into them shortly. 1
is because I haven't implemented the pthread_key_* destructor logic yet.
I'll be doing that shortly... but now was a good point to the core of
the work into CVS (it's nice and stable :] ).

Next on the hit list are the pthread_cleanup* functions and  the
pthread_ fork related functions.
 
Changelog:
21 Mar 2001 Robert Collins <rbtcollins@hotmail.com>
   * include/semaphore: New file. Semaphore prototypes that were
incorrectly in pthread.h.
   * Makefile.in: Add sched.o to the object list for cygwin1.dll.
   * cygwin.din: Add exports for sched*.
   * pinfo.h: Change references to class ThreadItem to class pthread.
   * include/pthread.h: Typedef pthread_*_t as void * not int. Add some
posix defines.
   * pthread.cc: Fixed indentation. Add pthread_attrset/get detachstate.
   * thread.cc: Rewrite core logic.
   (MTitem): Remove.
   (ThreadItem): Remove.
   (SemItem): Remove.
   (MutexItem): Remove.
   (CondItem): Remove.
   (pthread): New class.
   (pthread_attr): New class.
   (pthread_mutex): New class.
   (pthread_mutexattr): New class.
   (pthread_key): New class.
   (pthread_cond): New class.
   (pthread_condattr): New class.
   (semaphore): New class.
   Add __pthread_attr_setdetachstate() and
__pthread_attr_getdetachstate().
   Fix pthread_exit and return logic.
   * thread.h:
   (MTitem): Remove.
   (ThreadItem): Remove.
   (SemItem): Remove.
   (MutexItem): Remove.
   (CondItem): Remove.
   (pthread): New class.
   (pthread_attr): New class.
   (pthread_mutex): New class.
   (pthread_mutexattr): New class.
   (pthread_key): New class.
   (pthread_cond): New class.
   (pthread_condattr): New class.
   (semaphore): New class.
   Add __pthread_attr_setdetachstate() and
__pthread_attr_getdetachstate().

Rob

------------=_1583532846-65438-26
Content-Type: text/x-diff; charset=us-ascii; name="pthread_rework.patch"
Content-Disposition: inline; filename="pthread_rework.patch"
Content-Transfer-Encoding: base64
Content-Length: 98320

SW5kZXg6IGluY2x1ZGUvcHRocmVhZC5oCj09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0KUkNTIGZpbGU6IC9jdnMvc3JjL3NyYy93aW5zdXAvY3lnd2luL2luY2x1
ZGUvcHRocmVhZC5oLHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjMKZGlmZiAt
dSAtcCAtcjEuMyBwdGhyZWFkLmgKLS0tIHB0aHJlYWQuaAkyMDAxLzAzLzE3
IDAxOjE0OjU4CTEuMworKysgcHRocmVhZC5oCTIwMDEvMDMvMjEgMDA6MDA6
MDgKQEAgLTIxLDcgKzIxLDYgQEAgZXh0ZXJuICJDIgogewogI2VuZGlmCiAK
LSNkZWZpbmUgVEZEKG4pIHZvaWQqKCpuKSh2b2lkKikKIAogLyogRGVmaW5l
cy4gKFRoZXNlIGFyZSBjb3JyZWN0bHkgZGVmaW5lZCBoZXJlIGFzIHBlcgog
ICAgaHR0cDovL3d3dy5vcGVuZ3JvdXAub3JnL29ubGluZXB1YnMvNzkwODc5
OS94c2gvcHRocmVhZC5oLmh0bWwgKi8KQEAgLTMyLDk0ICszMSw4NSBAQCBl
eHRlcm4gIkMiCiAKICNkZWZpbmUgUFRIUkVBRF9QUk9DRVNTX1BSSVZBVEUg
MAogI2RlZmluZSBQVEhSRUFEX1BST0NFU1NfU0hBUkVEICAxCisjZGVmaW5l
IFBUSFJFQURfREVTVFJVQ1RPUl9JVEVSQVRJT05TIDEKKy8qIFRscyBoYXMg
NjQgaXRlbXMgZm9yIHByZSB3aW4yMDAwIC0gYW5kIHdlIGRvbid0IHdhbnQg
dG8gdXNlIHRoZW0gYWxsIDpdCisgKiBCZWZvcmUgY29tbWl0dGluZyBkaXNj
dXNzIHRoaXMgd2l0aCB0aGUgbGlzdAorICovCisjZGVmaW5lIFBUSFJFQURf
S0VZU19NQVggMzIKKyNkZWZpbmUgUFRIUkVBRF9DUkVBVEVfREVUQUNIRUQg
MQorLyogdGhlIGRlZmF1bHQgOiBqb2luYWJsZSAqLworI2RlZmluZSBQVEhS
RUFEX0NSRUFURV9KT0lOQUJMRSAwCisKKworLyogdGhlc2Ugc2hvdWxkbid0
IGJlIGRlZmluZWQgaGVyZSBidXQgaW4gc3lzL3R5cGVzLgorICogZGVmaW5p
bmcgaW4gc3lzL3R5cGVzIG11Z2h0IGFsc28gYWxsb3cgdXMgdG8gb3ZlcnJp
ZGUgdGhlbSBmb3IgdGhlIGludGVybmFsIGZ1bmN0aW9ucworICogbW9yZSBl
YXNpbHkgKGludGVybmFsIHN5cy90eXBlcyB2cyBleHRlcm5hbCBzeXMvdHlw
ZSAtIGRldiB0aG91Z2h0cyBvbiB0aGlzPyAKKyAqLworICB0eXBlZGVmIHZv
aWQgKnB0aHJlYWRfdDsKKyAgdHlwZWRlZiB2b2lkICpwdGhyZWFkX211dGV4
X3Q7CisKKyAgdHlwZWRlZiB2b2lkICpwdGhyZWFkX2tleV90OworICB0eXBl
ZGVmIHZvaWQgKnB0aHJlYWRfYXR0cl90OworICB0eXBlZGVmIHZvaWQgKnB0
aHJlYWRfbXV0ZXhhdHRyX3Q7CisgIHR5cGVkZWYgdm9pZCAqcHRocmVhZF9j
b25kYXR0cl90OworICB0eXBlZGVmIHZvaWQgKnB0aHJlYWRfY29uZF90Owog
Ci10eXBlZGVmIGludCBwdGhyZWFkX3Q7Ci10eXBlZGVmIGludCBwdGhyZWFk
X211dGV4X3Q7Ci10eXBlZGVmIGludCBzZW1fdDsKLQotdHlwZWRlZiBzdHJ1
Y3QgcHRocmVhZF9rZXkKLSAgewotICB9Ci1wdGhyZWFkX2tleV90OwotCi10
eXBlZGVmIHN0cnVjdCBwdGhyZWFkX2F0dHIKLSAgewotICAgIHNpemVfdCBz
dGFja3NpemU7Ci0gIH0KLXB0aHJlYWRfYXR0cl90OwotCi10eXBlZGVmIHN0
cnVjdCBwdGhyZWFkX211dGV4YXR0cgotICB7Ci0gIH0KLXB0aHJlYWRfbXV0
ZXhhdHRyX3Q7Ci0KLXR5cGVkZWYgc3RydWN0IHB0aHJlYWRfY29uZGF0dHIK
LSAgewotICAgIGludCBzaGFyZWQ7Ci0gICAgaW50IHZhbGlkOwotICB9Ci1w
dGhyZWFkX2NvbmRhdHRyX3Q7Ci0KLXR5cGVkZWYgaW50IHB0aHJlYWRfY29u
ZF90OwotCiAvKiAgVGhyZWFkQ3JlYXRpb24gKi8KLWludCBwdGhyZWFkX2Ny
ZWF0ZSAocHRocmVhZF90ICogdGhyZWFkLCBjb25zdCBwdGhyZWFkX2F0dHJf
dCAqIGF0dHIsIFRGRCAoZnVuY3Rpb24pLCB2b2lkICphcmcpOwotaW50IHB0
aHJlYWRfYXR0cl9pbml0IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIpOwotaW50
IHB0aHJlYWRfYXR0cl9kZXN0cm95IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIp
OwotaW50IHB0aHJlYWRfYXR0cl9zZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0
cl90ICogYXR0ciwgc2l6ZV90IHNpemUpOwotaW50IHB0aHJlYWRfYXR0cl9n
ZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICogYXR0ciwgc2l6ZV90ICog
c2l6ZSk7CisgIGludCBwdGhyZWFkX2NyZWF0ZSAocHRocmVhZF90ICogdGhy
ZWFkLCBjb25zdCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsCisJCSAgICAgIHZv
aWQgKigqKSh2b2lkICopLCB2b2lkICphcmcpOworICBpbnQgcHRocmVhZF9h
dHRyX2luaXQgKHB0aHJlYWRfYXR0cl90ICogYXR0cik7CisgIGludCBwdGhy
ZWFkX2F0dHJfZGVzdHJveSAocHRocmVhZF9hdHRyX3QgKiBhdHRyKTsKKyAg
aW50IHB0aHJlYWRfYXR0cl9zZXRkZXRhY2hzdGF0ZSAocHRocmVhZF9hdHRy
X3QgKiwgaW50KTsKKyAgaW50IHB0aHJlYWRfYXR0cl9nZXRkZXRhY2hzdGF0
ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiwgaW50ICopOworICBpbnQgcHRo
cmVhZF9hdHRyX3NldHN0YWNrc2l6ZSAocHRocmVhZF9hdHRyX3QgKiBhdHRy
LCBzaXplX3Qgc2l6ZSk7CisgIGludCBwdGhyZWFkX2F0dHJfZ2V0c3RhY2tz
aXplIChwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIHNpemVfdCAqIHNpemUpOwog
CiAvKiBDb25kaXRpb24gdmFyaWFibGVzICovCi1pbnQgICBwdGhyZWFkX2Nv
bmRfYnJvYWRjYXN0KHB0aHJlYWRfY29uZF90ICopOwotaW50ICAgcHRocmVh
ZF9jb25kX2Rlc3Ryb3kocHRocmVhZF9jb25kX3QgKik7Ci1pbnQgICBwdGhy
ZWFkX2NvbmRfaW5pdChwdGhyZWFkX2NvbmRfdCAqLCBjb25zdCBwdGhyZWFk
X2NvbmRhdHRyX3QgKik7Ci1pbnQgICBwdGhyZWFkX2NvbmRfc2lnbmFsKHB0
aHJlYWRfY29uZF90ICopOwotaW50ICAgcHRocmVhZF9jb25kX3RpbWVkd2Fp
dChwdGhyZWFkX2NvbmRfdCAqLCAKLSAgICAgICAgICBwdGhyZWFkX211dGV4
X3QgKiwgY29uc3Qgc3RydWN0IHRpbWVzcGVjICopOwotaW50ICAgcHRocmVh
ZF9jb25kX3dhaXQocHRocmVhZF9jb25kX3QgKiwgcHRocmVhZF9tdXRleF90
ICopOwotaW50ICAgcHRocmVhZF9jb25kYXR0cl9kZXN0cm95KHB0aHJlYWRf
Y29uZGF0dHJfdCAqKTsKLWludCAgIHB0aHJlYWRfY29uZGF0dHJfZ2V0cHNo
YXJlZChjb25zdCBwdGhyZWFkX2NvbmRhdHRyX3QgKiwgaW50ICopOwotaW50
ICAgcHRocmVhZF9jb25kYXR0cl9pbml0KHB0aHJlYWRfY29uZGF0dHJfdCAq
KTsKLWludCAgIHB0aHJlYWRfY29uZGF0dHJfc2V0cHNoYXJlZChwdGhyZWFk
X2NvbmRhdHRyX3QgKiwgaW50KTsKKyAgaW50IHB0aHJlYWRfY29uZF9icm9h
ZGNhc3QgKHB0aHJlYWRfY29uZF90ICopOworICBpbnQgcHRocmVhZF9jb25k
X2Rlc3Ryb3kgKHB0aHJlYWRfY29uZF90ICopOworICBpbnQgcHRocmVhZF9j
b25kX2luaXQgKHB0aHJlYWRfY29uZF90ICosIGNvbnN0IHB0aHJlYWRfY29u
ZGF0dHJfdCAqKTsKKyAgaW50IHB0aHJlYWRfY29uZF9zaWduYWwgKHB0aHJl
YWRfY29uZF90ICopOworICBpbnQgcHRocmVhZF9jb25kX3RpbWVkd2FpdCAo
cHRocmVhZF9jb25kX3QgKiwKKwkJCSAgICAgIHB0aHJlYWRfbXV0ZXhfdCAq
LCBjb25zdCBzdHJ1Y3QgdGltZXNwZWMgKik7CisgIGludCBwdGhyZWFkX2Nv
bmRfd2FpdCAocHRocmVhZF9jb25kX3QgKiwgcHRocmVhZF9tdXRleF90ICop
OworICBpbnQgcHRocmVhZF9jb25kYXR0cl9kZXN0cm95IChwdGhyZWFkX2Nv
bmRhdHRyX3QgKik7CisgIGludCBwdGhyZWFkX2NvbmRhdHRyX2dldHBzaGFy
ZWQgKGNvbnN0IHB0aHJlYWRfY29uZGF0dHJfdCAqLCBpbnQgKik7CisgIGlu
dCBwdGhyZWFkX2NvbmRhdHRyX2luaXQgKHB0aHJlYWRfY29uZGF0dHJfdCAq
KTsKKyAgaW50IHB0aHJlYWRfY29uZGF0dHJfc2V0cHNoYXJlZCAocHRocmVh
ZF9jb25kYXR0cl90ICosIGludCk7CiAKIAogLyogVGhyZWFkIENvbnRyb2wg
Ki8KLWludCBwdGhyZWFkX2RldGFjaCAocHRocmVhZF90IHRocmVhZCk7Ci1p
bnQgcHRocmVhZF9qb2luIChwdGhyZWFkX3QgdGhyZWFkLCB2b2lkICoqdmFs
dWVfcHRyKTsKKyAgaW50IHB0aHJlYWRfZGV0YWNoIChwdGhyZWFkX3QgdGhy
ZWFkKTsKKyAgaW50IHB0aHJlYWRfam9pbiAocHRocmVhZF90IHRocmVhZCwg
dm9pZCAqKnZhbHVlX3B0cik7CiAKIC8qIFRocmVhZCBFeGl0ICovCi1pbnQg
cHRocmVhZF9leGl0ICh2b2lkICp2YWx1ZV9wdHIpOworICB2b2lkIHB0aHJl
YWRfZXhpdCAodm9pZCAqdmFsdWVfcHRyKTsKIAogLyogVGhyZWFkIFNwZWNp
ZmljRGF0YSAqLwotaW50IHB0aHJlYWRfa2V5X2NyZWF0ZSAocHRocmVhZF9r
ZXlfdCAqIGtleSk7Ci1pbnQgcHRocmVhZF9rZXlfZGVsZXRlIChwdGhyZWFk
X2tleV90ICoga2V5KTsKLWludCBwdGhyZWFkX3NldHNwZWNpZmljIChwdGhy
ZWFkX2tleV90ICoga2V5LCBjb25zdCB2b2lkICp2YWx1ZSk7Ci12b2lkICpw
dGhyZWFkX2dldHNwZWNpZmljIChwdGhyZWFkX2tleV90ICoga2V5KTsKLQot
LyogVGhyZWFkIHNpZ25hbCAqLwotaW50IHB0aHJlYWRfa2lsbCAocHRocmVh
ZF90ICogdGhyZWFkLCBpbnQgc2lnKTsKLWludCBwdGhyZWFkX3NpZ21hc2sg
KGludCBvcGVyYXRpb24sIGNvbnN0IHNpZ3NldF90ICogc2V0LCBzaWdzZXRf
dCAqIG9sZF9zZXQpOworICBpbnQgcHRocmVhZF9rZXlfY3JlYXRlIChwdGhy
ZWFkX2tleV90ICosIHZvaWQgKCopKHZvaWQgKikpOworICBpbnQgcHRocmVh
ZF9rZXlfZGVsZXRlIChwdGhyZWFkX2tleV90ICoga2V5KTsKKyAgaW50IHB0
aHJlYWRfc2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5LCBjb25zdCB2
b2lkICp2YWx1ZSk7CisgIHZvaWQgKnB0aHJlYWRfZ2V0c3BlY2lmaWMgKHB0
aHJlYWRfa2V5X3Qga2V5KTsKKworLyogVGhyZWFkIHNpZ25hbCAoc2hvdWxk
IGJlIGluIHNpZ25hbC5oKSAqLworICBpbnQgcHRocmVhZF9raWxsIChwdGhy
ZWFkX3QgKiB0aHJlYWQsIGludCBzaWcpOworICBpbnQgcHRocmVhZF9zaWdt
YXNrIChpbnQgb3BlcmF0aW9uLCBjb25zdCBzaWdzZXRfdCAqIHNldCwKKwkJ
ICAgICAgIHNpZ3NldF90ICogb2xkX3NldCk7CiAKIC8qICBJRCAqLwotcHRo
cmVhZF90IHB0aHJlYWRfc2VsZiAoKTsKLWludCBwdGhyZWFkX2VxdWFsIChw
dGhyZWFkX3QgdDEsIHB0aHJlYWRfdCB0Mik7CisgIHB0aHJlYWRfdCBwdGhy
ZWFkX3NlbGYgKCk7CisgIGludCBwdGhyZWFkX2VxdWFsIChwdGhyZWFkX3Qg
dDEsIHB0aHJlYWRfdCB0Mik7CiAKIC8qIE11dGV4ZXMgICovCi1pbnQgcHRo
cmVhZF9tdXRleF9pbml0IChwdGhyZWFkX211dGV4X3QgKiBtdXRleCwgY29u
c3QgcHRocmVhZF9tdXRleGF0dHJfdCAqKTsKLWludCBwdGhyZWFkX211dGV4
X2xvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4dCk7Ci1pbnQgcHRocmVh
ZF9tdXRleF90cnlsb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleHQpOwot
aW50IHB0aHJlYWRfbXV0ZXhfdW5sb2NrIChwdGhyZWFkX211dGV4X3QgKiBt
dXRleHQpOwotaW50IHB0aHJlYWRfbXV0ZXhfZGVzdHJveSAocHRocmVhZF9t
dXRleF90ICogbXV0ZXh0KTsKLQotLyogU29sYXJpcyBTZW1hcGhvcmVzICov
Ci1pbnQgc2VtX2luaXQgKHNlbV90ICogc2VtLCBpbnQgcHNoYXJlZCwgdW5z
aWduZWQgaW50IHZhbHVlKTsKLWludCBzZW1fZGVzdHJveSAoc2VtX3QgKiBz
ZW0pOwotaW50IHNlbV93YWl0IChzZW1fdCAqIHNlbSk7Ci1pbnQgc2VtX3Ry
eXdhaXQgKHNlbV90ICogc2VtKTsKLWludCBzZW1fcG9zdCAoc2VtX3QgKiBz
ZW0pOworICBpbnQgcHRocmVhZF9tdXRleF9pbml0IChwdGhyZWFkX211dGV4
X3QgKiBtdXRleCwKKwkJCSAgY29uc3QgcHRocmVhZF9tdXRleGF0dHJfdCAq
KTsKKyAgaW50IHB0aHJlYWRfbXV0ZXhfbG9jayAocHRocmVhZF9tdXRleF90
ICogbXV0ZXh0KTsKKyAgaW50IHB0aHJlYWRfbXV0ZXhfdHJ5bG9jayAocHRo
cmVhZF9tdXRleF90ICogbXV0ZXh0KTsKKyAgaW50IHB0aHJlYWRfbXV0ZXhf
dW5sb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleHQpOworICBpbnQgcHRo
cmVhZF9tdXRleF9kZXN0cm95IChwdGhyZWFkX211dGV4X3QgKiBtdXRleHQp
OwogCiAjaWZkZWYgX19jcGx1c3BsdXMKIH0KICNlbmRpZgogCi0jZW5kaWYg
LyogX1BUSFJFQURfSCAqLworI2VuZGlmCQkJCS8qIF9QVEhSRUFEX0ggKi8K
SW5kZXg6IHB0aHJlYWQuY2MKPT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpSQ1Mg
ZmlsZTogL2N2cy9zcmMvc3JjL3dpbnN1cC9jeWd3aW4vcHRocmVhZC5jYyx2
CnJldHJpZXZpbmcgcmV2aXNpb24gMS41CmRpZmYgLXUgLXAgLXIxLjUgcHRo
cmVhZC5jYwotLS0gcHRocmVhZC5jYwkyMDAxLzAzLzE4IDIxOjExOjI1CTEu
NQorKysgcHRocmVhZC5jYwkyMDAxLzAzLzIxIDAwOjAwOjA5CkBAIC0xMywz
NyArMTMsNDggQEAKICNpbmNsdWRlICJ3aW5zdXAuaCIKICNpbmNsdWRlICJ0
aHJlYWQuaCIKIAotZXh0ZXJuICJDIiB7Ci0vKiAgVGhyZWFkQ3JlYXRpb24g
Ki8KLWludAotcHRocmVhZF9jcmVhdGUgKHB0aHJlYWRfdCAqIHRocmVhZCwg
Y29uc3QgcHRocmVhZF9hdHRyX3QgKiBhdHRyLCB2b2lkICooKnN0YXJ0X3Jv
dXRpbmUpICh2b2lkICopLCB2b2lkICphcmcpCi17Ci0gIHJldHVybiBfX3B0
aHJlYWRfY3JlYXRlICh0aHJlYWQsIGF0dHIsIHN0YXJ0X3JvdXRpbmUsIGFy
Zyk7Ci19Ci0KLWludAotcHRocmVhZF9hdHRyX2luaXQgKHB0aHJlYWRfYXR0
cl90ICogYXR0cikKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9hdHRyX2luaXQg
KGF0dHIpOwotfQotCi1pbnQKLXB0aHJlYWRfYXR0cl9kZXN0cm95IChwdGhy
ZWFkX2F0dHJfdCAqIGF0dHIpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfYXR0
cl9kZXN0cm95IChhdHRyKTsKLX0KLQotaW50Ci1wdGhyZWFkX2F0dHJfc2V0
c3RhY2tzaXplIChwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIHNpemVfdCBzaXpl
KQotewotICByZXR1cm4gX19wdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChh
dHRyLCBzaXplKTsKLX0KLQotaW50Ci1wdGhyZWFkX2F0dHJfZ2V0c3RhY2tz
aXplIChwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIHNpemVfdCAqIHNpemUpCitl
eHRlcm4gIkMiCiB7Ci0gIHJldHVybiBfX3B0aHJlYWRfYXR0cl9nZXRzdGFj
a3NpemUgKGF0dHIsIHNpemUpOwotfQorLyogIFRocmVhZENyZWF0aW9uICov
CisgIGludAorICAgIHB0aHJlYWRfY3JlYXRlIChwdGhyZWFkX3QgKiB0aHJl
YWQsIGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0ciwKKwkJICAgIHZvaWQg
Kigqc3RhcnRfcm91dGluZSkgKHZvaWQgKiksIHZvaWQgKmFyZykKKyAgewor
ICAgIHJldHVybiBfX3B0aHJlYWRfY3JlYXRlICh0aHJlYWQsIGF0dHIsIHN0
YXJ0X3JvdXRpbmUsIGFyZyk7CisgIH0KKworICBpbnQgcHRocmVhZF9hdHRy
X2luaXQgKHB0aHJlYWRfYXR0cl90ICogYXR0cikKKyAgeworICAgIHJldHVy
biBfX3B0aHJlYWRfYXR0cl9pbml0IChhdHRyKTsKKyAgfQorCisgIGludCBw
dGhyZWFkX2F0dHJfZGVzdHJveSAocHRocmVhZF9hdHRyX3QgKiBhdHRyKQor
ICB7CisgICAgcmV0dXJuIF9fcHRocmVhZF9hdHRyX2Rlc3Ryb3kgKGF0dHIp
OworICB9CisKKyAgaW50IHB0aHJlYWRfYXR0cl9zZXRkZXRhY2hzdGF0ZSAo
cHRocmVhZF9hdHRyX3QgKiBhdHRyLCBpbnQgZGV0YWNoc3RhdGUpCisgIHsK
KyAgICByZXR1cm4gX19wdGhyZWFkX2F0dHJfc2V0ZGV0YWNoc3RhdGUgKGF0
dHIsIGRldGFjaHN0YXRlKTsKKyAgfQorCisgIGludAorICAgIHB0aHJlYWRf
YXR0cl9nZXRkZXRhY2hzdGF0ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiBh
dHRyLAorCQkJCSBpbnQgKmRldGFjaHN0YXRlKQorICB7CisgICAgcmV0dXJu
IF9fcHRocmVhZF9hdHRyX2dldGRldGFjaHN0YXRlIChhdHRyLCBkZXRhY2hz
dGF0ZSk7CisgIH0KKworCisgIGludCBwdGhyZWFkX2F0dHJfc2V0c3RhY2tz
aXplIChwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIHNpemVfdCBzaXplKQorICB7
CisgICAgcmV0dXJuIF9fcHRocmVhZF9hdHRyX3NldHN0YWNrc2l6ZSAoYXR0
ciwgc2l6ZSk7CisgIH0KKworICBpbnQgcHRocmVhZF9hdHRyX2dldHN0YWNr
c2l6ZSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCBzaXplX3QgKiBzaXplKQor
ICB7CisgICAgcmV0dXJuIF9fcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZSAo
YXR0ciwgc2l6ZSk7CisgIH0KIAogCiAvKgpAQCAtNTIsMjE2ICs2MywxOTAg
QEAgcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZSAocHRocmVhZF9hdHRyXwog
ICovCiAKIC8qIFRocmVhZCBFeGl0ICovCi1pbnQKLXB0aHJlYWRfZXhpdCAo
dm9pZCAqIHZhbHVlX3B0cikKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9leGl0
ICh2YWx1ZV9wdHIpOwotfQotCi1pbnQKLXB0aHJlYWRfam9pbiAocHRocmVh
ZF90IHRocmVhZCwgdm9pZCAqKnJldHVybl92YWwpCi17Ci0gIHJldHVybiBf
X3B0aHJlYWRfam9pbiAoJnRocmVhZCwgKHZvaWQgKiopcmV0dXJuX3ZhbCk7
Ci19Ci0KLWludAotcHRocmVhZF9kZXRhY2ggKHB0aHJlYWRfdCB0aHJlYWQp
Ci17Ci0gIHJldHVybiBfX3B0aHJlYWRfZGV0YWNoICgmdGhyZWFkKTsKLX0K
LQotaW50Ci1wdGhyZWFkX3N1c3BlbmQgKHB0aHJlYWRfdCB0aHJlYWQpCi17
Ci0gICByZXR1cm4gX19wdGhyZWFkX3N1c3BlbmQgKCZ0aHJlYWQpOwotfQot
Ci1pbnQKLXB0aHJlYWRfY29udGludWUgKHB0aHJlYWRfdCB0aHJlYWQpCi17
Ci0gICByZXR1cm4gX19wdGhyZWFkX2NvbnRpbnVlICgmdGhyZWFkKTsKLX0K
LQotdW5zaWduZWQgbG9uZwotcHRocmVhZF9nZXRzZXF1ZW5jZV9ucCAocHRo
cmVhZF90ICogdGhyZWFkKQotewotICByZXR1cm4gX19wdGhyZWFkX2dldHNl
cXVlbmNlX25wICh0aHJlYWQpOwotfQorICB2b2lkIHB0aHJlYWRfZXhpdCAo
dm9pZCAqdmFsdWVfcHRyKQorICB7CisgICAgcmV0dXJuIF9fcHRocmVhZF9l
eGl0ICh2YWx1ZV9wdHIpOworICB9CisKKyAgaW50IHB0aHJlYWRfam9pbiAo
cHRocmVhZF90IHRocmVhZCwgdm9pZCAqKnJldHVybl92YWwpCisgIHsKKyAg
ICByZXR1cm4gX19wdGhyZWFkX2pvaW4gKCZ0aHJlYWQsICh2b2lkICoqKSBy
ZXR1cm5fdmFsKTsKKyAgfQorCisgIGludCBwdGhyZWFkX2RldGFjaCAocHRo
cmVhZF90IHRocmVhZCkKKyAgeworICAgIHJldHVybiBfX3B0aHJlYWRfZGV0
YWNoICgmdGhyZWFkKTsKKyAgfQorCisgIGludCBwdGhyZWFkX3N1c3BlbmQg
KHB0aHJlYWRfdCB0aHJlYWQpCisgIHsKKyAgICByZXR1cm4gX19wdGhyZWFk
X3N1c3BlbmQgKCZ0aHJlYWQpOworICB9CisKKyAgaW50IHB0aHJlYWRfY29u
dGludWUgKHB0aHJlYWRfdCB0aHJlYWQpCisgIHsKKyAgICByZXR1cm4gX19w
dGhyZWFkX2NvbnRpbnVlICgmdGhyZWFkKTsKKyAgfQorCisgIHVuc2lnbmVk
IGxvbmcgcHRocmVhZF9nZXRzZXF1ZW5jZV9ucCAocHRocmVhZF90ICogdGhy
ZWFkKQorICB7CisgICAgcmV0dXJuIF9fcHRocmVhZF9nZXRzZXF1ZW5jZV9u
cCAodGhyZWFkKTsKKyAgfQogCiAvKiBUaHJlYWQgU3BlY2lmaWNEYXRhICov
Ci1pbnQKLXB0aHJlYWRfa2V5X2NyZWF0ZSAocHRocmVhZF9rZXlfdCAqIGtl
eSkKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9rZXlfY3JlYXRlIChrZXkpOwot
fQotCi1pbnQKLXB0aHJlYWRfa2V5X2RlbGV0ZSAocHRocmVhZF9rZXlfdCAq
IGtleSkKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9rZXlfZGVsZXRlIChrZXkp
OwotfQotCi1pbnQKLXB0aHJlYWRfc2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5
X3QgKiBrZXksIGNvbnN0IHZvaWQgKnZhbHVlKQotewotICByZXR1cm4gX19w
dGhyZWFkX3NldHNwZWNpZmljIChrZXksIHZhbHVlKTsKLX0KLQotdm9pZCAq
Ci1wdGhyZWFkX2dldHNwZWNpZmljIChwdGhyZWFkX2tleV90ICoga2V5KQot
ewotICByZXR1cm4gKHZvaWQgKikgX19wdGhyZWFkX2dldHNwZWNpZmljIChr
ZXkpOwotfQorICBpbnQgcHRocmVhZF9rZXlfY3JlYXRlIChwdGhyZWFkX2tl
eV90ICoga2V5LCB2b2lkICgqZGVzdHJ1Y3RvcikgKHZvaWQgKikpCisgIHsK
KyAgICByZXR1cm4gX19wdGhyZWFkX2tleV9jcmVhdGUgKGtleSwgZGVzdHJ1
Y3Rvcik7CisgIH0KKworICBpbnQgcHRocmVhZF9rZXlfZGVsZXRlIChwdGhy
ZWFkX2tleV90ICoga2V5KQorICB7CisgICAgcmV0dXJuIF9fcHRocmVhZF9r
ZXlfZGVsZXRlIChrZXkpOworICB9CisKKyAgaW50IHB0aHJlYWRfc2V0c3Bl
Y2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5LCBjb25zdCB2b2lkICp2YWx1ZSkK
KyAgeworICAgIHJldHVybiBfX3B0aHJlYWRfc2V0c3BlY2lmaWMgKGtleSwg
dmFsdWUpOworICB9CisKKyAgdm9pZCAqcHRocmVhZF9nZXRzcGVjaWZpYyAo
cHRocmVhZF9rZXlfdCBrZXkpCisgIHsKKyAgICByZXR1cm4gKHZvaWQgKikg
X19wdGhyZWFkX2dldHNwZWNpZmljIChrZXkpOworICB9CiAKIC8qIFRocmVh
ZCBzaWduYWwgKi8KLWludAotcHRocmVhZF9raWxsIChwdGhyZWFkX3QgKiB0
aHJlYWQsIGludCBzaWcpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfa2lsbCAo
dGhyZWFkLCBzaWcpOwotfQorICBpbnQgcHRocmVhZF9raWxsIChwdGhyZWFk
X3QgKiB0aHJlYWQsIGludCBzaWcpCisgIHsKKyAgICByZXR1cm4gX19wdGhy
ZWFkX2tpbGwgKHRocmVhZCwgc2lnKTsKKyAgfQorCisgIGludAorICAgIHB0
aHJlYWRfc2lnbWFzayAoaW50IG9wZXJhdGlvbiwgY29uc3Qgc2lnc2V0X3Qg
KiBzZXQsIHNpZ3NldF90ICogb2xkX3NldCkKKyAgeworICAgIHJldHVybiBf
X3B0aHJlYWRfc2lnbWFzayAob3BlcmF0aW9uLCBzZXQsIG9sZF9zZXQpOwor
ICB9CiAKLWludAotcHRocmVhZF9zaWdtYXNrIChpbnQgb3BlcmF0aW9uLCBj
b25zdCBzaWdzZXRfdCAqIHNldCwgc2lnc2V0X3QgKiBvbGRfc2V0KQotewot
ICByZXR1cm4gX19wdGhyZWFkX3NpZ21hc2sgKG9wZXJhdGlvbiwgc2V0LCBv
bGRfc2V0KTsKLX0KLQogLyogIElEICovCiAKLXB0aHJlYWRfdAotcHRocmVh
ZF9zZWxmICgpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfc2VsZiAoKTsKLX0K
KyAgcHRocmVhZF90IHB0aHJlYWRfc2VsZiAoKQorICB7CisgICAgcmV0dXJu
IF9fcHRocmVhZF9zZWxmICgpOworICB9CisKKyAgaW50IHB0aHJlYWRfZXF1
YWwgKHB0aHJlYWRfdCB0MSwgcHRocmVhZF90IHQyKQorICB7CisgICAgcmV0
dXJuIF9fcHRocmVhZF9lcXVhbCAoJnQxLCAmdDIpOworICB9CiAKLWludAot
cHRocmVhZF9lcXVhbCAocHRocmVhZF90IHQxLCBwdGhyZWFkX3QgdDIpCi17
Ci0gIHJldHVybiBfX3B0aHJlYWRfZXF1YWwgKCZ0MSwgJnQyKTsKLX0KLQog
LyogTXV0ZXhlcyAgKi8KLWludAotcHRocmVhZF9tdXRleF9pbml0IChwdGhy
ZWFkX211dGV4X3QgKiBtdXRleCwgY29uc3QgcHRocmVhZF9tdXRleGF0dHJf
dCAqIGF0dHIpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfbXV0ZXhfaW5pdCAo
bXV0ZXgsIGF0dHIpOwotfQorICBpbnQKKyAgICBwdGhyZWFkX211dGV4X2lu
aXQgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4LAorCQkJY29uc3QgcHRocmVh
ZF9tdXRleGF0dHJfdCAqIGF0dHIpCisgIHsKKyAgICByZXR1cm4gX19wdGhy
ZWFkX211dGV4X2luaXQgKG11dGV4LCBhdHRyKTsKKyAgfQorCisgIGludCBw
dGhyZWFkX211dGV4X2xvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4KQor
ICB7CisgICAgcmV0dXJuIF9fcHRocmVhZF9tdXRleF9sb2NrIChtdXRleCk7
CisgIH0KKworICBpbnQgcHRocmVhZF9tdXRleF90cnlsb2NrIChwdGhyZWFk
X211dGV4X3QgKiBtdXRleCkKKyAgeworICAgIHJldHVybiBfX3B0aHJlYWRf
bXV0ZXhfdHJ5bG9jayAobXV0ZXgpOworICB9CisKKyAgaW50IHB0aHJlYWRf
bXV0ZXhfdW5sb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleCkKKyAgewor
ICAgIHJldHVybiBfX3B0aHJlYWRfbXV0ZXhfdW5sb2NrIChtdXRleCk7Cisg
IH0KKworICBpbnQgcHRocmVhZF9tdXRleF9kZXN0cm95IChwdGhyZWFkX211
dGV4X3QgKiBtdXRleCkKKyAgeworICAgIHJldHVybiBfX3B0aHJlYWRfbXV0
ZXhfZGVzdHJveSAobXV0ZXgpOworICB9CiAKLWludAotcHRocmVhZF9tdXRl
eF9sb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleCkKLXsKLSAgcmV0dXJu
IF9fcHRocmVhZF9tdXRleF9sb2NrIChtdXRleCk7Ci19Ci0KLWludAotcHRo
cmVhZF9tdXRleF90cnlsb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleCkK
LXsKLSAgcmV0dXJuIF9fcHRocmVhZF9tdXRleF90cnlsb2NrIChtdXRleCk7
Ci19Ci0KLWludAotcHRocmVhZF9tdXRleF91bmxvY2sgKHB0aHJlYWRfbXV0
ZXhfdCAqIG11dGV4KQotewotICByZXR1cm4gX19wdGhyZWFkX211dGV4X3Vu
bG9jayAobXV0ZXgpOwotfQotCi1pbnQKLXB0aHJlYWRfbXV0ZXhfZGVzdHJv
eSAocHRocmVhZF9tdXRleF90ICogbXV0ZXgpCi17Ci0gIHJldHVybiBfX3B0
aHJlYWRfbXV0ZXhfZGVzdHJveSAobXV0ZXgpOwotfQotCiAvKiBTeW5jaHJv
bmlzYXRpb24gKi8KLQotaW50Ci1wdGhyZWFkX2NvbmRfZGVzdHJveSAocHRo
cmVhZF9jb25kX3QgKmNvbmQpCi17Ci0gIHJldHVybiAgX19wdGhyZWFkX2Nv
bmRfZGVzdHJveSAoY29uZCk7Ci19CiAKLWludAotcHRocmVhZF9jb25kX2lu
aXQgKHB0aHJlYWRfY29uZF90ICpjb25kLCBjb25zdCBwdGhyZWFkX2NvbmRh
dHRyX3QgKmF0dHIpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfY29uZF9pbml0
IChjb25kLCBhdHRyKTsKLX0KLQotaW50Ci1wdGhyZWFkX2NvbmRfc2lnbmFs
IChwdGhyZWFkX2NvbmRfdCAqY29uZCkKLXsKLSAgcmV0dXJuIF9fcHRocmVh
ZF9jb25kX3NpZ25hbCAoY29uZCk7Ci19Ci0KLWludAotcHRocmVhZF9jb25k
X2Jyb2FkY2FzdCAocHRocmVhZF9jb25kX3QgKmNvbmQpCi17Ci0gIHJldHVy
biBfX3B0aHJlYWRfY29uZF9icm9hZGNhc3QgKGNvbmQpOwotfQotCi1pbnQK
LXB0aHJlYWRfY29uZF90aW1lZHdhaXQgKHB0aHJlYWRfY29uZF90ICpjb25k
LAotCSBwdGhyZWFkX211dGV4X3QgKm11dGV4LCBjb25zdCBzdHJ1Y3QgdGlt
ZXNwZWMgKmFic3RpbWUpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfY29uZF90
aW1lZHdhaXQgKGNvbmQsIG11dGV4LCBhYnN0aW1lKTsKLX0KLQotaW50Ci1w
dGhyZWFkX2NvbmRfd2FpdCAocHRocmVhZF9jb25kX3QgKmNvbmQsIHB0aHJl
YWRfbXV0ZXhfdCAqbXV0ZXgpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfY29u
ZF93YWl0IChjb25kLCBtdXRleCk7Ci19CisgIGludCBwdGhyZWFkX2NvbmRf
ZGVzdHJveSAocHRocmVhZF9jb25kX3QgKiBjb25kKQorICB7CisgICAgcmV0
dXJuIF9fcHRocmVhZF9jb25kX2Rlc3Ryb3kgKGNvbmQpOworICB9CisKKyAg
aW50CisgICAgcHRocmVhZF9jb25kX2luaXQgKHB0aHJlYWRfY29uZF90ICog
Y29uZCwgY29uc3QgcHRocmVhZF9jb25kYXR0cl90ICogYXR0cikKKyAgewor
ICAgIHJldHVybiBfX3B0aHJlYWRfY29uZF9pbml0IChjb25kLCBhdHRyKTsK
KyAgfQorCisgIGludCBwdGhyZWFkX2NvbmRfc2lnbmFsIChwdGhyZWFkX2Nv
bmRfdCAqIGNvbmQpCisgIHsKKyAgICByZXR1cm4gX19wdGhyZWFkX2NvbmRf
c2lnbmFsIChjb25kKTsKKyAgfQorCisgIGludCBwdGhyZWFkX2NvbmRfYnJv
YWRjYXN0IChwdGhyZWFkX2NvbmRfdCAqIGNvbmQpCisgIHsKKyAgICByZXR1
cm4gX19wdGhyZWFkX2NvbmRfYnJvYWRjYXN0IChjb25kKTsKKyAgfQorCisg
IGludAorICAgIHB0aHJlYWRfY29uZF90aW1lZHdhaXQgKHB0aHJlYWRfY29u
ZF90ICogY29uZCwKKwkJCSAgICBwdGhyZWFkX211dGV4X3QgKiBtdXRleCwK
KwkJCSAgICBjb25zdCBzdHJ1Y3QgdGltZXNwZWMgKmFic3RpbWUpCisgIHsK
KyAgICByZXR1cm4gX19wdGhyZWFkX2NvbmRfdGltZWR3YWl0IChjb25kLCBt
dXRleCwgYWJzdGltZSk7CisgIH0KKworICBpbnQgcHRocmVhZF9jb25kX3dh
aXQgKHB0aHJlYWRfY29uZF90ICogY29uZCwgcHRocmVhZF9tdXRleF90ICog
bXV0ZXgpCisgIHsKKyAgICByZXR1cm4gX19wdGhyZWFkX2NvbmRfd2FpdCAo
Y29uZCwgbXV0ZXgpOworICB9CisKKyAgaW50IHB0aHJlYWRfY29uZGF0dHJf
aW5pdCAocHRocmVhZF9jb25kYXR0cl90ICogY29uZGF0dHIpCisgIHsKKyAg
ICByZXR1cm4gX19wdGhyZWFkX2NvbmRhdHRyX2luaXQgKGNvbmRhdHRyKTsK
KyAgfQorCisgIGludCBwdGhyZWFkX2NvbmRhdHRyX2Rlc3Ryb3kgKHB0aHJl
YWRfY29uZGF0dHJfdCAqIGNvbmRhdHRyKQorICB7CisgICAgcmV0dXJuIF9f
cHRocmVhZF9jb25kYXR0cl9kZXN0cm95IChjb25kYXR0cik7CisgIH0KKwor
ICBpbnQKKyAgICBwdGhyZWFkX2NvbmRhdHRyX2dldHBzaGFyZWQgKGNvbnN0
IHB0aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIsCisJCQkJIGludCAqcHNoYXJl
ZCkKKyAgeworICAgIHJldHVybiBfX3B0aHJlYWRfY29uZGF0dHJfZ2V0cHNo
YXJlZCAoYXR0ciwgcHNoYXJlZCk7CisgIH0KKworICBpbnQgcHRocmVhZF9j
b25kYXR0cl9zZXRwc2hhcmVkIChwdGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRy
LCBpbnQgcHNoYXJlZCkKKyAgeworICAgIHJldHVybiBfX3B0aHJlYWRfY29u
ZGF0dHJfc2V0cHNoYXJlZCAoYXR0ciwgcHNoYXJlZCk7CisgIH0KIAotaW50
Ci1wdGhyZWFkX2NvbmRhdHRyX2luaXQgKHB0aHJlYWRfY29uZGF0dHJfdCAq
Y29uZGF0dHIpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfY29uZGF0dHJfaW5p
dCAoY29uZGF0dHIpOwotfQotCi1pbnQKLXB0aHJlYWRfY29uZGF0dHJfZGVz
dHJveSAocHRocmVhZF9jb25kYXR0cl90ICpjb25kYXR0cikKLXsKLSAgcmV0
dXJuIF9fcHRocmVhZF9jb25kYXR0cl9kZXN0cm95IChjb25kYXR0cik7Ci19
Ci0KLWludAotcHRocmVhZF9jb25kYXR0cl9nZXRwc2hhcmVkIChjb25zdCBw
dGhyZWFkX2NvbmRhdHRyX3QgKmF0dHIsIGludCAqcHNoYXJlZCkKLXsKLSAg
cmV0dXJuIF9fcHRocmVhZF9jb25kYXR0cl9nZXRwc2hhcmVkIChhdHRyLCBw
c2hhcmVkKTsKLX0KLQotaW50Ci1wdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFy
ZWQgKHB0aHJlYWRfY29uZGF0dHJfdCAqYXR0ciwgaW50IHBzaGFyZWQpCi17
Ci0gIHJldHVybiBfX3B0aHJlYWRfY29uZGF0dHJfc2V0cHNoYXJlZCAoYXR0
ciwgcHNoYXJlZCk7Ci19Ci0KIC8qIFNlbWFwaG9yZXMgKi8KLWludAotc2Vt
X2luaXQgKHNlbV90ICogc2VtLCBpbnQgcHNoYXJlZCwgdW5zaWduZWQgaW50
IHZhbHVlKQotewotICByZXR1cm4gX19zZW1faW5pdCAoc2VtLCBwc2hhcmVk
LCB2YWx1ZSk7Ci19Ci0KLWludAotc2VtX2Rlc3Ryb3kgKHNlbV90ICogc2Vt
KQotewotICByZXR1cm4gX19zZW1fZGVzdHJveSAoc2VtKTsKLX0KLQotaW50
Ci1zZW1fd2FpdCAoc2VtX3QgKiBzZW0pCi17Ci0gIHJldHVybiBfX3NlbV93
YWl0IChzZW0pOwotfQotCi1pbnQKLXNlbV90cnl3YWl0IChzZW1fdCAqIHNl
bSkKLXsKLSAgcmV0dXJuIF9fc2VtX3RyeXdhaXQgKHNlbSk7Ci19Ci0KLWlu
dAotc2VtX3Bvc3QgKHNlbV90ICogc2VtKQotewotICByZXR1cm4gX19zZW1f
cG9zdCAoc2VtKTsKLX0KKyAgaW50IHNlbV9pbml0IChzZW1fdCAqIHNlbSwg
aW50IHBzaGFyZWQsIHVuc2lnbmVkIGludCB2YWx1ZSkKKyAgeworICAgIHJl
dHVybiBfX3NlbV9pbml0IChzZW0sIHBzaGFyZWQsIHZhbHVlKTsKKyAgfQor
CisgIGludCBzZW1fZGVzdHJveSAoc2VtX3QgKiBzZW0pCisgIHsKKyAgICBy
ZXR1cm4gX19zZW1fZGVzdHJveSAoc2VtKTsKKyAgfQorCisgIGludCBzZW1f
d2FpdCAoc2VtX3QgKiBzZW0pCisgIHsKKyAgICByZXR1cm4gX19zZW1fd2Fp
dCAoc2VtKTsKKyAgfQorCisgIGludCBzZW1fdHJ5d2FpdCAoc2VtX3QgKiBz
ZW0pCisgIHsKKyAgICByZXR1cm4gX19zZW1fdHJ5d2FpdCAoc2VtKTsKKyAg
fQorCisgIGludCBzZW1fcG9zdCAoc2VtX3QgKiBzZW0pCisgIHsKKyAgICBy
ZXR1cm4gX19zZW1fcG9zdCAoc2VtKTsKKyAgfQogfQpJbmRleDogdGhyZWFk
LmNjCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9jdnMvc3Jj
L3NyYy93aW5zdXAvY3lnd2luL3RocmVhZC5jYyx2CnJldHJpZXZpbmcgcmV2
aXNpb24gMS4xOQpkaWZmIC11IC1wIC1yMS4xOSB0aHJlYWQuY2MKLS0tIHRo
cmVhZC5jYwkyMDAxLzAzLzE4IDIxOjExOjI1CTEuMTkKKysrIHRocmVhZC5j
YwkyMDAxLzAzLzIxIDAwOjAwOjExCkBAIC0xOCw2ICsxOCw3IEBAIGRldGFp
bHMuICovCiAjaW5jbHVkZSAid2luc3VwLmgiCiAjaW5jbHVkZSA8bGltaXRz
Lmg+CiAjaW5jbHVkZSA8ZXJybm8uaD4KKyNpbmNsdWRlICJjeWdlcnJuby5o
IgogI2luY2x1ZGUgPGFzc2VydC5oPgogI2luY2x1ZGUgPHN0ZGxpYi5oPgog
I2luY2x1ZGUgPHN5c2xvZy5oPgpAQCAtMjYsNiArMjcsNyBAQCBkZXRhaWxz
LiAqLwogI2luY2x1ZGUgInBpbmZvLmgiCiAjaW5jbHVkZSAicGVycHJvY2Vz
cy5oIgogI2luY2x1ZGUgInNlY3VyaXR5LmgiCisjaW5jbHVkZSA8c2VtYXBo
b3JlLmg+CiAKIGV4dGVybiBpbnQgdGhyZWFkc2FmZTsKIApAQCAtMzMsNTMg
KzM1LDEyIEBAIGV4dGVybiBpbnQgdGhyZWFkc2FmZTsKIAogI2RlZmluZSBO
T1RfSU1QKG4pICBzeXN0ZW1fcHJpbnRmICgibm90IGltcGxlbWVudGVkICVz
XG4iLCBuKTsgcmV0dXJuIDA7CiAKLSNkZWZpbmUgQ0hFQ0tIQU5ETEUocnZh
bCwgcmVsZWFzZSkgXAotICBpZiAoIWl0ZW0tPkhhbmRsZU9rZSAoKSkgXAot
ICAgIHsgXAotICAgICAgaWYgKHJlbGVhc2UpIFwKLQlpdGVtLT51c2VkPWZh
bHNlOyBcCi0gICAgICByZXR1cm4gcnZhbDsgXAotICAgIH0KLQotI2RlZmlu
ZSBHRVRUSFJFQUQobikgXAotICBpZiAoIXRocmVhZCkgc3lzdGVtX3ByaW50
ZiAoInRocmVhZCBpcyBOVUxMIik7XAotICBTZXRSZXNvdXJjZUxvY2sgKExP
Q0tfVEhSRUFEX0xJU1QsIFJFQURfTE9DSywgbik7XAotICBUaHJlYWRJdGVt
ICppdGVtPXVzZXJfZGF0YS0+dGhyZWFkaW50ZXJmYWNlLT5HZXRUaHJlYWQg
KHRocmVhZCk7IFwKLSAgUmVsZWFzZVJlc291cmNlTG9jayAoTE9DS19USFJF
QURfTElTVCwgUkVBRF9MT0NLLCBuKTsgXAotICBpZiAoIWl0ZW0pIHJldHVy
biBFSU5WQUw7IFwKLSAgQ0hFQ0tIQU5ETEUgKEVJTlZBTCwgMCk7Ci0KLSNk
ZWZpbmUgR0VUTVVURVgobikgXAotICBTZXRSZXNvdXJjZUxvY2sgKExPQ0tf
TVVURVhfTElTVCwgUkVBRF9MT0NLLCBuKTsgXAotICBNdXRleEl0ZW0qIGl0
ZW09dXNlcl9kYXRhLT50aHJlYWRpbnRlcmZhY2UtPkdldE11dGV4IChtdXRl
eCk7IFwKLSAgUmVsZWFzZVJlc291cmNlTG9jayAoTE9DS19NVVRFWF9MSVNU
LCBSRUFEX0xPQ0ssIG4pOyBcCi0gIGlmICghaXRlbSkgcmV0dXJuIEVJTlZB
TDsgIFwKLSAgQ0hFQ0tIQU5ETEUgKEVJTlZBTCwgMCk7Ci0KLSNkZWZpbmUg
R0VUU0VNQShuKSBcCi0gIFNldFJlc291cmNlTG9jayAoTE9DS19TRU1fTElT
VCwgUkVBRF9MT0NLLCBuKTsgXAotICBTZW1hcGhvcmVJdGVtKiBpdGVtPXVz
ZXJfZGF0YS0+dGhyZWFkaW50ZXJmYWNlLT5HZXRTZW1hcGhvcmUgKHNlbSk7
IFwKLSAgUmVsZWFzZVJlc291cmNlTG9jayAoTE9DS19TRU1fTElTVCwgUkVB
RF9MT0NLLCBuKTsgXAotICBpZiAoIWl0ZW0pIHJldHVybiBFSU5WQUw7IFwK
LSAgQ0hFQ0tIQU5ETEUgKEVJTlZBTCwgMCk7Ci0KLSNkZWZpbmUgR0VUQ09O
RChuKSBcCi0gIFNldFJlc291cmNlTG9jayAoTE9DS19DT05EX0xJU1QsIFJF
QURfTE9DSywgbik7IFwKLSAgQ29uZEl0ZW0gKml0ZW09dXNlcl9kYXRhLT50
aHJlYWRpbnRlcmZhY2UtPkdldENvbmQgKGNvbmQpOyBcCi0gIFJlbGVhc2VS
ZXNvdXJjZUxvY2sgKExPQ0tfQ09ORF9MSVNULCBSRUFEX0xPQ0ssIG4pOyBc
Ci0gIGlmICghaXRlbSkgcmV0dXJuIEVJTlZBTDsgXAotICBDSEVDS0hBTkRM
RSAoRUlOVkFMLCAwKTsKLQotI2RlZmluZSBDSEVDS0lURU0ocm4sIHJtLCBm
bikgXAotICBpZiAoIWl0ZW0pIHsgXAotICAgIFJlbGVhc2VSZXNvdXJjZUxv
Y2sgKHJuLCBybSwgZm4pOyBcCi0gICAgcmV0dXJuIEVJTlZBTDsgIH07IFwK
LQogc3RydWN0IF9yZWVudCAqCiBfcmVlbnRfY2xpYiAoKQogewogICBpbnQg
dG1wID0gR2V0TGFzdEVycm9yICgpOwotICBzdHJ1Y3QgX19yZWVudF90ICpf
ciA9IChzdHJ1Y3QgX19yZWVudF90ICopIFRsc0dldFZhbHVlIChNVF9JTlRF
UkZBQ0UtPnJlZW50X2luZGV4KTsKKyAgc3RydWN0IF9fcmVlbnRfdCAqX3Ig
PQorICAgIChzdHJ1Y3QgX19yZWVudF90ICopIFRsc0dldFZhbHVlIChNVF9J
TlRFUkZBQ0UtPnJlZW50X2luZGV4KTsKIAogI2lmZGVmIF9DWUdfVEhSRUFE
X0ZBSUxTQUZFCiAgIGlmIChfciA9PSAwKQpAQCAtMTExLDggKzcyLDkgQEAg
UmVzb3VyY2VMb2Nrczo6TG9jayAoaW50IF9yZXNpZCkKICAgaWYgKCFpbml0
ZWQpCiAgICAgc3lzdGVtX3ByaW50ZiAoImxvY2sgY2FsbGVkIGJlZm9yZSBp
bml0aWFsaXphdGlvbiIpOwogCi0gIHRocmVhZF9wcmludGYgKCJHZXQgUmVz
b3VyY2UgbG9jayAlZCA9PT4gJXAgZm9yICVwICwgcmVhbCA6ICVkICwgdGhy
ZWFkaWQgJWQgIiwKLQkJIF9yZXNpZCwgJmxvY2ssIHVzZXJfZGF0YSwgbXlz
ZWxmLT5waWQsIEdldEN1cnJlbnRUaHJlYWRJZCAoKSk7CisgIHRocmVhZF9w
cmludGYKKyAgICAoIkdldCBSZXNvdXJjZSBsb2NrICVkID09PiAlcCBmb3Ig
JXAgLCByZWFsIDogJWQgLCB0aHJlYWRpZCAlZCAiLCBfcmVzaWQsCisgICAg
ICZsb2NrLCB1c2VyX2RhdGEsIG15c2VsZi0+cGlkLCBHZXRDdXJyZW50VGhy
ZWFkSWQgKCkpOwogI2VuZGlmCiAgIHJldHVybiAmbG9jazsKIH0KQEAgLTEz
Niw3ICs5OCw4IEBAIHZvaWQKIFJlbGVhc2VSZXNvdXJjZUxvY2sgKGludCBf
cmVzX2lkLCBpbnQgX21vZGUsIGNvbnN0IGNoYXIgKl9mdW5jdGlvbikKIHsK
ICNpZmRlZiBfQ1lHX1RIUkVBRF9GQUlMU0FGRQotICB0aHJlYWRfcHJpbnRm
ICgiUmVsZWFzZSByZXNvdXJjZSBsb2NrICVkIG1vZGUgJWQgZm9yICVzIGRv
bmUiLCBfcmVzX2lkLCBfbW9kZSwgX2Z1bmN0aW9uKTsKKyAgdGhyZWFkX3By
aW50ZiAoIlJlbGVhc2UgcmVzb3VyY2UgbG9jayAlZCBtb2RlICVkIGZvciAl
cyBkb25lIiwgX3Jlc19pZCwKKwkJIF9tb2RlLCBfZnVuY3Rpb24pOwogCiAg
IEFzc2VydFJlc291cmNlT3duZXIgKF9yZXNfaWQsIF9tb2RlKTsKICAgdXNl
cl9kYXRhLT5yZXNvdXJjZWxvY2tzLT5jb3VudC0tOwpAQCAtMTUyLDkgKzEx
NSwxMCBAQCB2b2lkCiBBc3NlcnRSZXNvdXJjZU93bmVyIChpbnQgX3Jlc19p
ZCwgaW50IF9tb2RlKQogewogCi0gIHRocmVhZF9wcmludGYgKCJBc3NlcnQg
UmVzb3VyY2UgbG9jayAlZCA9PT4gZm9yICVwICwgcmVhbCA6ICVkICwgdGhy
ZWFkaWQgJWQgY291bnQgJWQgb3duZXIgJWQiLAotCQkgX3Jlc19pZCwgdXNl
cl9kYXRhLCBteXNlbGYtPnBpZCwgR2V0Q3VycmVudFRocmVhZElkICgpLAot
CQkgdXNlcl9kYXRhLT5yZXNvdXJjZWxvY2tzLT5jb3VudCwgdXNlcl9kYXRh
LT5yZXNvdXJjZWxvY2tzLT5vd25lcik7CisgIHRocmVhZF9wcmludGYKKyAg
ICAoIkFzc2VydCBSZXNvdXJjZSBsb2NrICVkID09PiBmb3IgJXAgLCByZWFs
IDogJWQgLCB0aHJlYWRpZCAlZCBjb3VudCAlZCBvd25lciAlZCIsCisgICAg
IF9yZXNfaWQsIHVzZXJfZGF0YSwgbXlzZWxmLT5waWQsIEdldEN1cnJlbnRU
aHJlYWRJZCAoKSwKKyAgICAgdXNlcl9kYXRhLT5yZXNvdXJjZWxvY2tzLT5j
b3VudCwgdXNlcl9kYXRhLT5yZXNvdXJjZWxvY2tzLT5vd25lcik7CiAgIGlm
ICh1c2VyX2RhdGEgJiYgKHVzZXJfZGF0YS0+cmVzb3VyY2Vsb2Nrcy0+b3du
ZXIgIT0gR2V0Q3VycmVudFRocmVhZElkICgpKSkKICAgICBzeXN0ZW1fcHJp
bnRmICgiYXNzZXJ0aW9uIGZhaWxlZCwgbm90IHRoZSByZXNvdXJjZSBvd25l
ciIpOwogfQpAQCAtMTg2LDc4ICsxNTAsNyBAQCBSZXNvdXJjZUxvY2tzOjpE
ZWxldGUgKCkKICAgICB9CiB9CiAKLS8vIFRocmVhZCBpbnRlcmZhY2UKLQog
dm9pZAotTVRpbnRlcmZhY2U6OlJlbGVhc2VJdGVtIChNVGl0ZW0gKiBfaXRl
bSkKLXsKLSAgX2l0ZW0tPnVzZWQgPSBmYWxzZTsKLX0KLQotTVRpdGVtICoK
LU1UaW50ZXJmYWNlOjpGaW5kICh2b2lkICpfdmFsdWUsIGludCAoKmNvbXAp
ICh2b2lkICosIHZvaWQgKiksIHJlZ2lzdGVyIGludCAmX2luZGV4LCBNVExp
c3QgKiBfbGlzdCkKLXsKLSAgcmVnaXN0ZXIgTVRpdGVtICpjdXJyZW50ID0g
TlVMTDsKLSAgZm9yICg7IF9pbmRleCA8IF9saXN0LT5pbmRleDsgX2luZGV4
KyspCi0gICAgewotICAgICAgY3VycmVudCA9IF9saXN0LT5pdGVtc1tfaW5k
ZXhdOwotICAgICAgaWYgKGN1cnJlbnQtPnVzZWQgJiYgY29tcCAoY3VycmVu
dCwgX3ZhbHVlKSkKLQlicmVhazsKLSAgICAgIGN1cnJlbnQgPSBOVUxMOwot
ICAgIH0KLSAgcmV0dXJuIGN1cnJlbnQ7Ci19Ci0KLWludAotTVRpbnRlcmZh
Y2U6OkZpbmQgKE1UaXRlbSAmIF9pdGVtLCBNVExpc3QgKiBfbGlzdCkKLXsK
LSAgcmVnaXN0ZXIgTVRpdGVtICpjdXJyZW50OwotICByZWdpc3RlciBpbnQg
X2luZGV4ID0gMDsKLSAgZm9yICg7IF9pbmRleCA8IF9saXN0LT5pbmRleDsg
X2luZGV4KyspCi0gICAgewotICAgICAgY3VycmVudCA9IF9saXN0LT5pdGVt
c1tfaW5kZXhdOwotICAgICAgaWYgKGN1cnJlbnQtPnVzZWQgJiYgY3VycmVu
dCA9PSAmX2l0ZW0pCi0JYnJlYWs7Ci0gICAgfQotICByZXR1cm4gKF9pbmRl
eCA9PSBfbGlzdC0+aW5kZXggPyAtMSA6IF9pbmRleCk7Ci19Ci0KLWludAot
TVRpbnRlcmZhY2U6OkZpbmROZXh0VW51c2VkIChNVExpc3QgKiBfbGlzdCkK
LXsKLSAgcmVnaXN0ZXIgaW50IGkgPSAwOwotICBmb3IgKDsgaSA8IF9saXN0
LT5pbmRleCAmJiBfbGlzdC0+aXRlbXNbaV0gIT0gTlVMTCAmJiBfbGlzdC0+
aXRlbXNbaV0tPnVzZWQgJiYgX2xpc3QtPml0ZW1zW2ldLT5qb2luYWJsZSAh
PSAnWSc7ICBpKyspCi0gICAgY29udGludWU7Ci0gIHJldHVybiBpOwotfQot
Ci1NVGl0ZW0gKgotTVRpbnRlcmZhY2U6OkdldEl0ZW0gKGludCBfaW5kZXgs
IE1UTGlzdCAqIF9saXN0KQotewotICByZXR1cm4gKF9pbmRleCA8IF9saXN0
LT5pbmRleCA/IF9saXN0LT5pdGVtc1tfaW5kZXhdIDogTlVMTCk7Ci19Ci0K
LU1UaXRlbSAqCi1NVGludGVyZmFjZTo6U2V0SXRlbSAoaW50IF9pbmRleCwg
TVRpdGVtICogX2l0ZW0sIE1UTGlzdCAqIF9saXN0KQotewotICBpZiAoX2lu
ZGV4ID09IF9saXN0LT5pbmRleCAmJiBfbGlzdC0+aW5kZXggPCBNVF9NQVhf
SVRFTVMpCi0gICAgX2xpc3QtPmluZGV4Kys7Ci0gIHJldHVybiAoX2luZGV4
IDwgX2xpc3QtPmluZGV4ID8gX2xpc3QtPml0ZW1zW19pbmRleF0gPSBfaXRl
bSA6IE5VTEwpOwotfQotCi1pbnQKLUNtcFB0aHJlYWRPYmogKHZvaWQgKl9p
LCB2b2lkICpfdmFsdWUpCi17Ci0gIHJldHVybiAoKE1UaXRlbSAqKSBfaSkt
PklkICgpID09ICooaW50ICopIF92YWx1ZTsKLX0KLQotaW50Ci1DbXBUaHJl
YWRJZCAodm9pZCAqX2ksIHZvaWQgKl9pZCkKLXsKLSAgcmV0dXJuICgoVGhy
ZWFkSXRlbSAqKSBfaSktPnRocmVhZF9pZCA9PSAqIChEV09SRCAqKSBfaWQ7
Ci19Ci0KLXZvaWQKIE1UaW50ZXJmYWNlOjpJbml0IChpbnQgZm9ya2VkKQog
ewogI2lmIDAKQEAgLTI4OCwxNyArMTgxLDI0IEBAIE1UaW50ZXJmYWNlOjpJ
bml0IChpbnQgZm9ya2VkKQogICBUbHNTZXRWYWx1ZSAocmVlbnRfaW5kZXgs
ICZyZWVudHMpOwogICAvLyB0aGUgc3RhdGljIHJlZW50X2RhdGEgd2lsbCBi
ZSB1c2VkIGluIHRoZSBtYWluIHRocmVhZAogCisKKyAgaWYgKCFpbmRleGFs
bG9jYXRlZCkKKyAgICB7CisgICAgICBpbmRleGFsbG9jYXRlZCA9ICgtMSk7
CisgICAgICB0aHJlYWRfc2VsZl9kd1Rsc0luZGV4ID0gVGxzQWxsb2MgKCk7
CisgICAgICBpZiAodGhyZWFkX3NlbGZfZHdUbHNJbmRleCA9PSBUTFNfT1VU
X09GX0lOREVYRVMpCisJc3lzdGVtX3ByaW50ZgorCSAgKCJsb2NhbCBzdG9y
YWdlIGZvciB0aHJlYWQgY291bGRuJ3QgYmUgc2V0XG5UaGlzIG1lYW5zIHRo
YXQgd2UgYXJlIG5vdCB0aHJlYWQgc2FmZSFcbiIpOworICAgIH0KKwogICBp
ZiAoZm9ya2VkKQogICAgIHJldHVybjsKIAotICAvLyBjcmVhdGUgZW50cnkg
Zm9yIG1haW4gdGhyZWFkCiAKLSAgVGhyZWFkSXRlbSAqaXRlbSA9IChUaHJl
YWRJdGVtICopIEdldEl0ZW0gKDAsICZ0aHJlYWRsaXN0KTsKLQotICBpdGVt
ID0gKFRocmVhZEl0ZW0gKikgU2V0SXRlbSAoMCwgJm1haW50aHJlYWQsICZ0
aHJlYWRsaXN0KTsKLSAgaXRlbS0+dXNlZCA9IHRydWU7Ci0gIGl0ZW0tPndp
bjMyX29ial9pZCA9IG15c2VsZi0+aFByb2Nlc3M7Ci0gIGl0ZW0tPnRocmVh
ZF9pZCA9IEdldEN1cnJlbnRUaHJlYWRJZCAoKTsKKyAgbWFpbnRocmVhZC53
aW4zMl9vYmpfaWQgPSBteXNlbGYtPmhQcm9jZXNzOworICBtYWludGhyZWFk
LnNldFRocmVhZElkdG9DdXJyZW50ICgpOworICAvKiBzdG9yZSB0aGUgbWFp
biB0aHJlYWQncyBzZWxmIHBvaW50ZXIgKi8KKyAgVGxzU2V0VmFsdWUgKHRo
cmVhZF9zZWxmX2R3VGxzSW5kZXgsICZtYWludGhyZWFkKTsKICNpZiAwCiAg
IGl0ZW0tPmZ1bmN0aW9uID0gTlVMTDsKIApAQCAtMzA4LDI0NSArMjA4LDI2
NCBAQCBNVGludGVyZmFjZTo6SW5pdCAoaW50IGZvcmtlZCkKICNlbmRpZgog
fQogCi1UaHJlYWRJdGVtICoKLU1UaW50ZXJmYWNlOjpDcmVhdGVUaHJlYWQg
KHB0aHJlYWRfdCAqIHQsIFRGRCAoZnVuYyksIHZvaWQgKmFyZywgcHRocmVh
ZF9hdHRyX3QgYSkKK3B0aHJlYWQ6OnB0aHJlYWQgKCk6dmVyaWZ5YWJsZV9v
YmplY3QgKFBUSFJFQURfTUFHSUMpLCB3aW4zMl9vYmpfaWQgKDApCiB7Ci0g
IEFzc2VydFJlc291cmNlT3duZXIgKExPQ0tfVEhSRUFEX0xJU1QsIFdSSVRF
X0xPQ0sgfCBSRUFEX0xPQ0spOworfQogCi0gIGludCBpID0gRmluZE5leHRV
bnVzZWQgKCZ0aHJlYWRsaXN0KTsKK3B0aHJlYWQ6On5wdGhyZWFkICgpCit7
CisgIGlmICh3aW4zMl9vYmpfaWQpCisgICAgQ2xvc2VIYW5kbGUgKHdpbjMy
X29ial9pZCk7Cit9CiAKLSAgVGhyZWFkSXRlbSAqaXRlbSA9IChUaHJlYWRJ
dGVtICopIEdldEl0ZW0gKGksICZ0aHJlYWRsaXN0KTsKLSAgaWYgKCFpdGVt
KQotICAgIGl0ZW0gPSAoVGhyZWFkSXRlbSAqKSBTZXRJdGVtIChpLCBuZXcg
VGhyZWFkSXRlbSAoKSwgJnRocmVhZGxpc3QpOwotICBpZiAoIWl0ZW0pCi0g
ICAgc3lzdGVtX3ByaW50ZiAoInRocmVhZCBjcmVhdGlvbiBmYWlsZWQiKTsK
IAotICBpdGVtLT51c2VkID0gdHJ1ZTsKLSAgaXRlbS0+ZnVuY3Rpb24gPSBm
dW5jOwotICBpdGVtLT5hcmcgPSBhcmc7Ci0gIGl0ZW0tPmF0dHIgPSBhOwor
dm9pZAorcHRocmVhZDo6Y3JlYXRlICh2b2lkICooKmZ1bmMpICh2b2lkICop
LCBwdGhyZWFkX2F0dHIgKiBuZXdhdHRyLAorCQkgdm9pZCAqdGhyZWFkYXJn
KQoreworICAvKiBhbHJlYWR5IHJ1bm5pbmcgPyAqLworICBpZiAod2luMzJf
b2JqX2lkKQorICAgIHJldHVybjsKIAotICBpdGVtLT53aW4zMl9vYmpfaWQg
PSA6OkNyZWF0ZVRocmVhZCAoJnNlY19ub25lX25paCwgaXRlbS0+YXR0ci5z
dGFja3NpemUsCi0gICAoTFBUSFJFQURfU1RBUlRfUk9VVElORSkgdGhyZWFk
X2luaXRfd3JhcHBlciwgaXRlbSwgMCwgJml0ZW0tPnRocmVhZF9pZCk7Cisg
IGlmIChuZXdhdHRyKQorICAgIHsKKyAgICAgIGF0dHIuam9pbmFibGUgPSBu
ZXdhdHRyLT5qb2luYWJsZTsKKyAgICAgIGF0dHIuc3RhY2tzaXplID0gbmV3
YXR0ci0+c3RhY2tzaXplOworICAgIH0KKyAgZnVuY3Rpb24gPSBmdW5jOwor
ICBhcmcgPSB0aHJlYWRhcmc7CiAKLSAgQ0hFQ0tIQU5ETEUgKE5VTEwsIDEp
OworICB3aW4zMl9vYmpfaWQgPTo6Q3JlYXRlVGhyZWFkICgmc2VjX25vbmVf
bmloLCBhdHRyLnN0YWNrc2l6ZSwKKwkJCQkoTFBUSFJFQURfU1RBUlRfUk9V
VElORSkgdGhyZWFkX2luaXRfd3JhcHBlciwKKwkJCQl0aGlzLCBDUkVBVEVf
U1VTUEVOREVELCAmdGhyZWFkX2lkKTsKIAotICAqdCA9IChwdGhyZWFkX3Qp
IGl0ZW0tPndpbjMyX29ial9pZDsKKyAgaWYgKCF3aW4zMl9vYmpfaWQpCisg
ICAgbWFnaWMgPSAwOworICBlbHNlCisgICAgUmVzdW1lVGhyZWFkICh3aW4z
Ml9vYmpfaWQpOworfQogCi0gIHJldHVybiBpdGVtOworcHRocmVhZF9hdHRy
OjpwdGhyZWFkX2F0dHIgKCk6dmVyaWZ5YWJsZV9vYmplY3QgKFBUSFJFQURf
QVRUUl9NQUdJQyksCitqb2luYWJsZSAoUFRIUkVBRF9DUkVBVEVfSk9JTkFC
TEUpLCBzdGFja3NpemUgKDApCit7CiB9CiAKLU11dGV4SXRlbSAqCi1NVGlu
dGVyZmFjZTo6Q3JlYXRlTXV0ZXggKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4
KQorcHRocmVhZF9hdHRyOjp+cHRocmVhZF9hdHRyICgpCiB7Ci0gIEFzc2Vy
dFJlc291cmNlT3duZXIgKExPQ0tfTVVURVhfTElTVCwgV1JJVEVfTE9DSyB8
IFJFQURfTE9DSyk7Cit9CiAKLSAgaW50IGkgPSBGaW5kTmV4dFVudXNlZCAo
Jm11dGV4bGlzdCk7CitwdGhyZWFkX2NvbmRhdHRyOjpwdGhyZWFkX2NvbmRh
dHRyICgpOnZlcmlmeWFibGVfb2JqZWN0IAorKFBUSFJFQURfQ09OREFUVFJf
TUFHSUMpLCBzaGFyZWQgKFBUSFJFQURfUFJPQ0VTU19QUklWQVRFKQorewor
fQogCi0gIE11dGV4SXRlbSAqaXRlbSA9IChNdXRleEl0ZW0gKikgR2V0SXRl
bSAoaSwgJm11dGV4bGlzdCk7Ci0gIGlmICghaXRlbSkKLSAgICBpdGVtID0g
KE11dGV4SXRlbSAqKSBTZXRJdGVtIChpLCBuZXcgTXV0ZXhJdGVtICgpLCAm
bXV0ZXhsaXN0KTsKLSAgaWYgKCFpdGVtKQotICAgIHN5c3RlbV9wcmludGYg
KCJtdXRleCBjcmVhdGlvbiBmYWlsZWQiKTsKLSAgaXRlbS0+dXNlZCA9IHRy
dWU7CitwdGhyZWFkX2NvbmRhdHRyOjp+cHRocmVhZF9jb25kYXR0ciAoKQor
eworfQogCi0gIGl0ZW0tPndpbjMyX29ial9pZCA9IDo6Q3JlYXRlTXV0ZXgg
KCZzZWNfbm9uZV9uaWgsIGZhbHNlLCBOVUxMKTsKK3B0aHJlYWRfY29uZDo6
cHRocmVhZF9jb25kIChwdGhyZWFkX2NvbmRhdHRyICogYXR0cik6dmVyaWZ5
YWJsZV9vYmplY3QgKFBUSFJFQURfQ09ORF9NQUdJQykKK3sKKyAgdGhpcy0+
c2hhcmVkID0gYXR0ciA/IGF0dHItPnNoYXJlZCA6IFBUSFJFQURfUFJPQ0VT
U19QUklWQVRFOworICB0aGlzLT5tdXRleCA9IE5VTEw7CisgIHRoaXMtPndh
aXRpbmcgPSAwOwogCi0gIENIRUNLSEFORExFIChOVUxMLCAxKTsKKyAgdGhp
cy0+d2luMzJfb2JqX2lkID06OkNyZWF0ZUV2ZW50ICgmc2VjX25vbmVfbmlo
LCAKKwlmYWxzZSwJLyogYXV0byBzaWduYWwgcmVzZXQgLSB3aGljaCBJIHRo
aW5rIGlzIHB0aHJlYWRzIGxpa2UgPyAqLworCWZhbHNlLAkvKiBzdGFydCBu
b24gc2lnbmFsZWQgKi8KKwlOVUxMIC8qIG5vIG5hbWUgKi8gKTsKIAotICAq
bXV0ZXggPSAocHRocmVhZF9tdXRleF90KSBpdGVtLT53aW4zMl9vYmpfaWQ7
CisgIGlmICghdGhpcy0+d2luMzJfb2JqX2lkKQorICAgIG1hZ2ljID0gMDsK
K30KIAotICByZXR1cm4gaXRlbTsKK3B0aHJlYWRfY29uZDo6fnB0aHJlYWRf
Y29uZCAoKQoreworICBpZiAod2luMzJfb2JqX2lkKQorICAgIENsb3NlSGFu
ZGxlICh3aW4zMl9vYmpfaWQpOwogfQogCi1UaHJlYWRJdGVtICoKLU1UaW50
ZXJmYWNlOjpHZXRDYWxsaW5nVGhyZWFkICgpCit2b2lkCitwdGhyZWFkX2Nv
bmQ6OkJyb2FkQ2FzdCAoKQogewotICBBc3NlcnRSZXNvdXJjZU93bmVyIChM
T0NLX1RIUkVBRF9MSVNULCBSRUFEX0xPQ0spOwotICBEV09SRCBpZCA9IEdl
dEN1cnJlbnRUaHJlYWRJZCAoKTsKLSAgaW50IGluZGV4ID0gMDsKLSAgcmV0
dXJuIChUaHJlYWRJdGVtICopIEZpbmQgKCZpZCwgJkNtcFRocmVhZElkLCBp
bmRleCwgJnRocmVhZGxpc3QpOworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0
X2lzdmFsaWQgKG11dGV4LCBQVEhSRUFEX01VVEVYX01BR0lDKSkKKyAgICBy
ZXR1cm47CisgIFB1bHNlRXZlbnQgKHdpbjMyX29ial9pZCk7CisgIHdoaWxl
IChJbnRlcmxvY2tlZERlY3JlbWVudCAoJndhaXRpbmcpICE9IDApCisgICAg
UHVsc2VFdmVudCAod2luMzJfb2JqX2lkKTsKKyAgbXV0ZXggPSBOVUxMOwog
fQogCi1UaHJlYWRJdGVtICoKLU1UaW50ZXJmYWNlOjpHZXRUaHJlYWQgKHB0
aHJlYWRfdCAqIF90KQordm9pZAorcHRocmVhZF9jb25kOjpTaWduYWwgKCkK
K3sKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkIChtdXRleCwg
UFRIUkVBRF9NVVRFWF9NQUdJQykpCisgICAgcmV0dXJuOworICBQdWxzZUV2
ZW50ICh3aW4zMl9vYmpfaWQpOworfQorCitpbnQKK3B0aHJlYWRfY29uZDo6
VGltZWRXYWl0IChEV09SRCBkd01pbGxpc2Vjb25kcykKIHsKLSAgQXNzZXJ0
UmVzb3VyY2VPd25lciAoTE9DS19USFJFQURfTElTVCwgUkVBRF9MT0NLKTsK
LSAgaW50IGluZGV4ID0gMDsKLSAgcmV0dXJuIChUaHJlYWRJdGVtICopIEZp
bmQgKF90LCAmQ21wUHRocmVhZE9iaiwgaW5kZXgsICZ0aHJlYWRsaXN0KTsK
KyAgRFdPUkQgcnYgPQorICAgIFNpZ25hbE9iamVjdEFuZFdhaXQgKG11dGV4
LT53aW4zMl9vYmpfaWQsIHdpbjMyX29ial9pZCwgZHdNaWxsaXNlY29uZHMs
CisJCQkgZmFsc2UpOworICBzd2l0Y2ggKHJ2KQorICAgIHsKKyAgICBjYXNl
IFdBSVRfRkFJTEVEOgorICAgICAgcmV0dXJuIDA7CQkvKiBQT1NJWCBkb2Vz
bid0IGFsbG93IGVycm9ycyBhZnRlciB3ZSBtb2RpZnkgdGhlIG11dGV4IHN0
YXRlICovCisgICAgY2FzZSBXQUlUX0FCQU5ET05FRDoKKyAgICAgIHJldHVy
biBFVElNRURPVVQ7CisgICAgY2FzZSBXQUlUX09CSkVDVF8wOgorICAgICAg
cmV0dXJuIDA7CQkvKiB3ZSBoYXZlIGJlZW4gc2lnbmFsZWQgKi8KKyAgICBk
ZWZhdWx0OgorICAgICAgcmV0dXJuIDA7CisgICAgfQogfQogCi1NdXRleEl0
ZW0gKgotTVRpbnRlcmZhY2U6OkdldE11dGV4IChwdGhyZWFkX211dGV4X3Qg
KiBtcCkKK3B0aHJlYWRfa2V5OjpwdGhyZWFkX2tleSAoKTp2ZXJpZnlhYmxl
X29iamVjdCAoUFRIUkVBRF9LRVlfTUFHSUMpCiB7Ci0gIEFzc2VydFJlc291
cmNlT3duZXIgKExPQ0tfTVVURVhfTElTVCwgUkVBRF9MT0NLKTsKLSAgaW50
IGluZGV4ID0gMDsKLSAgcmV0dXJuIChNdXRleEl0ZW0gKikgRmluZCAobXAs
ICZDbXBQdGhyZWFkT2JqLCBpbmRleCwgJm11dGV4bGlzdCk7CisgIGR3VGxz
SW5kZXggPSBUbHNBbGxvYyAoKTsKKyAgaWYgKGR3VGxzSW5kZXggPT0gVExT
X09VVF9PRl9JTkRFWEVTKQorICAgIG1hZ2ljID0gMDsKIH0KKworcHRocmVh
ZF9rZXk6On5wdGhyZWFkX2tleSAoKQoreworLyogRklYTUU6IE5ldyBmZWF0
dXJlIGNvbXBsZXRlbmVzcy4KKyAqIGJyYWNrZXRlZCBjb2RlIGlzIHRvIGNh
bGxlZCB3aGVuIHRoZSB0aHJlYWQgZXhpc3RzLCBub3Qgd2hlbiBkZWxldGUg
aXMgY2FsbGVkCisgKiBpZiAoZGVzdHJ1Y3RvciAmJiBUbHNHZXRWYWx1ZShk
d1Rsc0luZGV4KSkKKyAqICAgZGVzdHJ1Y3RvciAoVGxzR2V0VmFsdWUoZHdU
bHNJbmRleCkpOworICovCisgIFRsc0ZyZWUgKGR3VGxzSW5kZXgpOworfTsK
IAotU2VtYXBob3JlSXRlbSAqCi1NVGludGVyZmFjZTo6R2V0U2VtYXBob3Jl
IChzZW1fdCAqIHNwKQoraW50CitwdGhyZWFkX2tleTo6c2V0IChjb25zdCB2
b2lkICp2YWx1ZSkKIHsKLSAgQXNzZXJ0UmVzb3VyY2VPd25lciAoTE9DS19T
RU1fTElTVCwgUkVBRF9MT0NLKTsKLSAgaW50IGluZGV4ID0gMDsKLSAgcmV0
dXJuIChTZW1hcGhvcmVJdGVtICopIEZpbmQgKHNwLCAmQ21wUHRocmVhZE9i
aiwgaW5kZXgsICZzZW1hbGlzdCk7CisgIC8qIHRoZSBPUyBmdW5jdGlvbiBk
b2Vzbid0IHBlcmZvcm0gZXJyb3IgY2hlY2tpbmcgKi8KKyAgVGxzU2V0VmFs
dWUgKGR3VGxzSW5kZXgsICh2b2lkICopIHZhbHVlKTsKKyAgcmV0dXJuIDA7
CiB9CiAKLUNvbmRJdGVtICoKLU1UaW50ZXJmYWNlOjpHZXRDb25kIChwdGhy
ZWFkX2NvbmRfdCAqIG1wKQordm9pZCAqCitwdGhyZWFkX2tleTo6Z2V0ICgp
CiB7Ci0gIEFzc2VydFJlc291cmNlT3duZXIgKExPQ0tfQ09ORF9MSVNULCBS
RUFEX0xPQ0spOwotICBpbnQgaW5kZXggPSAwOwotICByZXR1cm4gKENvbmRJ
dGVtICopIEZpbmQgKG1wLCAmQ21wUHRocmVhZE9iaiwgaW5kZXgsICZjb25k
bGlzdCk7CisgIHNldF9lcnJubyAoMCk7CisgIHJldHVybiBUbHNHZXRWYWx1
ZSAoZHdUbHNJbmRleCk7CiB9CiAKLXZvaWQKLU1UaXRlbTo6RGVzdHJveSAo
KQorcHRocmVhZF9tdXRleDo6cHRocmVhZF9tdXRleCAocHRocmVhZF9tdXRl
eGF0dHIgKiBhdHRyKTp2ZXJpZnlhYmxlX29iamVjdCAoUFRIUkVBRF9NVVRF
WF9NQUdJQykKIHsKLSAgQ2xvc2VIYW5kbGUgKHdpbjMyX29ial9pZCk7Cisg
IHRoaXMtPndpbjMyX29ial9pZCA9OjpDcmVhdGVNdXRleCAoJnNlY19ub25l
X25paCwgZmFsc2UsIE5VTEwpOworICBpZiAoIXRoaXMtPndpbjMyX29ial9p
ZCkKKyAgICBtYWdpYyA9IDA7CisgIGNvbmR3YWl0cyA9IDA7Cit9OworCitw
dGhyZWFkX211dGV4Ojp+cHRocmVhZF9tdXRleCAoKQoreworICBpZiAod2lu
MzJfb2JqX2lkKQorICAgIENsb3NlSGFuZGxlICh3aW4zMl9vYmpfaWQpOwog
fQogCiBpbnQKLU11dGV4SXRlbTo6TG9jayAoKQorcHRocmVhZF9tdXRleDo6
TG9jayAoKQogewogICByZXR1cm4gV2FpdEZvclNpbmdsZU9iamVjdCAod2lu
MzJfb2JqX2lkLCBJTkZJTklURSk7CiB9CiAKIGludAotTXV0ZXhJdGVtOjpU
cnlMb2NrICgpCitwdGhyZWFkX211dGV4OjpUcnlMb2NrICgpCiB7CiAgIHJl
dHVybiBXYWl0Rm9yU2luZ2xlT2JqZWN0ICh3aW4zMl9vYmpfaWQsIDApOwog
fQogCiBpbnQKLU11dGV4SXRlbTo6VW5Mb2NrICgpCitwdGhyZWFkX211dGV4
OjpVbkxvY2sgKCkKIHsKICAgcmV0dXJuIFJlbGVhc2VNdXRleCAod2luMzJf
b2JqX2lkKTsKIH0KIAotU2VtYXBob3JlSXRlbSAqCi1NVGludGVyZmFjZTo6
Q3JlYXRlU2VtYXBob3JlIChzZW1fdCAqIF9zLCBpbnQgcHNoYXJlZCwgaW50
IF92KQorc2VtYXBob3JlOjpzZW1hcGhvcmUgKGludCBwc2hhcmVkLCB1bnNp
Z25lZCBpbnQgdmFsdWUpOnZlcmlmeWFibGVfb2JqZWN0IChTRU1fTUFHSUMp
CiB7Ci0gIEFzc2VydFJlc291cmNlT3duZXIgKExPQ0tfU0VNX0xJU1QsIFdS
SVRFX0xPQ0sgfCBSRUFEX0xPQ0spOwotCi0gIGludCBpID0gRmluZE5leHRV
bnVzZWQgKCZzZW1hbGlzdCk7Ci0KLSAgU2VtYXBob3JlSXRlbSAqaXRlbSA9
IChTZW1hcGhvcmVJdGVtICopIEdldEl0ZW0gKGksICZzZW1hbGlzdCk7Ci0g
IGlmICghaXRlbSkKLSAgICBpdGVtID0gKFNlbWFwaG9yZUl0ZW0gKikgU2V0
SXRlbSAoaSwgbmV3IFNlbWFwaG9yZUl0ZW0gKCksICZzZW1hbGlzdCk7Ci0g
IGlmICghaXRlbSkKLSAgICBzeXN0ZW1fcHJpbnRmICgic2VtYXBob3JlIGNy
ZWF0aW9uIGZhaWxlZCIpOwotICBpdGVtLT51c2VkID0gdHJ1ZTsKLSAgaXRl
bS0+c2hhcmVkID0gcHNoYXJlZDsKLQotICBpdGVtLT53aW4zMl9vYmpfaWQg
PSA6OkNyZWF0ZVNlbWFwaG9yZSAoJnNlY19ub25lX25paCwgX3YsIExPTkdf
TUFYLCBOVUxMKTsKLQotICBDSEVDS0hBTkRMRSAoTlVMTCwgMSk7Ci0KLSAg
Kl9zID0gKHNlbV90KSBpdGVtLT53aW4zMl9vYmpfaWQ7Ci0KLSAgcmV0dXJu
IGl0ZW07CisgIHRoaXMtPndpbjMyX29ial9pZCA9OjpDcmVhdGVTZW1hcGhv
cmUgKCZzZWNfbm9uZV9uaWgsIHZhbHVlLCBMT05HX01BWCwKKwkJCQkJIE5V
TEwpOworICBpZiAoIXRoaXMtPndpbjMyX29ial9pZCkKKyAgICBtYWdpYyA9
IDA7CisgIHRoaXMtPnNoYXJlZCA9IHBzaGFyZWQ7CiB9CiAKLWludAotU2Vt
YXBob3JlSXRlbTo6V2FpdCAoKQorc2VtYXBob3JlOjp+c2VtYXBob3JlICgp
CiB7Ci0gIHJldHVybiBXYWl0Rm9yU2luZ2xlT2JqZWN0ICh3aW4zMl9vYmpf
aWQsIElORklOSVRFKTsKKyAgaWYgKHdpbjMyX29ial9pZCkKKyAgICBDbG9z
ZUhhbmRsZSAod2luMzJfb2JqX2lkKTsKIH0KIAotaW50Ci1TZW1hcGhvcmVJ
dGVtOjpQb3N0ICgpCit2b2lkCitzZW1hcGhvcmU6OlBvc3QgKCkKIHsKICAg
bG9uZyBwYzsKLSAgcmV0dXJuIFJlbGVhc2VTZW1hcGhvcmUgKHdpbjMyX29i
al9pZCwgMSwgJnBjKTsKKyAgUmVsZWFzZVNlbWFwaG9yZSAod2luMzJfb2Jq
X2lkLCAxLCAmcGMpOwogfQogCiBpbnQKLVNlbWFwaG9yZUl0ZW06OlRyeVdh
aXQgKCkKK3NlbWFwaG9yZTo6VHJ5V2FpdCAoKQogewotICByZXR1cm4gV2Fp
dEZvclNpbmdsZU9iamVjdCAod2luMzJfb2JqX2lkLCAwKTsKKyAgLyogRklY
TUU6IHNpZ25hbHMgc2hvdWxkIGJlIGFibGUgdG8gaW50ZXJydXB0IHNlbWFw
aG9yZXMuLi4KKyAgICogV2UgcHJvYmFibHkgbmVlZCBXYWl0Rm9yTXVsdGlw
bGVPYmplY3RzIGhlcmUuCisgICAqLworICBpZiAoV2FpdEZvclNpbmdsZU9i
amVjdCAod2luMzJfb2JqX2lkLCAwKSA9PSBXQUlUX1RJTUVPVVQpCisgICAg
cmV0dXJuIEVBR0FJTjsKKyAgZWxzZQorICAgIHJldHVybiAwOwogfQogCi0v
KiBDb25kaXRpb24gSXRlbXMgKi8KLUNvbmRJdGVtICoKLU1UaW50ZXJmYWNl
OjpDcmVhdGVDb25kIChwdGhyZWFkX2NvbmRfdCAqIGNvbmQsIGNvbnN0IHB0
aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIpCit2b2lkCitzZW1hcGhvcmU6Oldh
aXQgKCkKIHsKLSAgQXNzZXJ0UmVzb3VyY2VPd25lciAoTE9DS19DT05EX0xJ
U1QsIFdSSVRFX0xPQ0sgfCBSRUFEX0xPQ0spOwotCi0gIGludCBpID0gRmlu
ZE5leHRVbnVzZWQgKCZjb25kbGlzdCk7Ci0KLSAgQ29uZEl0ZW0gKml0ZW0g
PSAoQ29uZEl0ZW0gKikgR2V0SXRlbSAoaSwgJmNvbmRsaXN0KTsKLSAgaWYg
KCFpdGVtKQotICAgIGl0ZW0gPSAoQ29uZEl0ZW0gKikgU2V0SXRlbSAoaSwg
bmV3IENvbmRJdGVtICgpLCAmY29uZGxpc3QpOwotICBpZiAoIWl0ZW0pCi0g
ICAgc3lzdGVtX3ByaW50ZiAoImNvbmQgY3JlYXRpb24gZmFpbGVkIik7Ci0g
IGl0ZW0tPnVzZWQgPSB0cnVlOwotICBpdGVtLT5zaGFyZWQgPSBhdHRyID8g
YXR0ci0+c2hhcmVkOiBQVEhSRUFEX1BST0NFU1NfUFJJVkFURTsKLSAgaXRl
bS0+bXV0ZXhpdGVtPU5VTEw7Ci0gIGl0ZW0tPndhaXRpbmc9MDsKLQotICBp
dGVtLT53aW4zMl9vYmpfaWQgPSA6OkNyZWF0ZUV2ZW50ICgmc2VjX25vbmVf
bmloLAotCWZhbHNlLCAvKiBhdXRvIHNpZ25hbCByZXNldCAtIHdoaWNoIEkg
dGhpbmsgaXMgcHRocmVhZHMgbGlrZSA/ICovCi0JZmFsc2UsIC8qIHN0YXJ0
IG5vbiBzaWduYWxlZCAqLwotCU5VTEwgLyogbm8gbmFtZSAqLyk7Ci0KLSAg
Q0hFQ0tIQU5ETEUgKE5VTEwsIDEpOwotCi0gICpjb25kID0gKHB0aHJlYWRf
Y29uZF90KSBpdGVtLT53aW4zMl9vYmpfaWQ7Ci0KLSAgcmV0dXJuIGl0ZW07
CisgIFdhaXRGb3JTaW5nbGVPYmplY3QgKHdpbjMyX29ial9pZCwgSU5GSU5J
VEUpOwogfQotCiAKLWludAotQ29uZEl0ZW06OlNpZ25hbCAoKQordmVyaWZ5
YWJsZV9vYmplY3Q6OnZlcmlmeWFibGVfb2JqZWN0IChsb25nIHZlcmlmeWVy
KToKK21hZ2ljICh2ZXJpZnllcikKIHsKLSAgcmV0dXJuICFQdWxzZUV2ZW50
ICh3aW4zMl9vYmpfaWQpOwogfQogCi1pbnQKLUNvbmRJdGVtOjpXYWl0ICgp
Cit2ZXJpZnlhYmxlX29iamVjdDo6fnZlcmlmeWFibGVfb2JqZWN0ICgpCiB7
Ci0gIERXT1JEIHJ2ID0gU2lnbmFsT2JqZWN0QW5kV2FpdCAobXV0ZXhpdGVt
LT53aW4zMl9vYmpfaWQsIHdpbjMyX29ial9pZCwgSU5GSU5JVEUsIGZhbHNl
KTsKLSAgc3dpdGNoIChydikgewotICAgIGNhc2UgV0FJVF9GQUlMRUQ6IHJl
dHVybiAwOyAvKiBQT1NJWCBkb2Vzbid0IGFsbG93IGVycm9ycyBhZnRlciB3
ZSBtb2RpZnkgdGhlIG11dGV4IHN0YXRlICovCi0gICAgY2FzZSBXQUlUX09C
SkVDVF8wOiByZXR1cm4gMDsgLyogd2UgaGF2ZSBiZWVuIHNpZ25hbGVkICov
Ci0gICAgZGVmYXVsdDogcmV0dXJuIDA7Ci0gIH0KKyAgbWFnaWMgPSAwOwog
fQogCi1pbnQKLUNvbmRJdGVtOjpUaW1lZFdhaXQgKERXT1JEIGR3TWlsbGlz
ZWNvbmRzKQorLyogR2VuZXJpYyBtZW1vcnkgYWNjY2VzcyByb3V0aW5lIC0g
d2hlcmUgc2hvdWxkIGl0IGxpdmUgPyAqLworaW50IF9fc3RkY2FsbAorY2hl
Y2tfdmFsaWRfcG9pbnRlciAodm9pZCAqcG9pbnRlcikKIHsKLSAgRFdPUkQg
cnYgPSBTaWduYWxPYmplY3RBbmRXYWl0IChtdXRleGl0ZW0tPndpbjMyX29i
al9pZCwgd2luMzJfb2JqX2lkLCBkd01pbGxpc2Vjb25kcywgZmFsc2UpOwot
ICBzd2l0Y2ggKHJ2KSB7Ci0gICAgY2FzZSBXQUlUX0ZBSUxFRDogcmV0dXJu
IDA7IC8qIFBPU0lYIGRvZXNuJ3QgYWxsb3cgZXJyb3JzIGFmdGVyIHdlIG1v
ZGlmeSB0aGUgbXV0ZXggc3RhdGUgKi8KLSAgICBjYXNlIFdBSVRfQUJBTkRP
TkVEOiByZXR1cm4gRVRJTUVET1VUOwotICAgIGNhc2UgV0FJVF9PQkpFQ1Rf
MDogcmV0dXJuIDA7IC8qIHdlIGhhdmUgYmVlbiBzaWduYWxlZCAqLwotICAg
IGRlZmF1bHQ6IHJldHVybiAwOwotICB9CisgIE1FTU9SWV9CQVNJQ19JTkZP
Uk1BVElPTiBtOworICBpZiAoIXBvaW50ZXIgfHwgIVZpcnR1YWxRdWVyeSAo
cG9pbnRlciwgJm0sIHNpemVvZiAobSkpCisgICAgICB8fCAobS5TdGF0ZSAh
PSBNRU1fQ09NTUlUKSkKKyAgICByZXR1cm4gRUZBVUxUOworICByZXR1cm4g
MDsKIH0KIAogaW50Ci1Db25kSXRlbTo6QnJvYWRDYXN0ICgpCit2ZXJpZnlh
YmxlX29iamVjdF9pc3ZhbGlkICh2ZXJpZnlhYmxlX29iamVjdCAqIG9iamVj
dCwgbG9uZyBtYWdpYykKIHsKLSAgaWYgKCFtdXRleGl0ZW0pCisgIGlmICgh
b2JqZWN0KQogICAgIHJldHVybiAwOwotICBQdWxzZUV2ZW50ICh3aW4zMl9v
YmpfaWQpOwotICB3aGlsZSAoSW50ZXJsb2NrZWREZWNyZW1lbnQgKCZ3YWl0
aW5nKSE9MCkKLSAgICBQdWxzZUV2ZW50ICh3aW4zMl9vYmpfaWQpOwotICBt
dXRleGl0ZW09TlVMTDsKLSAgcmV0dXJuIDA7CisgIGlmIChjaGVja192YWxp
ZF9wb2ludGVyIChvYmplY3QpKQorICAgIHJldHVybiAwOworICBpZiAob2Jq
ZWN0LT5tYWdpYyAhPSBtYWdpYykKKyAgICByZXR1cm4gMDsKKyAgcmV0dXJu
IC0xOwogfQogCiAvKiAgUHRocmVhZHMgKi8KLQogdm9pZCAqCiB0aHJlYWRf
aW5pdF93cmFwcGVyICh2b2lkICpfYXJnKQogewogICAvLyBTZXR1cCB0aGUg
bG9jYWwvZ2xvYmFsIHN0b3JhZ2Ugb2YgdGhpcyB0aHJlYWQKIAotICBUaHJl
YWRJdGVtICp0aHJlYWQgPSAoVGhyZWFkSXRlbSAqKSBfYXJnOworICBwdGhy
ZWFkICp0aHJlYWQgPSAocHRocmVhZCAqKSBfYXJnOwogICBzdHJ1Y3QgX19y
ZWVudF90IGxvY2FsX3JlZW50OwogICBzdHJ1Y3QgX3dpbnN1cF90IGxvY2Fs
X3dpbnN1cDsKICAgc3RydWN0IF9yZWVudCBsb2NhbF9jbGliOwpAQCAtNTcz
LDEwNiArNDkyLDE0NCBAQCB0aHJlYWRfaW5pdF93cmFwcGVyICh2b2lkICpf
YXJnKQogCiAgIGxvY2FsX3dpbnN1cC5fcHJvY2Vzc19sb2dtYXNrID0gTE9H
X1VQVE8gKExPR19ERUJVRyk7CiAKKyAgLyogVGhpcyBpcyBub3QgY2hlY2tl
ZCBieSB0aGUgT1MgISEgKi8KICAgaWYgKCFUbHNTZXRWYWx1ZSAoTVRfSU5U
RVJGQUNFLT5yZWVudF9pbmRleCwgJmxvY2FsX3JlZW50KSkKICAgICBzeXN0
ZW1fcHJpbnRmICgibG9jYWwgc3RvcmFnZSBmb3IgdGhyZWFkIGNvdWxkbid0
IGJlIHNldCIpOwogCisgIC8qIHRoZSBPUyBkb2Vzbid0IGNoZWNrIHRoaXMg
Zm9yIDw9NjQgVGxzIGVudHJpZXMgKHByZSB3aW4yaykgKi8KKyAgVGxzU2V0
VmFsdWUgKE1UX0lOVEVSRkFDRS0+dGhyZWFkX3NlbGZfZHdUbHNJbmRleCwg
dGhyZWFkKTsKKwogI2lmZGVmIF9DWUdfVEhSRUFEX0ZBSUxTQUZFCiAgIGlm
IChfUkVFTlQgPT0gX2ltcHVyZV9wdHIpCiAgICAgc3lzdGVtX3ByaW50ZiAo
ImxvY2FsIHN0b3JhZ2UgZm9yIHRocmVhZCBpc24ndCBzZXR1cCBjb3JyZWN0
bHkiKTsKICNlbmRpZgogCi0gIHRocmVhZF9wcmludGYgKCJzdGFydGVkIHRo
cmVhZCAlcCAlcCAlcCAlcCAlcCAlcCIsIF9hcmcsICZsb2NhbF9jbGliLCBf
aW1wdXJlX3B0ciwgdGhyZWFkLCB0aHJlYWQtPmZ1bmN0aW9uLCB0aHJlYWQt
PmFyZyk7CisgIHRocmVhZF9wcmludGYgKCJzdGFydGVkIHRocmVhZCAlcCAl
cCAlcCAlcCAlcCAlcCIsIF9hcmcsICZsb2NhbF9jbGliLAorCQkgX2ltcHVy
ZV9wdHIsIHRocmVhZCwgdGhyZWFkLT5mdW5jdGlvbiwgdGhyZWFkLT5hcmcp
OwogCiAgIC8vIGNhbGwgdGhlIHVzZXIncyB0aHJlYWQKICAgdm9pZCAqcmV0
ID0gdGhyZWFkLT5mdW5jdGlvbiAodGhyZWFkLT5hcmcpOwogCi0gIC8vIEZJ
WE1FIDogY2xlYW51cCBjb2RlCisgIF9fcHRocmVhZF9leGl0IChyZXQpOwog
Ci0gIC8vICB0aHJlYWQtPnVzZWQgPSBmYWxzZTsJLy8gcmVsZWFzZSB0aHJl
YWQgZW50cnkKLSAgICB0aHJlYWQtPnJldHVybl9wdHIgPSByZXQ7Ci0gIEV4
aXRUaHJlYWQgKDApOworI2lmIDAKKy8vID8/PyBUaGlzIGNvZGUgb25seSBy
dW5zIGlmIHRoZSB0aHJlYWQgZXhpdHMgYnkgcmV0dXJuaW5nLgorLy8gaXQn
cyBhbGwgbm93IGluIF9fcHRocmVhZF9leGl0KCk7CisjZW5kaWYKKyAgLyog
bmV2ZXIgcmVhY2hlZCAqLworICByZXR1cm4gMDsKIH0KIAogaW50Ci1fX3B0
aHJlYWRfY3JlYXRlIChwdGhyZWFkX3QgKiB0aHJlYWQsIGNvbnN0IHB0aHJl
YWRfYXR0cl90ICogYXR0ciwgVEZEIChzdGFydF9yb3V0aW5lKSwgdm9pZCAq
YXJnKQorX19wdGhyZWFkX2NyZWF0ZSAocHRocmVhZF90ICogdGhyZWFkLCBj
b25zdCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsCisJCSAgdm9pZCAqKCpzdGFy
dF9yb3V0aW5lKSAodm9pZCAqKSwgdm9pZCAqYXJnKQogewotICBTZXRSZXNv
dXJjZUxvY2sgKExPQ0tfVEhSRUFEX0xJU1QsIFdSSVRFX0xPQ0sgfCBSRUFE
X0xPQ0ssICJfX3B0aHJlYWRfY3JlYXRlIik7Ci0KLSAgcHRocmVhZF9hdHRy
X3QgYTsKLSAgVGhyZWFkSXRlbSAqaXRlbTsKKyAgaWYgKGF0dHIgJiYgIXZl
cmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCphdHRyLCBQVEhSRUFEX0FUVFJf
TUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CiAKLSAgaWYgKGF0dHIpCi0g
ICAgaXRlbSA9IE1UX0lOVEVSRkFDRS0+Q3JlYXRlVGhyZWFkICh0aHJlYWQs
IHN0YXJ0X3JvdXRpbmUsIGFyZywgKmF0dHIpOwotICBlbHNlCisgICp0aHJl
YWQgPSBuZXcgcHRocmVhZCAoKTsKKyAgKCp0aHJlYWQpLT5jcmVhdGUgKHN0
YXJ0X3JvdXRpbmUsIGF0dHIgPyAqYXR0ciA6IE5VTEwsIGFyZyk7CisgIGlm
ICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKnRocmVhZCwgUFRIUkVB
RF9NQUdJQykpCiAgICAgewotICAgICAgX19wdGhyZWFkX2F0dHJfaW5pdCAo
JmEpOwotICAgICAgaXRlbSA9IE1UX0lOVEVSRkFDRS0+Q3JlYXRlVGhyZWFk
ICh0aHJlYWQsIHN0YXJ0X3JvdXRpbmUsIGFyZywgYSk7CisgICAgICBkZWxl
dGUgKCp0aHJlYWQpOworICAgICAgKnRocmVhZCA9IE5VTEw7CisgICAgICBy
ZXR1cm4gRUFHQUlOOwogICAgIH0KIAotICBDSEVDS0lURU0gKExPQ0tfVEhS
RUFEX0xJU1QsIFdSSVRFX0xPQ0sgfCBSRUFEX0xPQ0ssICJfX3B0aHJlYWRf
Y3JlYXRlIikKLQotICBSZWxlYXNlUmVzb3VyY2VMb2NrIChMT0NLX1RIUkVB
RF9MSVNULCBXUklURV9MT0NLIHwgUkVBRF9MT0NLLCAiX19wdGhyZWFkX2Ny
ZWF0ZSIpOwogICByZXR1cm4gMDsKIH0KIAogaW50CiBfX3B0aHJlYWRfYXR0
cl9pbml0IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIpCiB7Ci0gIGF0dHItPnN0
YWNrc2l6ZSA9IDA7CisgICphdHRyID0gbmV3IHB0aHJlYWRfYXR0cjsKKyAg
aWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVB
RF9BVFRSX01BR0lDKSkKKyAgICB7CisgICAgICBkZWxldGUgKCphdHRyKTsK
KyAgICAgICphdHRyID0gTlVMTDsKKyAgICAgIHJldHVybiBFQUdBSU47Cisg
ICAgfQogICByZXR1cm4gMDsKIH0KIAogaW50CitfX3B0aHJlYWRfYXR0cl9z
ZXRkZXRhY2hzdGF0ZSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCBpbnQgZGV0
YWNoc3RhdGUpCit7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxp
ZCAoKmF0dHIsIFBUSFJFQURfQVRUUl9NQUdJQykpCisgICAgcmV0dXJuIEVJ
TlZBTDsKKyAgaWYgKGRldGFjaHN0YXRlIDwgMCB8fCBkZXRhY2hzdGF0ZSA+
IDEpCisgICAgcmV0dXJuIEVJTlZBTDsKKyAgKCphdHRyKS0+am9pbmFibGUg
PSBkZXRhY2hzdGF0ZTsKKyAgcmV0dXJuIDA7Cit9CisKK2ludAorX19wdGhy
ZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUgKGNvbnN0IHB0aHJlYWRfYXR0cl90
ICogYXR0ciwgaW50ICpkZXRhY2hzdGF0ZSkKK3sKKyAgaWYgKCF2ZXJpZnlh
YmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9BVFRSX01BR0lD
KSkKKyAgICByZXR1cm4gRUlOVkFMOworICAqZGV0YWNoc3RhdGUgPSAoKmF0
dHIpLT5qb2luYWJsZTsKKyAgcmV0dXJuIDA7Cit9CisKK2ludAogX19wdGhy
ZWFkX2F0dHJfc2V0c3RhY2tzaXplIChwdGhyZWFkX2F0dHJfdCAqIGF0dHIs
IHNpemVfdCBzaXplKQogewotICBhdHRyLT5zdGFja3NpemUgPSBzaXplOwor
ICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCphdHRyLCBQVEhS
RUFEX0FUVFJfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CisgICgqYXR0
ciktPnN0YWNrc2l6ZSA9IHNpemU7CiAgIHJldHVybiAwOwogfQogCiBpbnQK
IF9fcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZSAocHRocmVhZF9hdHRyX3Qg
KiBhdHRyLCBzaXplX3QgKiBzaXplKQogewotICAqc2l6ZSA9IGF0dHItPnN0
YWNrc2l6ZTsKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgq
YXR0ciwgUFRIUkVBRF9BVFRSX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFM
OworICAqc2l6ZSA9ICgqYXR0ciktPnN0YWNrc2l6ZTsKICAgcmV0dXJuIDA7
CiB9CiAKIGludAotX19wdGhyZWFkX2F0dHJfZGVzdHJveSAocHRocmVhZF9h
dHRyX3QgKiAvKmF0dHIqLykKK19fcHRocmVhZF9hdHRyX2Rlc3Ryb3kgKHB0
aHJlYWRfYXR0cl90ICogYXR0cikKIHsKKyAgaWYgKCF2ZXJpZnlhYmxlX29i
amVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9BVFRSX01BR0lDKSkKKyAg
ICByZXR1cm4gRUlOVkFMOworICBkZWxldGUgKCphdHRyKTsKKyAgKmF0dHIg
PSBOVUxMOwogICByZXR1cm4gMDsKIH0KIAotaW50Cit2b2lkCiBfX3B0aHJl
YWRfZXhpdCAodm9pZCAqdmFsdWVfcHRyKQogewotICBUaHJlYWRJdGVtICpp
dGVtID0gTVRfSU5URVJGQUNFLT5HZXRDYWxsaW5nVGhyZWFkICgpOwotICBp
dGVtLT5yZXR1cm5fcHRyID0gdmFsdWVfcHRyOworICBjbGFzcyBwdGhyZWFk
ICp0aHJlYWQgPSBfX3B0aHJlYWRfc2VsZiAoKTsKKworLy8gRklYTUU6IHJ1
biB0aGUgZGVzdHJ1Y3RvcnMgb2YgdGhyZWFkX2tleSBpdGVtcyBoZXJlCisK
KyAgdGhyZWFkLT5yZXR1cm5fcHRyID0gdmFsdWVfcHRyOwogICBFeGl0VGhy
ZWFkICgwKTsKLSAgcmV0dXJuIDA7CiB9CiAKIGludAogX19wdGhyZWFkX2pv
aW4gKHB0aHJlYWRfdCAqIHRocmVhZCwgdm9pZCAqKnJldHVybl92YWwpCiB7
Ci0gIFRocmVhZEl0ZW0gKml0ZW09dXNlcl9kYXRhLT50aHJlYWRpbnRlcmZh
Y2UtPkdldFRocmVhZCAodGhyZWFkKTsKKyAgaWYgKCF2ZXJpZnlhYmxlX29i
amVjdF9pc3ZhbGlkICgqdGhyZWFkLCBQVEhSRUFEX01BR0lDKSkKKyAgICBy
ZXR1cm4gRVNSQ0g7CiAKLQotICBpZiAoIWl0ZW0pCi0gICAgIHJldHVybiBF
U1JDSDsKLQotICBpZiAoaXRlbS0+am9pbmFibGUgPT0gJ04nKQotICB7Ci0g
ICAgIGlmIChyZXR1cm5fdmFsKQorICBpZiAoKCp0aHJlYWQpLT5qb2luYWJs
ZSA9PSBQVEhSRUFEX0NSRUFURV9ERVRBQ0hFRCkKKyAgICB7CisgICAgICBp
ZiAocmV0dXJuX3ZhbCkKIAkqcmV0dXJuX3ZhbCA9IE5VTEw7Ci0gICAgIHJl
dHVybiBFSU5WQUw7Ci0gIH0KKyAgICAgIHJldHVybiBFSU5WQUw7CisgICAg
fQogICBlbHNlCi0gIHsKLSAgICAgaXRlbS0+am9pbmFibGUgPSAnTic7Ci0g
ICAgIFdhaXRGb3JTaW5nbGVPYmplY3QgKChIQU5ETEUpKnRocmVhZCwgSU5G
SU5JVEUpOwotICAgICBpZiAocmV0dXJuX3ZhbCkKLQkqcmV0dXJuX3ZhbCA9
IGl0ZW0tPnJldHVybl9wdHI7Ci0gIH0vKiBFbmQgaWYqLworICAgIHsKKyAg
ICAgICgqdGhyZWFkKS0+am9pbmFibGUgPSBQVEhSRUFEX0NSRUFURV9ERVRB
Q0hFRDsKKyAgICAgIFdhaXRGb3JTaW5nbGVPYmplY3QgKCgqdGhyZWFkKS0+
d2luMzJfb2JqX2lkLCBJTkZJTklURSk7CisgICAgICBpZiAocmV0dXJuX3Zh
bCkKKwkqcmV0dXJuX3ZhbCA9ICgqdGhyZWFkKS0+cmV0dXJuX3B0cjsKKyAg
ICB9CQkJCS8qIEVuZCBpZiAqLwogCiAgIHJldHVybiAwOwogfQpAQCAtNjgw
LDMyICs2MzcsMzAgQEAgX19wdGhyZWFkX2pvaW4gKHB0aHJlYWRfdCAqIHRo
cmVhZCwgdm9pZAogaW50CiBfX3B0aHJlYWRfZGV0YWNoIChwdGhyZWFkX3Qg
KiB0aHJlYWQpCiB7Ci0gIFRocmVhZEl0ZW0gKml0ZW09dXNlcl9kYXRhLT50
aHJlYWRpbnRlcmZhY2UtPkdldFRocmVhZCAodGhyZWFkKTsKLSAgaWYgKCFp
dGVtKQotICAgICByZXR1cm4gRVNSQ0g7CisgIGlmICghdmVyaWZ5YWJsZV9v
YmplY3RfaXN2YWxpZCAoKnRocmVhZCwgUFRIUkVBRF9NQUdJQykpCisgICAg
cmV0dXJuIEVTUkNIOwogCi0gIGlmIChpdGVtLT5qb2luYWJsZSA9PSAnTicp
Ci0gIHsKLSAgICAgaXRlbS0+cmV0dXJuX3B0ciA9IE5VTEw7Ci0gICAgIHJl
dHVybiBFSU5WQUw7Ci0gIH0KKyAgaWYgKCgqdGhyZWFkKS0+am9pbmFibGUg
PT0gUFRIUkVBRF9DUkVBVEVfREVUQUNIRUQpCisgICAgeworICAgICAgKCp0
aHJlYWQpLT5yZXR1cm5fcHRyID0gTlVMTDsKKyAgICAgIHJldHVybiBFSU5W
QUw7CisgICAgfQogCi0gIGl0ZW0tPmpvaW5hYmxlID0gJ04nOworICAoKnRo
cmVhZCktPmpvaW5hYmxlID0gUFRIUkVBRF9DUkVBVEVfREVUQUNIRUQ7CiAg
IHJldHVybiAwOwogfQogCiBpbnQKIF9fcHRocmVhZF9zdXNwZW5kIChwdGhy
ZWFkX3QgKiB0aHJlYWQpCiB7Ci0gIFRocmVhZEl0ZW0gKml0ZW09dXNlcl9k
YXRhLT50aHJlYWRpbnRlcmZhY2UtPkdldFRocmVhZCAodGhyZWFkKTsKLSAg
aWYgKCFpdGVtKQotICAgICByZXR1cm4gRVNSQ0g7CisgIGlmICghdmVyaWZ5
YWJsZV9vYmplY3RfaXN2YWxpZCAoKnRocmVhZCwgUFRIUkVBRF9NQUdJQykp
CisgICAgcmV0dXJuIEVTUkNIOwogCi0gIGlmIChpdGVtLT5zdXNwZW5kZWQg
PT0gZmFsc2UpCi0gIHsKLSAgICAgaXRlbS0+c3VzcGVuZGVkID0gdHJ1ZTsK
LSAgICAgU3VzcGVuZFRocmVhZCAoKEhBTkRMRSkqdGhyZWFkKTsKLSAgfQor
ICBpZiAoKCp0aHJlYWQpLT5zdXNwZW5kZWQgPT0gZmFsc2UpCisgICAgewor
ICAgICAgKCp0aHJlYWQpLT5zdXNwZW5kZWQgPSB0cnVlOworICAgICAgU3Vz
cGVuZFRocmVhZCAoKCp0aHJlYWQpLT53aW4zMl9vYmpfaWQpOworICAgIH0K
IAogICByZXR1cm4gMDsKIH0KQEAgLTcxNCwxNTMgKzY2OSwxODUgQEAgX19w
dGhyZWFkX3N1c3BlbmQgKHB0aHJlYWRfdCAqIHRocmVhZCkKIGludAogX19w
dGhyZWFkX2NvbnRpbnVlIChwdGhyZWFkX3QgKiB0aHJlYWQpCiB7Ci0gIFRo
cmVhZEl0ZW0gKml0ZW09dXNlcl9kYXRhLT50aHJlYWRpbnRlcmZhY2UtPkdl
dFRocmVhZCAodGhyZWFkKTsKLSAgaWYgKCFpdGVtKQotICAgICByZXR1cm4g
RVNSQ0g7Ci0KLSAgaWYgKGl0ZW0tPnN1c3BlbmRlZCA9PSB0cnVlKQotCVJl
c3VtZVRocmVhZCAoKEhBTkRMRSkqdGhyZWFkKTsKLSAgaXRlbS0+c3VzcGVu
ZGVkID0gZmFsc2U7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxp
ZCAoKnRocmVhZCwgUFRIUkVBRF9NQUdJQykpCisgICAgcmV0dXJuIEVTUkNI
OwogCisgIGlmICgoKnRocmVhZCktPnN1c3BlbmRlZCA9PSB0cnVlKQorICAg
IFJlc3VtZVRocmVhZCAoKCp0aHJlYWQpLT53aW4zMl9vYmpfaWQpOworICAo
KnRocmVhZCktPnN1c3BlbmRlZCA9IGZhbHNlOworCiAgIHJldHVybiAwOwog
fQogCiB1bnNpZ25lZCBsb25nCiBfX3B0aHJlYWRfZ2V0c2VxdWVuY2VfbnAg
KHB0aHJlYWRfdCAqIHRocmVhZCkKIHsKLSAgR0VUVEhSRUFEICgiX19wdGhy
ZWFkX2dldHNlcXVlbmNlX25wIik7Ci0gIHJldHVybiBpdGVtLT5HZXRUaHJl
YWRJZCAoKTsKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgq
dGhyZWFkLCBQVEhSRUFEX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOwor
ICByZXR1cm4gKCp0aHJlYWQpLT5HZXRUaHJlYWRJZCAoKTsKIH0KIAogLyog
VGhyZWFkIFNwZWNpZmljRGF0YSAqLwogaW50Ci1fX3B0aHJlYWRfa2V5X2Ny
ZWF0ZSAocHRocmVhZF9rZXlfdCAqLyprZXkqLykKK19fcHRocmVhZF9rZXlf
Y3JlYXRlIChwdGhyZWFkX2tleV90ICoga2V5LCB2b2lkICgqZGVzdHJ1Y3Rv
cikgKHZvaWQgKikpCiB7Ci0gIE5PVF9JTVAgKCJfcF9rZXlfY3JlYXRlXG4i
KTsKKyAgLyogVGhlIG9wZW5ncm91cCBkb2NzIGRvbid0IGRlZmluZSBpZiB3
ZSBzaG91bGQgY2hlY2sgdGhpcyBvciBub3QsCisgICAqIGJ1dCBjcmVhdGlv
biBpcyByZWxhdGl2ZWx5IHJhcmUuLiAKKyAgICovCisgIGlmICh2ZXJpZnlh
YmxlX29iamVjdF9pc3ZhbGlkICgqa2V5LCBQVEhSRUFEX0tFWV9NQUdJQykp
CisgICAgcmV0dXJuIEVCVVNZOworCisgICprZXkgPSBuZXcgcHRocmVhZF9r
ZXkgKCk7CisKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgq
a2V5LCBQVEhSRUFEX0tFWV9NQUdJQykpCisgICAgeworICAgICAgZGVsZXRl
ICgqa2V5KTsKKyAgICAgICprZXkgPSBOVUxMOworICAgICAgcmV0dXJuIEVB
R0FJTjsKKyAgICB9CisgIHJldHVybiAwOwogfQogCiBpbnQKLV9fcHRocmVh
ZF9rZXlfZGVsZXRlIChwdGhyZWFkX2tleV90ICovKmtleSovKQorX19wdGhy
ZWFkX2tleV9kZWxldGUgKHB0aHJlYWRfa2V5X3QgKiBrZXkpCiB7Ci0gIE5P
VF9JTVAgKCJfcF9rZXlfZGVsZXRlXG4iKTsKKyAgaWYgKCF2ZXJpZnlhYmxl
X29iamVjdF9pc3ZhbGlkICgqa2V5LCBQVEhSRUFEX0tFWV9NQUdJQykpCisg
ICAgcmV0dXJuIEVJTlZBTDsKKworICBkZWxldGUgKCprZXkpOworICByZXR1
cm4gMDsKIH0KKworCiBpbnQKLV9fcHRocmVhZF9zZXRzcGVjaWZpYyAocHRo
cmVhZF9rZXlfdCAqLyprZXkqLywgY29uc3Qgdm9pZCAqLyp2YWx1ZSovKQor
X19wdGhyZWFkX3NldHNwZWNpZmljIChwdGhyZWFkX2tleV90IGtleSwgY29u
c3Qgdm9pZCAqdmFsdWUpCiB7Ci0gIE5PVF9JTVAgKCJfcF9rZXlfc2V0c3Bc
biIpOworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKGtleSwg
UFRIUkVBRF9LRVlfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CisgIChr
ZXkpLT5zZXQgKHZhbHVlKTsKKyAgcmV0dXJuIDA7CiB9CisKIHZvaWQgKgot
X19wdGhyZWFkX2dldHNwZWNpZmljIChwdGhyZWFkX2tleV90ICovKmtleSov
KQorX19wdGhyZWFkX2dldHNwZWNpZmljIChwdGhyZWFkX2tleV90IGtleSkK
IHsKLSAgTk9UX0lNUCAoIl9wX2tleV9nZXRzcFxuIik7CisgIGlmICghdmVy
aWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoa2V5LCBQVEhSRUFEX0tFWV9NQUdJ
QykpCisgICAgcmV0dXJuIE5VTEw7CisKKyAgcmV0dXJuIChrZXkpLT5nZXQg
KCk7CisKIH0KIAogLyogVGhyZWFkIHN5bmNocm9uaXNhdGlvbiAqLwogCiBp
bnQKLV9fcHRocmVhZF9jb25kX2Rlc3Ryb3kgKHB0aHJlYWRfY29uZF90ICpj
b25kKQorX19wdGhyZWFkX2NvbmRfZGVzdHJveSAocHRocmVhZF9jb25kX3Qg
KiBjb25kKQogewotICBTZXRSZXNvdXJjZUxvY2sgKExPQ0tfQ09ORF9MSVNU
LCBSRUFEX0xPQ0sgfCBXUklURV9MT0NLLCAiX19wdGhyZWFkX2NvbmRfZGVz
dHJveSIpOwotCi0gIENvbmRJdGVtICppdGVtID0gTVRfSU5URVJGQUNFLT5H
ZXRDb25kIChjb25kKTsKLQotICBDSEVDS0lURU0gKExPQ0tfQ09ORF9MSVNU
LCBXUklURV9MT0NLIHwgUkVBRF9MT0NLLCAiX19wdGhyZWFkX2NvbmRfaW5p
dCIpOworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCpjb25k
LCBQVEhSRUFEX0NPTkRfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CiAK
LSAgaXRlbS0+RGVzdHJveSAoKTsKKyAgLyogcmVhZHMgYXJlIGF0b21pYyAq
LworICBpZiAoKCpjb25kKS0+d2FpdGluZykKKyAgICByZXR1cm4gRUJVU1k7
CiAKLSAgTVRfSU5URVJGQUNFLT5SZWxlYXNlSXRlbSAoaXRlbSk7CisgIGRl
bGV0ZSAoKmNvbmQpOworICAqY29uZCA9IE5VTEw7CiAKLSAgUmVsZWFzZVJl
c291cmNlTG9jayAoTE9DS19DT05EX0xJU1QsIFJFQURfTE9DSyB8IFdSSVRF
X0xPQ0ssICJfX3B0aHJlYWRfY29uZF9kZXN0cm95IikKLTsKICAgcmV0dXJu
IDA7CiB9CiAKIGludAotX19wdGhyZWFkX2NvbmRfaW5pdCAocHRocmVhZF9j
b25kX3QgKmNvbmQsIGNvbnN0IHB0aHJlYWRfY29uZGF0dHJfdCAqYXR0cikK
K19fcHRocmVhZF9jb25kX2luaXQgKHB0aHJlYWRfY29uZF90ICogY29uZCwg
Y29uc3QgcHRocmVhZF9jb25kYXR0cl90ICogYXR0cikKIHsKLSAgaWYgKGF0
dHIgJiYgKGF0dHItPnZhbGlkICE9IDB4ZjM0MSkpCisgIGlmIChhdHRyICYm
ICF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9D
T05EQVRUUl9NQUdJQykpCiAgICAgcmV0dXJuIEVJTlZBTDsKLSAgU2V0UmVz
b3VyY2VMb2NrIChMT0NLX0NPTkRfTElTVCwgV1JJVEVfTE9DSyB8IFJFQURf
TE9DSywgIl9fcHRocmVhZF9jb25kX2luaXQiKTsKIAotICBDb25kSXRlbSAq
aXRlbSA9IE1UX0lOVEVSRkFDRS0+Q3JlYXRlQ29uZCAoY29uZCwgYXR0cik7
CisgIGlmICh2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqY29uZCwgUFRI
UkVBRF9DT05EX01BR0lDKSkKKyAgICByZXR1cm4gRUJVU1k7CiAKLSAgQ0hF
Q0tJVEVNIChMT0NLX0NPTkRfTElTVCwgV1JJVEVfTE9DSyB8IFJFQURfTE9D
SywgIl9fcHRocmVhZF9jb25kX2luaXQiKTsKKyAgKmNvbmQgPSBuZXcgcHRo
cmVhZF9jb25kIChhdHRyID8gKCphdHRyKSA6IE5VTEwpOwogCi0gIFJlbGVh
c2VSZXNvdXJjZUxvY2sgKExPQ0tfQ09ORF9MSVNULCBXUklURV9MT0NLIHwg
UkVBRF9MT0NLLCAiX19wdGhyZWFkX2NvbmRfaW5pdCIpOwotICByZXR1cm4g
MDsKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqY29uZCwg
UFRIUkVBRF9DT05EX01BR0lDKSkKKyAgICB7CisgICAgICBkZWxldGUgKCpj
b25kKTsKKyAgICAgICpjb25kID0gTlVMTDsKKyAgICAgIHJldHVybiBFQUdB
SU47CisgICAgfQogCisgIHJldHVybiAwOwogfQogCiBpbnQKLV9fcHRocmVh
ZF9jb25kX2Jyb2FkY2FzdCAocHRocmVhZF9jb25kX3QgKmNvbmQpCitfX3B0
aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0aHJlYWRfY29uZF90ICogY29uZCkK
IHsKLSAgR0VUQ09ORCgiX3B0aHJlYWRfY29uZF9sb2NrIik7CisgIGlmICgh
dmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKmNvbmQsIFBUSFJFQURfQ09O
RF9NQUdJQykpCisgICAgcmV0dXJuIEVJTlZBTDsKIAotICBpdGVtLT5Ccm9h
ZENhc3QgKCk7CisgICgqY29uZCktPkJyb2FkQ2FzdCAoKTsKIAogICByZXR1
cm4gMDsKIH0KIAogaW50Ci1fX3B0aHJlYWRfY29uZF9zaWduYWwgKHB0aHJl
YWRfY29uZF90ICpjb25kKQorX19wdGhyZWFkX2NvbmRfc2lnbmFsIChwdGhy
ZWFkX2NvbmRfdCAqIGNvbmQpCiB7Ci0gIEdFVENPTkQoIl9wdGhyZWFkX2Nv
bmRfbG9jayIpOworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQg
KCpjb25kLCBQVEhSRUFEX0NPTkRfTUFHSUMpKQorICAgIHJldHVybiBFSU5W
QUw7CiAKLSAgaXRlbS0+U2lnbmFsICgpOworICAoKmNvbmQpLT5TaWduYWwg
KCk7CiAKICAgcmV0dXJuIDA7CiB9CiAKIGludAotX19wdGhyZWFkX2NvbmRf
dGltZWR3YWl0IChwdGhyZWFkX2NvbmRfdCAqY29uZCwgcHRocmVhZF9tdXRl
eF90ICptdXRleCwgY29uc3Qgc3RydWN0IHRpbWVzcGVjICphYnN0aW1lKQor
X19wdGhyZWFkX2NvbmRfdGltZWR3YWl0IChwdGhyZWFkX2NvbmRfdCAqIGNv
bmQsIHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4LAorCQkJICBjb25zdCBzdHJ1
Y3QgdGltZXNwZWMgKmFic3RpbWUpCiB7CiAgIGludCBydjsKICAgaWYgKCFh
YnN0aW1lKQogICAgIHJldHVybiBFSU5WQUw7Ci0gIFNldFJlc291cmNlTG9j
ayAoTE9DS19NVVRFWF9MSVNULCBSRUFEX0xPQ0ssICJfcHRoZXJhZF9tdXRl
eF9sb2NrIik7Ci0gIE11dGV4SXRlbSogbXV0ZXhpdGVtPXVzZXJfZGF0YS0+
dGhyZWFkaW50ZXJmYWNlLT5HZXRNdXRleCAobXV0ZXgpOwotICBSZWxlYXNl
UmVzb3VyY2VMb2NrIChMT0NLX01VVEVYX0xJU1QsIFJFQURfTE9DSywgIl9w
dGhlcmFkX211dGV4X2xvY2siKTsKLSAgaWYgKCFtdXRleGl0ZW0pIHJldHVy
biBFSU5WQUw7Ci0gIGlmICghbXV0ZXhpdGVtLT5IYW5kbGVPa2UgKCkpCi0g
IHsKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqbXV0ZXgs
IFBUSFJFQURfTVVURVhfTUFHSUMpKQogICAgIHJldHVybiBFSU5WQUw7Ci0g
IH0KLSAgR0VUQ09ORCgiX3B0aHJlYWRfY29uZF9sb2NrIik7Ci0gIGlmIChp
dGVtLT5tdXRleGl0ZW0gJiYgKGl0ZW0tPm11dGV4aXRlbSAhPSBtdXRleGl0
ZW0pKQorICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCpjb25k
LCBQVEhSRUFEX0NPTkRfTUFHSUMpKQogICAgIHJldHVybiBFSU5WQUw7CisK
KyAgaWYgKCgqY29uZCktPndhaXRpbmcpCisgICAgaWYgKCgqY29uZCktPm11
dGV4ICYmICgoKmNvbmQpLT5tdXRleCAhPSAoKm11dGV4KSkpCisgICAgICBy
ZXR1cm4gRUlOVkFMOworICBJbnRlcmxvY2tlZEluY3JlbWVudCAoJigoKmNv
bmQpLT53YWl0aW5nKSk7CiAKLSAgaXRlbS0+bXV0ZXhpdGVtPW11dGV4aXRl
bTsKLSAgSW50ZXJsb2NrZWRJbmNyZW1lbnQgKCZpdGVtLT53YWl0aW5nKTsK
LSAgcnYgPSBpdGVtLT5UaW1lZFdhaXQgKGFic3RpbWUtPnR2X3NlYyoxMDAw
KTsKLSAgbXV0ZXhpdGVtLT5Mb2NrICgpOwotICBpZiAoSW50ZXJsb2NrZWRE
ZWNyZW1lbnQgKCZpdGVtLT53YWl0aW5nKT09MCkKLSAgICBpdGVtLT5tdXRl
eGl0ZW09TlVMTDsKKyAgKCpjb25kKS0+bXV0ZXggPSAoKm11dGV4KTsKKyAg
SW50ZXJsb2NrZWRJbmNyZW1lbnQgKCYoKCptdXRleCktPmNvbmR3YWl0cykp
OworICBydiA9ICgqY29uZCktPlRpbWVkV2FpdCAoYWJzdGltZS0+dHZfc2Vj
ICogMTAwMCk7CisgICgqY29uZCktPm11dGV4LT5Mb2NrICgpOworICBpZiAo
SW50ZXJsb2NrZWREZWNyZW1lbnQgKCYoKCpjb25kKS0+d2FpdGluZykpID09
IDApCisgICAgKCpjb25kKS0+bXV0ZXggPSBOVUxMOworICBJbnRlcmxvY2tl
ZERlY3JlbWVudCAoJigoKm11dGV4KS0+Y29uZHdhaXRzKSk7CiAKICAgcmV0
dXJuIHJ2OwogfQogCiBpbnQKLV9fcHRocmVhZF9jb25kX3dhaXQgKHB0aHJl
YWRfY29uZF90ICpjb25kLCBwdGhyZWFkX211dGV4X3QgKm11dGV4KQorX19w
dGhyZWFkX2NvbmRfd2FpdCAocHRocmVhZF9jb25kX3QgKiBjb25kLCBwdGhy
ZWFkX211dGV4X3QgKiBtdXRleCkKIHsKICAgaW50IHJ2OwotICBTZXRSZXNv
dXJjZUxvY2sgKExPQ0tfTVVURVhfTElTVCwgUkVBRF9MT0NLLCAiX3B0aGVy
YWRfbXV0ZXhfbG9jayIpOwotICBNdXRleEl0ZW0qIG11dGV4aXRlbT11c2Vy
X2RhdGEtPnRocmVhZGludGVyZmFjZS0+R2V0TXV0ZXggKG11dGV4KTsKLSAg
UmVsZWFzZVJlc291cmNlTG9jayAoTE9DS19NVVRFWF9MSVNULCBSRUFEX0xP
Q0ssICJfcHRoZXJhZF9tdXRleF9sb2NrIik7Ci0gIGlmICghbXV0ZXhpdGVt
KSByZXR1cm4gRUlOVkFMOwotICBpZiAoIW11dGV4aXRlbS0+SGFuZGxlT2tl
ICgpKQotICB7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAo
Km11dGV4LCBQVEhSRUFEX01VVEVYX01BR0lDKSkKICAgICByZXR1cm4gRUlO
VkFMOwotICB9Ci0gIEdFVENPTkQoIl9wdGhyZWFkX2NvbmRfbG9jayIpOwot
ICBpZiAoaXRlbS0+bXV0ZXhpdGVtICYmIChpdGVtLT5tdXRleGl0ZW0gIT0g
bXV0ZXhpdGVtKSkKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlk
ICgqY29uZCwgUFRIUkVBRF9DT05EX01BR0lDKSkKICAgICByZXR1cm4gRUlO
VkFMOworCisgIGlmICgoKmNvbmQpLT53YWl0aW5nKQorICAgIGlmICgoKmNv
bmQpLT5tdXRleCAmJiAoKCpjb25kKS0+bXV0ZXggIT0gKCptdXRleCkpKQor
ICAgICAgcmV0dXJuIEVJTlZBTDsKKyAgSW50ZXJsb2NrZWRJbmNyZW1lbnQg
KCYoKCpjb25kKS0+d2FpdGluZykpOwogCi0gIGl0ZW0tPm11dGV4aXRlbT1t
dXRleGl0ZW07Ci0gIEludGVybG9ja2VkSW5jcmVtZW50ICgmaXRlbS0+d2Fp
dGluZyk7Ci0gIHJ2ID0gaXRlbS0+V2FpdCAoKTsKLSAgbXV0ZXhpdGVtLT5M
b2NrICgpOwotICBpZiAoSW50ZXJsb2NrZWREZWNyZW1lbnQgKCZpdGVtLT53
YWl0aW5nKT09MCkKLSAgICBpdGVtLT5tdXRleGl0ZW09TlVMTDsKKyAgKCpj
b25kKS0+bXV0ZXggPSAoKm11dGV4KTsKKyAgSW50ZXJsb2NrZWRJbmNyZW1l
bnQgKCYoKCptdXRleCktPmNvbmR3YWl0cykpOworICBydiA9ICgqY29uZCkt
PlRpbWVkV2FpdCAoSU5GSU5JVEUpOworICAoKmNvbmQpLT5tdXRleC0+TG9j
ayAoKTsKKyAgaWYgKEludGVybG9ja2VkRGVjcmVtZW50ICgmKCgqY29uZCkt
PndhaXRpbmcpKSA9PSAwKQorICAgICgqY29uZCktPm11dGV4ID0gTlVMTDsK
KyAgSW50ZXJsb2NrZWREZWNyZW1lbnQgKCYoKCptdXRleCktPmNvbmR3YWl0
cykpOwogCiAgIHJldHVybiBydjsKIH0KQEAgLTg2OCwzNSArODU1LDQzIEBA
IF9fcHRocmVhZF9jb25kX3dhaXQgKHB0aHJlYWRfY29uZF90ICpjb24KIGlu
dAogX19wdGhyZWFkX2NvbmRhdHRyX2luaXQgKHB0aHJlYWRfY29uZGF0dHJf
dCAqIGNvbmRhdHRyKQogewotICBjb25kYXR0ci0+c2hhcmVkID0gMDsKLSAg
Y29uZGF0dHItPnZhbGlkICA9IDB4ZjM0MTsgLyogUm9iZXJ0cyBtYWdpYyBu
dW1iZXIgKi8KKyAgKmNvbmRhdHRyID0gbmV3IHB0aHJlYWRfY29uZGF0dHI7
CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKmNvbmRhdHRy
LCBQVEhSRUFEX0NPTkRBVFRSX01BR0lDKSkKKyAgICB7CisgICAgICBkZWxl
dGUgKCpjb25kYXR0cik7CisgICAgICAqY29uZGF0dHIgPSBOVUxMOworICAg
ICAgcmV0dXJuIEVBR0FJTjsKKyAgICB9CiAgIHJldHVybiAwOwogfQogCiBp
bnQKIF9fcHRocmVhZF9jb25kYXR0cl9nZXRwc2hhcmVkIChjb25zdCBwdGhy
ZWFkX2NvbmRhdHRyX3QgKiBhdHRyLCBpbnQgKnBzaGFyZWQpCiB7Ci0gIGlm
ICghYXR0ciB8fCAoYXR0ci0+dmFsaWQgIT0gMHhmMzQxKSkKKyAgaWYgKCF2
ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9DT05E
QVRUUl9NQUdJQykpCiAgICAgcmV0dXJuIEVJTlZBTDsKLSAgKnBzaGFyZWQg
PSBhdHRyLT5zaGFyZWQ7CisgICpwc2hhcmVkID0gKCphdHRyKS0+c2hhcmVk
OwogICByZXR1cm4gMDsKIH0KIAogaW50CiBfX3B0aHJlYWRfY29uZGF0dHJf
c2V0cHNoYXJlZCAocHRocmVhZF9jb25kYXR0cl90ICogYXR0ciwgaW50IHBz
aGFyZWQpCiB7Ci0gIGlmICghYXR0ciB8fCAoYXR0ci0+dmFsaWQgIT0gMHhm
MzQxKSB8fCAocHNoYXJlZCA8MCkgfHwgKHBzaGFyZWQgPiAxKSkKKyAgaWYg
KCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9D
T05EQVRUUl9NQUdJQykpCiAgICAgcmV0dXJuIEVJTlZBTDsKLSAgYXR0ci0+
c2hhcmVkID0gcHNoYXJlZDsKKyAgaWYgKChwc2hhcmVkIDwgMCkgfHwgKHBz
aGFyZWQgPiAxKSkKKyAgICByZXR1cm4gRUlOVkFMOworICAoKmF0dHIpLT5z
aGFyZWQgPSBwc2hhcmVkOwogICByZXR1cm4gMDsKIH0KIAogaW50CiBfX3B0
aHJlYWRfY29uZGF0dHJfZGVzdHJveSAocHRocmVhZF9jb25kYXR0cl90ICog
Y29uZGF0dHIpCiB7Ci0gIGlmICghY29uZGF0dHIgfHwgKGNvbmRhdHRyLT52
YWxpZCAhPSAweGYzNDEpKQotICAgICAgcmV0dXJuIEVJTlZBTDsKLSAgY29u
ZGF0dHItPnZhbGlkPTA7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2
YWxpZCAoKmNvbmRhdHRyLCBQVEhSRUFEX0NPTkRBVFRSX01BR0lDKSkKKyAg
ICByZXR1cm4gRUlOVkFMOworICBkZWxldGUgKCpjb25kYXR0cik7CisgICpj
b25kYXR0ciA9IE5VTEw7CiAgIHJldHVybiAwOwogfQogCkBAIC05MDQsMTIg
Kzg5OSwxNCBAQCBfX3B0aHJlYWRfY29uZGF0dHJfZGVzdHJveSAocHRocmVh
ZF9jb25kCiBpbnQKIF9fcHRocmVhZF9raWxsIChwdGhyZWFkX3QgKiB0aHJl
YWQsIGludCBzaWcpCiB7Ci0gIC8vIGxvY2sgbXlzZWxmLCBmb3IgdGhlIHVz
ZSBvZiB0aHJlYWQyc2lnbmFsCisvLyBsb2NrIG15c2VsZiwgZm9yIHRoZSB1
c2Ugb2YgdGhyZWFkMnNpZ25hbAogICAvLyB0d28gZGlmZmVyIGtpbGxzIG1p
Z2h0IGNsYXNoOiBGSVhNRQotICBHRVRUSFJFQUQgKCJfX3B0aHJlYWRfa2ls
bCIpOworCisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKnRo
cmVhZCwgUFRIUkVBRF9NQUdJQykpCisgICAgcmV0dXJuIEVJTlZBTDsKIAot
ICBpZiAoaXRlbS0+c2lncykKLSAgICBteXNlbGYtPnNldHRocmVhZDJzaWdu
YWwgKGl0ZW0pOworICBpZiAoKCp0aHJlYWQpLT5zaWdzKQorICAgIG15c2Vs
Zi0+c2V0dGhyZWFkMnNpZ25hbCAoKnRocmVhZCk7CiAKICAgaW50IHJ2YWwg
PSBfa2lsbCAobXlzZWxmLT5waWQsIHNpZyk7CiAKQEAgLTkyMCwxNSArOTE3
LDEzIEBAIF9fcHRocmVhZF9raWxsIChwdGhyZWFkX3QgKiB0aHJlYWQsIGlu
dCAKIGludAogX19wdGhyZWFkX3NpZ21hc2sgKGludCBvcGVyYXRpb24sIGNv
bnN0IHNpZ3NldF90ICogc2V0LCBzaWdzZXRfdCAqIG9sZF9zZXQpCiB7Ci0g
IFNldFJlc291cmNlTG9jayAoTE9DS19USFJFQURfTElTVCwgUkVBRF9MT0NL
LCAiX19wdGhyZWFkX3NpZ21hc2siKTsKLSAgVGhyZWFkSXRlbSAqaXRlbSA9
IE1UX0lOVEVSRkFDRS0+R2V0Q2FsbGluZ1RocmVhZCAoKTsKLSAgUmVsZWFz
ZVJlc291cmNlTG9jayAoTE9DS19USFJFQURfTElTVCwgUkVBRF9MT0NLLCAi
X19wdGhyZWFkX3NpZ21hc2siKTsKKyAgcHRocmVhZCAqdGhyZWFkID0gX19w
dGhyZWFkX3NlbGYgKCk7CiAKICAgLy8gbG9jayB0aGlzIG15c2VsZiwgZm9y
IHRoZSB1c2Ugb2YgdGhyZWFkMnNpZ25hbAogICAvLyB0d28gZGlmZmVydCBr
aWxscyBtaWdodCBjbGFzaDogRklYTUUKIAotICBpZiAoaXRlbS0+c2lncykK
LSAgICBteXNlbGYtPnNldHRocmVhZDJzaWduYWwgKGl0ZW0pOworICBpZiAo
dGhyZWFkLT5zaWdzKQorICAgIG15c2VsZi0+c2V0dGhyZWFkMnNpZ25hbCAo
dGhyZWFkKTsKIAogICBpbnQgcnZhbCA9IHNpZ3Byb2NtYXNrIChvcGVyYXRp
b24sIHNldCwgb2xkX3NldCk7CiAKQEAgLTkzOCwxNiArOTMzLDkgQEAgX19w
dGhyZWFkX3NpZ21hc2sgKGludCBvcGVyYXRpb24sIGNvbnN0IAogfQogCiAv
KiAgSUQgKi8KLXB0aHJlYWRfdAotX19wdGhyZWFkX3NlbGYgKCkKK3B0aHJl
YWRfdCBfX3B0aHJlYWRfc2VsZiAoKQogewotICBTZXRSZXNvdXJjZUxvY2sg
KExPQ0tfVEhSRUFEX0xJU1QsIFJFQURfTE9DSywgIl9fcHRocmVhZF9zZWxm
Iik7Ci0KLSAgVGhyZWFkSXRlbSAqaXRlbSA9IE1UX0lOVEVSRkFDRS0+R2V0
Q2FsbGluZ1RocmVhZCAoKTsKLQotICBSZWxlYXNlUmVzb3VyY2VMb2NrIChM
T0NLX1RIUkVBRF9MSVNULCBSRUFEX0xPQ0ssICJfX3B0aHJlYWRfc2VsZiIp
OwotICByZXR1cm4gKHB0aHJlYWRfdCkgaXRlbS0+SWQgKCk7Ci0KKyAgcmV0
dXJuIChwdGhyZWFkICopIFRsc0dldFZhbHVlIChNVF9JTlRFUkZBQ0UtPnRo
cmVhZF9zZWxmX2R3VGxzSW5kZXgpOwogfQogCiBpbnQKQEAgLTk1OSw2MyAr
OTQ3LDY1IEBAIF9fcHRocmVhZF9lcXVhbCAocHRocmVhZF90ICogdDEsIHB0
aHJlYWQKIC8qIE11dGV4ZXMgICovCiAKIGludAotX19wdGhyZWFkX211dGV4
X2luaXQgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4LCBjb25zdCBwdGhyZWFk
X211dGV4YXR0cl90ICovKl9hdHRyKi8pCitfX3B0aHJlYWRfbXV0ZXhfaW5p
dCAocHRocmVhZF9tdXRleF90ICogbXV0ZXgsCisJCSAgICAgIGNvbnN0IHB0
aHJlYWRfbXV0ZXhhdHRyX3QgKiBhdHRyKQogewotICBTZXRSZXNvdXJjZUxv
Y2sgKExPQ0tfTVVURVhfTElTVCwgV1JJVEVfTE9DSyB8IFJFQURfTE9DSywg
Il9fcHRocmVhZF9tdXRleF9pbml0Iik7Ci0KLSAgTXV0ZXhJdGVtICppdGVt
ID0gTVRfSU5URVJGQUNFLT5DcmVhdGVNdXRleCAobXV0ZXgpOworICBpZiAo
YXR0ciAmJiAhdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKmF0dHIsIFBU
SFJFQURfTVVURVhBVFRSX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOwog
Ci0gIENIRUNLSVRFTSAoTE9DS19NVVRFWF9MSVNULCBXUklURV9MT0NLIHwg
UkVBRF9MT0NLLCAiX19wdGhyZWFkX211dGV4X2luaXQiKTsKKyAgaWYgKHZl
cmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCptdXRleCwgUFRIUkVBRF9NVVRF
WF9NQUdJQykpCisgICAgcmV0dXJuIEVCVVNZOwogCi0gIFJlbGVhc2VSZXNv
dXJjZUxvY2sgKExPQ0tfTVVURVhfTElTVCwgV1JJVEVfTE9DSyB8IFJFQURf
TE9DSywgIl9fcHRocmVhZF9tdXRleF9pbml0Iik7CisgICptdXRleCA9IG5l
dyBwdGhyZWFkX211dGV4IChhdHRyID8gKCphdHRyKSA6IE5VTEwpOworICBp
ZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCptdXRleCwgUFRIUkVB
RF9NVVRFWF9NQUdJQykpCisgICAgeworICAgICAgZGVsZXRlICgqbXV0ZXgp
OworICAgICAgKm11dGV4ID0gTlVMTDsKKyAgICAgIHJldHVybiBFQUdBSU47
CisgICAgfQogICByZXR1cm4gMDsKIH0KIAogaW50CiBfX3B0aHJlYWRfbXV0
ZXhfbG9jayAocHRocmVhZF9tdXRleF90ICogbXV0ZXgpCiB7Ci0gIEdFVE1V
VEVYICgiX3B0aGVyYWRfbXV0ZXhfbG9jayIpOwotCi0gIGl0ZW0tPkxvY2sg
KCk7Ci0KKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqbXV0
ZXgsIFBUSFJFQURfTVVURVhfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7
CisgICgqbXV0ZXgpLT5Mb2NrICgpOwogICByZXR1cm4gMDsKIH0KIAogaW50
CiBfX3B0aHJlYWRfbXV0ZXhfdHJ5bG9jayAocHRocmVhZF9tdXRleF90ICog
bXV0ZXgpCiB7Ci0gIEdFVE1VVEVYICgiX3B0aGVyYWRfbXV0ZXhfbG9jayIp
OwotCi0gIGlmIChpdGVtLT5UcnlMb2NrICgpID09IFdBSVRfVElNRU9VVCkK
KyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqbXV0ZXgsIFBU
SFJFQURfTVVURVhfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CisgIGlm
ICgoKm11dGV4KS0+VHJ5TG9jayAoKSA9PSBXQUlUX1RJTUVPVVQpCiAgICAg
cmV0dXJuIEVCVVNZOwotCiAgIHJldHVybiAwOwogfQogCiBpbnQKIF9fcHRo
cmVhZF9tdXRleF91bmxvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4KQog
ewotICBHRVRNVVRFWCAoIl9wdGhlcmFkX211dGV4X2xvY2siKTsKLQotICBp
dGVtLT5VbkxvY2sgKCk7Ci0KKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9p
c3ZhbGlkICgqbXV0ZXgsIFBUSFJFQURfTVVURVhfTUFHSUMpKQorICAgIHJl
dHVybiBFSU5WQUw7CisgICgqbXV0ZXgpLT5VbkxvY2sgKCk7CiAgIHJldHVy
biAwOwogfQogCiBpbnQKIF9fcHRocmVhZF9tdXRleF9kZXN0cm95IChwdGhy
ZWFkX211dGV4X3QgKiBtdXRleCkKIHsKLSAgU2V0UmVzb3VyY2VMb2NrIChM
T0NLX01VVEVYX0xJU1QsIFJFQURfTE9DSyB8IFdSSVRFX0xPQ0ssICJfX3B0
aHJlYWRfbXV0ZXhfZGVzdHJveSIpOwotCi0gIE11dGV4SXRlbSAqaXRlbSA9
IE1UX0lOVEVSRkFDRS0+R2V0TXV0ZXggKG11dGV4KTsKLQotICBDSEVDS0lU
RU0gKExPQ0tfTVVURVhfTElTVCwgV1JJVEVfTE9DSyB8IFJFQURfTE9DSywg
Il9fcHRocmVhZF9tdXRleF9pbml0Iik7Ci0KLSAgaXRlbS0+RGVzdHJveSAo
KTsKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqbXV0ZXgs
IFBUSFJFQURfTVVURVhfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CiAK
LSAgTVRfSU5URVJGQUNFLT5SZWxlYXNlSXRlbSAoaXRlbSk7CisgIC8qIHJl
YWRpbmcgYSB3b3JkIGlzIGF0b21pYyAqLworICBpZiAoKCptdXRleCktPmNv
bmR3YWl0cykKKyAgICByZXR1cm4gRUJVU1k7CiAKLSAgUmVsZWFzZVJlc291
cmNlTG9jayAoTE9DS19NVVRFWF9MSVNULCBSRUFEX0xPQ0sgfCBXUklURV9M
T0NLLCAiX19wdGhyZWFkX211dGV4X2Rlc3Ryb3kiKTsKKyAgZGVsZXRlICgq
bXV0ZXgpOworICAqbXV0ZXggPSBOVUxMOwogICByZXR1cm4gMDsKIH0KIApA
QCAtMTAyMyw2MSArMTAxMyw2MyBAQCBfX3B0aHJlYWRfbXV0ZXhfZGVzdHJv
eSAocHRocmVhZF9tdXRleF90CiBpbnQKIF9fc2VtX2luaXQgKHNlbV90ICog
c2VtLCBpbnQgcHNoYXJlZCwgdW5zaWduZWQgaW50IHZhbHVlKQogewotICBT
ZXRSZXNvdXJjZUxvY2sgKExPQ0tfU0VNX0xJU1QsIFJFQURfTE9DSyB8IFdS
SVRFX0xPQ0ssICJfX3NlbV9pbml0Iik7CisgIC8qIG9wZW5ncm91cCBjYWxs
cyB0aGlzIHVuZGVmaW5lZCAqLworICBpZiAodmVyaWZ5YWJsZV9vYmplY3Rf
aXN2YWxpZCAoKnNlbSwgU0VNX01BR0lDKSkKKyAgICByZXR1cm4gRUJVU1k7
CiAKLSAgU2VtYXBob3JlSXRlbSAqaXRlbSA9IE1UX0lOVEVSRkFDRS0+Q3Jl
YXRlU2VtYXBob3JlIChzZW0sIHBzaGFyZWQsIHZhbHVlKTsKKyAgaWYgKHZh
bHVlID4gU0VNX1ZBTFVFX01BWCkKKyAgICByZXR1cm4gRUlOVkFMOwogCi0g
IENIRUNLSVRFTSAoTE9DS19TRU1fTElTVCwgUkVBRF9MT0NLIHwgV1JJVEVf
TE9DSywgIl9fc2VtX2luaXQiKTsKKyAgKnNlbSA9IG5ldyBzZW1hcGhvcmUg
KHBzaGFyZWQsIHZhbHVlKTsKIAotICBSZWxlYXNlUmVzb3VyY2VMb2NrIChM
T0NLX1NFTV9MSVNULCBSRUFEX0xPQ0sgfCBXUklURV9MT0NLLCAiX19zZW1f
aW5pdCIpOworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCpz
ZW0sIFNFTV9NQUdJQykpCisgICAgeworICAgICAgZGVsZXRlICgqc2VtKTsK
KyAgICAgICpzZW0gPSBOVUxMOworICAgICAgcmV0dXJuIEVBR0FJTjsKKyAg
ICB9CiAgIHJldHVybiAwOwogfQogCiBpbnQKIF9fc2VtX2Rlc3Ryb3kgKHNl
bV90ICogc2VtKQogewotICBTZXRSZXNvdXJjZUxvY2sgKExPQ0tfU0VNX0xJ
U1QsIFJFQURfTE9DSyB8IFdSSVRFX0xPQ0ssICJfX3NlbV9kZXN0cm95Iik7
Ci0KLSAgU2VtYXBob3JlSXRlbSAqaXRlbSA9IE1UX0lOVEVSRkFDRS0+R2V0
U2VtYXBob3JlIChzZW0pOwotCi0gIENIRUNLSVRFTSAoTE9DS19TRU1fTElT
VCwgUkVBRF9MT0NLIHwgV1JJVEVfTE9DSywgIl9fc2VtX2luaXQiKTsKLQot
ICBpdGVtLT5EZXN0cm95ICgpOworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0
X2lzdmFsaWQgKCpzZW0sIFNFTV9NQUdJQykpCisgICAgcmV0dXJuIEVJTlZB
TDsKIAotICBNVF9JTlRFUkZBQ0UtPlJlbGVhc2VJdGVtIChpdGVtKTsKKyAg
LyogRklYTUUgLSBuZXcgZmVhdHVyZSAtIHRlc3QgZm9yIGJ1c3kgYWdhaW5z
dCB0aHJlYWRzLi4uICovCiAKLSAgUmVsZWFzZVJlc291cmNlTG9jayAoTE9D
S19TRU1fTElTVCwgUkVBRF9MT0NLIHwgV1JJVEVfTE9DSywgIl9fc2VtX2Rl
c3Ryb3kiKTsKKyAgZGVsZXRlICgqc2VtKTsKKyAgKnNlbSA9IE5VTEw7CiAg
IHJldHVybiAwOwogfQogCiBpbnQKIF9fc2VtX3dhaXQgKHNlbV90ICogc2Vt
KQogewotICBHRVRTRU1BICgiX19zZW1fd2FpdCIpOwotCi0gIGl0ZW0tPldh
aXQgKCk7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKnNl
bSwgU0VNX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOwogCisgICgqc2Vt
KS0+V2FpdCAoKTsKICAgcmV0dXJuIDA7CiB9CiAKIGludAogX19zZW1fdHJ5
d2FpdCAoc2VtX3QgKiBzZW0pCiB7Ci0gIEdFVFNFTUEgKCJfX3NlbV90cnl3
YWl0Iik7Ci0KLSAgaWYgKGl0ZW0tPlRyeVdhaXQgKCkgPT0gV0FJVF9USU1F
T1VUKQotICAgIHJldHVybiBFQUdBSU47CisgIGlmICghdmVyaWZ5YWJsZV9v
YmplY3RfaXN2YWxpZCAoKnNlbSwgU0VNX01BR0lDKSkKKyAgICByZXR1cm4g
RUlOVkFMOwogCi0gIHJldHVybiAwOworICByZXR1cm4gKCpzZW0pLT5UcnlX
YWl0ICgpOwogfQogCiBpbnQKIF9fc2VtX3Bvc3QgKHNlbV90ICogc2VtKQog
ewotICBHRVRTRU1BICgiX19zZW1fcG9zdCIpOwotCi0gIGl0ZW0tPlBvc3Qg
KCk7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKnNlbSwg
U0VNX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOwogCisgICgqc2VtKS0+
UG9zdCAoKTsKICAgcmV0dXJuIDA7CiB9CiAKQEAgLTEwODcsNyArMTA3OSw4
IEBAIF9fc2VtX3Bvc3QgKHNlbV90ICogc2VtKQogLy8gZW1wdHkgZnVuY3Rp
b25zIG5lZWRlZCB3aGVuIG1ha2VpbmcgdGhlIGRsbCB3aXRob3V0IG10X3Nh
ZmUgc3VwcG9ydAogZXh0ZXJuICJDIgogewotICBpbnQgX19wdGhyZWFkX2Ny
ZWF0ZSAocHRocmVhZF90ICosIGNvbnN0IHB0aHJlYWRfYXR0cl90ICosIFRG
RCAoc3RhcnRfcm91dGluZSksIHZvaWQgKmFyZykKKyAgaW50IF9fcHRocmVh
ZF9jcmVhdGUgKHB0aHJlYWRfdCAqLCBjb25zdCBwdGhyZWFkX2F0dHJfdCAq
LAorCQkJVEZEIChzdGFydF9yb3V0aW5lKSwgdm9pZCAqYXJnKQogICB7CiAg
ICAgcmV0dXJuIC0xOwogICB9CkBAIC0xMDk5LDYgKzEwOTIsMTYgQEAgZXh0
ZXJuICJDIgogICB7CiAgICAgcmV0dXJuIC0xOwogICB9CisgIGludCBfX3B0
aHJlYWRfYXR0cl9zZXRkZXRhY2hzdGF0ZSAocHRocmVhZF9hdHRyX3QgKiBh
dHRyLCBpbnQgZGV0YWNoc3RhdGUpCisgIHsKKyAgICByZXR1cm4gLTE7Cisg
IH0KKyAgaW50CisgICAgX19wdGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUg
KGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0ciwKKwkJCQkgICBpbnQgKmRl
dGFjaHN0YXRlKQorICB7CisgICAgcmV0dXJuIC0xOworICB9CiAgIGludCBf
X3B0aHJlYWRfYXR0cl9zZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICog
YXR0ciwgc2l6ZV90IHNpemUpCiAgIHsKICAgICByZXR1cm4gLTE7CkBAIC0x
MTA3LDcgKzExMTAsNyBAQCBleHRlcm4gIkMiCiAgIHsKICAgICByZXR1cm4g
LTE7CiAgIH0KLS8qCisvKiB0aGVzZSBjYW5ub3QgYmUgc3VwcG9ydGVkIG9u
IHdpbjMyIC0gdGhlIG9zIGFsbG9jYXRlcyBpdCdzIG93biBzdGFjayBzcGFj
ZS4uCiAgICBfX3B0aHJlYWRfYXR0cl9zZXRzdGFja2FkZHIgKC4uLil7IHJl
dHVybiAtMTsgfTsKICAgIF9fcHRocmVhZF9hdHRyX2dldHN0YWNrYWRkciAo
Li4uKXsgcmV0dXJuIC0xOyB9OwogICovCkBAIC0xMTE4LDcgKzExMjEsNyBA
QCBleHRlcm4gIkMiCiAKICAgaW50IF9fcHRocmVhZF9qb2luIChwdGhyZWFk
X3QgdGhyZWFkX2lkLCB2b2lkICoqcmV0dXJuX3ZhbCkKICAgewotICAgICBy
ZXR1cm4gLTE7CisgICAgcmV0dXJuIC0xOwogICB9CiAKICAgdW5zaWduZWQg
bG9uZyBfX3B0aHJlYWRfZ2V0c2VxdWVuY2VfbnAgKHB0aHJlYWRfdCAqIHRo
cmVhZCkKQEAgLTExNDUsNyArMTE0OCw4IEBAIGV4dGVybiAiQyIKICAgewog
ICAgIHJldHVybiAtMTsKICAgfQotICBpbnQgX19wdGhyZWFkX3NpZ21hc2sg
KGludCBvcGVyYXRpb24sIGNvbnN0IHNpZ3NldF90ICogc2V0LCBzaWdzZXRf
dCAqIG9sZF9zZXQpCisgIGludCBfX3B0aHJlYWRfc2lnbWFzayAoaW50IG9w
ZXJhdGlvbiwgY29uc3Qgc2lnc2V0X3QgKiBzZXQsCisJCQkgc2lnc2V0X3Qg
KiBvbGRfc2V0KQogICB7CiAgICAgcmV0dXJuIC0xOwogICB9CkBAIC0xMTkz
LDcgKzExOTcsOCBAQCBleHRlcm4gIkMiCiAgIHsKICAgICByZXR1cm4gLTE7
CiAgIH0KLSAgaW50IF9fcHRocmVhZF9jb25kX3RpbWVkd2FpdCAocHRocmVh
ZF9jb25kX3QgKiwgcHRocmVhZF9tdXRleF90ICosIGNvbnN0IHN0cnVjdCB0
aW1lc3BlYyAqKQorICBpbnQgX19wdGhyZWFkX2NvbmRfdGltZWR3YWl0IChw
dGhyZWFkX2NvbmRfdCAqLCBwdGhyZWFkX211dGV4X3QgKiwKKwkJCQljb25z
dCBzdHJ1Y3QgdGltZXNwZWMgKikKICAgewogICAgIHJldHVybiAtMTsKICAg
fQpAQCAtMTI0Myw0ICsxMjQ4LDQgQEAgZXh0ZXJuICJDIgogICB9CiB9CiAK
LSNlbmRpZiAvLyBNVF9TQUZFCisjZW5kaWYJCQkJLy8gTVRfU0FGRQpJbmRl
eDogdGhyZWFkLmgKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpSQ1MgZmlsZTog
L2N2cy9zcmMvc3JjL3dpbnN1cC9jeWd3aW4vdGhyZWFkLmgsdgpyZXRyaWV2
aW5nIHJldmlzaW9uIDEuMTEKZGlmZiAtdSAtcCAtcjEuMTEgdGhyZWFkLmgK
LS0tIHRocmVhZC5oCTIwMDEvMDMvMTkgMjI6NDg6MjYJMS4xMQorKysgdGhy
ZWFkLmgJMjAwMS8wMy8yMSAwMDowMDoxMgpAQCAtMSw5ICsxLDExIEBACiAv
KiB0aHJlYWQuaDogTG9ja2luZyBhbmQgdGhyZWFkaW5nIG1vZHVsZSBkZWZp
bml0aW9ucwogCiAgICBDb3B5cmlnaHQgMTk5OCwgMTk5OSwgMjAwMCBDeWdu
dXMgU29sdXRpb25zLgorICAgQ29weXJpZ2h0IDIwMDEgUmVkIEhhdCwgSW5j
LgogCiAgICBXcml0dGVuIGJ5IE1hcmNvIEZ1eWtzY2hvdCA8bWFyY29AZGRp
Lm5sPgotCisgICBNYWpvciB1cGRhdGUgMjAwMSBSb2JlcnQgQ29sbGlucyA8
cmJ0Y29sbGluc0Bob3RtYWlsLmNvbT4KKyAgIAogVGhpcyBmaWxlIGlzIHBh
cnQgb2YgQ3lnd2luLgogCiBUaGlzIHNvZnR3YXJlIGlzIGEgY29weXJpZ2h0
ZWQgd29yayBsaWNlbnNlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlCkBAIC0x
NywxMCArMTksNiBAQCBkZXRhaWxzLiAqLwogI2RlZmluZSBMT0NLX01FTU9S
WV9MSVNUIDIKICNkZWZpbmUgTE9DS19NTUFQX0xJU1QgICAzCiAjZGVmaW5l
IExPQ0tfRExMX0xJU1QgICAgNAotI2RlZmluZSBMT0NLX1RIUkVBRF9MSVNU
IDUKLSNkZWZpbmUgTE9DS19NVVRFWF9MSVNUICA2Ci0jZGVmaW5lIExPQ0tf
U0VNX0xJU1QgICAgNwotI2RlZmluZSBMT0NLX0NPTkRfTElTVCAgIDgKIAog
I2RlZmluZSBXUklURV9MT0NLIDEKICNkZWZpbmUgUkVBRF9MT0NLICAyCkBA
IC00MCw4MSArMzgsOTggQEAgZXh0ZXJuICJDIgogI2RlZmluZSBSZWxlYXNl
UmVzb3VyY2VMb2NrKGksbixjKQogCiAjZWxzZQorCisvLyNpbmNsdWRlIDxw
dGhyZWFkLmg+CisvKiBGSVhNRTogdGhlc2UgYXJlIGRlZmluZWQgaW4gcHRo
cmVhZC5oLCBidXQgcHRocmVhZC5oIGRlZmluZXMgc3ltYm9scyBpdCBzaG91
bGRuJ3QgLQorICogYWxsIHRoZSB0eXBlcy4KKyAqLworI2RlZmluZSBQVEhS
RUFEX1BST0NFU1NfUFJJVkFURSAwCisjZGVmaW5lIFBUSFJFQURfUFJPQ0VT
U19TSEFSRUQgIDEKKyNkZWZpbmUgUFRIUkVBRF9ERVNUUlVDVE9SX0lURVJB
VElPTlMgMQorLyogVGxzIGhhcyA2NCBpdGVtcyBmb3IgcHJlIHdpbjIwMDAg
LSBhbmQgd2UgZG9uJ3Qgd2FudCB0byB1c2UgdGhlbSBhbGwgOl0KKyAqIEJl
Zm9yZSBjb21taXR0aW5nIGRpc2N1c3MgdGhpcyB3aXRoIHRoZSBsaXN0Cisg
Ki8KKyNkZWZpbmUgUFRIUkVBRF9LRVlTX01BWCAzMgorI2RlZmluZSBQVEhS
RUFEX0NSRUFURV9ERVRBQ0hFRCAxCisvKiB0aGUgZGVmYXVsdCA6IGpvaW5h
YmxlICovCisjZGVmaW5lIFBUSFJFQURfQ1JFQVRFX0pPSU5BQkxFIDAKIAot
I2luY2x1ZGUgPHB0aHJlYWQuaD4KKyNpbmNsdWRlIDxzaWduYWwuaD4KICNp
bmNsdWRlIDxwd2QuaD4KICNpbmNsdWRlIDxncnAuaD4KICNkZWZpbmUgX05P
TU5URU5UX0ZVTkNTCiAjaW5jbHVkZSA8bW50ZW50Lmg+CiAKLWV4dGVybiAi
QyIgewotCi1zdHJ1Y3QgX3dpbnN1cF90CitleHRlcm4gIkMiCiB7CisKKyAg
c3RydWN0IF93aW5zdXBfdAorICB7CiAvKgogIE5lZWRlZCBmb3IgdGhlIGdy
b3VwIGZ1bmN0aW9ucwogKi8KLSAgc3RydWN0IGdyb3VwIF9ncnA7Ci0gIGNo
YXIgKl9uYW1lYXJyYXlbMl07Ci0gIGNoYXIgX2xpbmVidWZbMTAwXTsKLSAg
aW50IF9ncnBfcG9zOworICAgIHN0cnVjdCBncm91cCBfZ3JwOworICAgIGNo
YXIgKl9uYW1lYXJyYXlbMl07CisgICAgY2hhciBfbGluZWJ1ZlsxMDBdOwor
ICAgIGludCBfZ3JwX3BvczsKIAogLyogY29uc29sZS5jYyAqLwotICB1bnNp
Z25lZCBfcmFyZzsKKyAgICB1bnNpZ25lZCBfcmFyZzsKIAogLyogZGxmY24u
Y2MgKi8KLSAgaW50IF9kbF9lcnJvcjsKLSAgY2hhciBfZGxfYnVmZmVyWzI1
Nl07CisgICAgaW50IF9kbF9lcnJvcjsKKyAgICBjaGFyIF9kbF9idWZmZXJb
MjU2XTsKIAogLyogcGFzc3dkLmNjICovCi0gIHN0cnVjdCBwYXNzd2QgX3Jl
czsKLSAgY2hhciBfdG1wYnVmWzEwMF07Ci0gIGNoYXIgX3Bhc3NbX1BBU1NX
T1JEX0xFTl07Ci0gIGludCBfcHdfcG9zOworICAgIHN0cnVjdCBwYXNzd2Qg
X3JlczsKKyAgICBjaGFyIF90bXBidWZbMTAwXTsKKyAgICBjaGFyIF9wYXNz
W19QQVNTV09SRF9MRU5dOworICAgIGludCBfcHdfcG9zOwogCiAvKiBwYXRo
LmNjICovCi0gIHN0cnVjdCBtbnRlbnQgX3JldDsKLSAgaW50IF9pdGVyYXRp
b247CisgICAgc3RydWN0IG1udGVudCBfcmV0OworICAgIGludCBfaXRlcmF0
aW9uOwogCiAvKiBzdHJlcnJvciAqLwotICBjaGFyIF9zdHJlcnJvcl9idWZb
MjBdOworICAgIGNoYXIgX3N0cmVycm9yX2J1ZlsyMF07CiAKIC8qIHN5c2Nh
bGxzLmNjICovCi0gIGNoYXIgX2RhY2xfYnVmWzEwMjRdOwotICBjaGFyIF9z
YWNsX2J1ZlsxMDI0XTsKLSAgY2hhciBfb3ducl9idWZbMTAyNF07Ci0gIGNo
YXIgX2dycF9idWZbMTAyNF07CisgICAgY2hhciBfZGFjbF9idWZbMTAyNF07
CisgICAgY2hhciBfc2FjbF9idWZbMTAyNF07CisgICAgY2hhciBfb3ducl9i
dWZbMTAyNF07CisgICAgY2hhciBfZ3JwX2J1ZlsxMDI0XTsKIAogLyogc3lz
bG9jLmNjICovCi0gIGNoYXIgKl9wcm9jZXNzX2lkZW50OwotICBpbnQgX3By
b2Nlc3NfbG9nb3B0OwotICBpbnQgX3Byb2Nlc3NfZmFjaWxpdHk7Ci0gIGlu
dCBfcHJvY2Vzc19sb2dtYXNrOworICAgIGNoYXIgKl9wcm9jZXNzX2lkZW50
OworICAgIGludCBfcHJvY2Vzc19sb2dvcHQ7CisgICAgaW50IF9wcm9jZXNz
X2ZhY2lsaXR5OworICAgIGludCBfcHJvY2Vzc19sb2dtYXNrOwogCiAvKiB0
aW1lcy5jYyAqLwotICBjaGFyIF9iWzIwXTsKLSAgc3RydWN0IHRtIF9sb2Nh
bHRpbWVfYnVmOwotICBjaGFyIF9idWYxWzMzXTsKLSAgY2hhciBfYnVmMlsz
M107CisgICAgY2hhciBfYlsyMF07CisgICAgc3RydWN0IHRtIF9sb2NhbHRp
bWVfYnVmOworICAgIGNoYXIgX2J1ZjFbMzNdOworICAgIGNoYXIgX2J1ZjJb
MzNdOwogCiAvKiB1aW5mby5jYyAqLwotICBjaGFyIF91c2VybmFtZVtNQVhf
VVNFUl9OQU1FXTsKLX07CisgICAgY2hhciBfdXNlcm5hbWVbTUFYX1VTRVJf
TkFNRV07CisgIH07CiAKIAotc3RydWN0IF9fcmVlbnRfdAotewotICBzdHJ1
Y3QgX3JlZW50ICpfY2xpYjsKLSAgc3RydWN0IF93aW5zdXBfdCAqX3dpbnN1
cDsKLX07Ci0KLV9yZWVudCAqX3JlZW50X2NsaWIgKCk7Ci1fd2luc3VwX3Qg
Kl9yZWVudF93aW5zdXAgKCk7Ci12b2lkIFNldFJlc291cmNlTG9jayAoaW50
LCBpbnQsIGNvbnN0IGNoYXIgKikgX19hdHRyaWJ1dGVfXyAoKHJlZ3Bhcm0o
MykpKTsKLXZvaWQgUmVsZWFzZVJlc291cmNlTG9jayAoaW50LCBpbnQsIGNv
bnN0IGNoYXIgKikgX19hdHRyaWJ1dGVfXyAoKHJlZ3Bhcm0oMykpKTsKKyAg
c3RydWN0IF9fcmVlbnRfdAorICB7CisgICAgc3RydWN0IF9yZWVudCAqX2Ns
aWI7CisgICAgc3RydWN0IF93aW5zdXBfdCAqX3dpbnN1cDsKKyAgfTsKKwor
ICBfcmVlbnQgKl9yZWVudF9jbGliICgpOworICBfd2luc3VwX3QgKl9yZWVu
dF93aW5zdXAgKCk7CisgIHZvaWQgU2V0UmVzb3VyY2VMb2NrIChpbnQsIGlu
dCwgY29uc3QgY2hhciAqKSBfX2F0dHJpYnV0ZV9fICgocmVncGFybSAoMykp
KTsKKyAgdm9pZCBSZWxlYXNlUmVzb3VyY2VMb2NrIChpbnQsIGludCwgY29u
c3QgY2hhciAqKQorICAgIF9fYXR0cmlidXRlX18gKChyZWdwYXJtICgzKSkp
OwogCiAjaWZkZWYgX0NZR19USFJFQURfRkFJTFNBRkUKLXZvaWQgQXNzZXJ0
UmVzb3VyY2VPd25lciAoaW50LCBpbnQpOworICB2b2lkIEFzc2VydFJlc291
cmNlT3duZXIgKGludCwgaW50KTsKICNlbHNlCiAjZGVmaW5lIEFzc2VydFJl
c291cmNlT3duZXIoaSxpaSkKICNlbmRpZgpAQCAtMTI2LDcgKzE0MSw5IEBA
IGNsYXNzIHBpbmZvOwogY2xhc3MgUmVzb3VyY2VMb2NrcwogewogcHVibGlj
OgotICBSZXNvdXJjZUxvY2tzICgpIHt9OworICBSZXNvdXJjZUxvY2tzICgp
CisgIHsKKyAgfTsKICAgTFBDUklUSUNBTF9TRUNUSU9OIExvY2sgKGludCk7
CiAgIHZvaWQgSW5pdCAoKTsKICAgdm9pZCBEZWxldGUgKCk7CkBAIC0xMzQs
MTk2ICsxNTEsMjU1IEBAIHB1YmxpYzoKICAgRFdPUkQgb3duZXI7CiAgIERX
T1JEIGNvdW50OwogI2VuZGlmCi0gIHByaXZhdGU6Citwcml2YXRlOgogICBD
UklUSUNBTF9TRUNUSU9OIGxvY2s7CiAgIGJvb2wgaW5pdGVkOwogfTsKIAor
I2RlZmluZSBQVEhSRUFEX01BR0lDIDB4ZGYwZGYwNDUKKyNkZWZpbmUgUFRI
UkVBRF9NVVRFWF9NQUdJQyBQVEhSRUFEX01BR0lDKzEKKyNkZWZpbmUgUFRI
UkVBRF9LRVlfTUFHSUMgUFRIUkVBRF9NQUdJQysyCisjZGVmaW5lIFBUSFJF
QURfQVRUUl9NQUdJQyBQVEhSRUFEX01BR0lDKzMKKyNkZWZpbmUgUFRIUkVB
RF9NVVRFWEFUVFJfTUFHSUMgUFRIUkVBRF9NQUdJQys0CisjZGVmaW5lIFBU
SFJFQURfQ09ORF9NQUdJQyBQVEhSRUFEX01BR0lDKzUKKyNkZWZpbmUgUFRI
UkVBRF9DT05EQVRUUl9NQUdJQyBQVEhSRUFEX01BR0lDKzYKKyNkZWZpbmUg
U0VNX01BR0lDIFBUSFJFQURfTUFHSUMrNworCitjbGFzcyB2ZXJpZnlhYmxl
X29iamVjdAoreworcHVibGljOgorICBsb25nIG1hZ2ljOwogCi0jZGVmaW5l
IE1UX01BWF9JVEVNUyAxMjgKKyAgICB2ZXJpZnlhYmxlX29iamVjdCAobG9u
Zyk7CisgICB+dmVyaWZ5YWJsZV9vYmplY3QgKCk7Cit9OwogCi0vLyB0aHJl
YWQgY2xhc3Nlc1xsaXN0cworaW50IHZlcmlmeWFibGVfb2JqZWN0X2lzdmFs
aWQgKHZlcmlmeWFibGVfb2JqZWN0ICosIGxvbmcpOwogCi1jbGFzcyBNVGl0
ZW0KK2NsYXNzIHB0aHJlYWRfYXR0cjpwdWJsaWMgdmVyaWZ5YWJsZV9vYmpl
Y3QKIHsKLSAgcHVibGljOgotICBIQU5ETEUgd2luMzJfb2JqX2lkOwotICBV
SU5UIHJldHVybl92YWx1ZTsKLSAgYm9vbCB1c2VkOwotICBjaGFyIGpvaW5h
YmxlOyAgICAgICAvLyBmb3IgdGhyZWFkIG9ubHkKLSAgYm9vbCBIYW5kbGVP
a2UgKCkge3JldHVybiB3aW4zMl9vYmpfaWQ7fQotICB2aXJ0dWFsIHZvaWQg
RGVzdHJveSAoKTsKLSAgdmlydHVhbCBpbnQgSWQgKCkge3JldHVybiAoaW50
KSB3aW4zMl9vYmpfaWQ7fQorcHVibGljOgorICBpbnQgam9pbmFibGU7Cisg
IHNpemVfdCBzdGFja3NpemU7CisKKyAgICBwdGhyZWFkX2F0dHIgKCk7Cisg
ICB+cHRocmVhZF9hdHRyICgpOwogfTsKIAotY2xhc3MgVGhyZWFkSXRlbTog
cHVibGljIE1UaXRlbQorY2xhc3MgcHRocmVhZDpwdWJsaWMgdmVyaWZ5YWJs
ZV9vYmplY3QKIHsKIHB1YmxpYzoKLSAgcHRocmVhZF9hdHRyX3QgYXR0cjsK
LSAgVEZEIChmdW5jdGlvbik7CisgIEhBTkRMRSB3aW4zMl9vYmpfaWQ7Cisg
IGNsYXNzIHB0aHJlYWRfYXR0ciBhdHRyOworICB2b2lkICooKmZ1bmN0aW9u
KSAodm9pZCAqKTsKICAgdm9pZCAqYXJnOwogICB2b2lkICpyZXR1cm5fcHRy
OwogICBib29sIHN1c3BlbmRlZDsKLSAgRFdPUkQgdGhyZWFkX2lkOwotICBE
V09SRCBHZXRUaHJlYWRJZCAoKSB7cmV0dXJuIHRocmVhZF9pZDt9CisgIGlu
dCBqb2luYWJsZTsKKyAgRFdPUkQgR2V0VGhyZWFkSWQgKCkKKyAgeworICAg
IHJldHVybiB0aHJlYWRfaWQ7CisgIH0KKyAgdm9pZCBzZXRUaHJlYWRJZHRv
Q3VycmVudCAoKQorICB7CisgICAgdGhyZWFkX2lkID0gR2V0Q3VycmVudFRo
cmVhZElkICgpOworICB9CiAKICAgLyogc2lnbmFsIGhhbmRsaW5nICovCiAg
IHN0cnVjdCBzaWdhY3Rpb24gKnNpZ3M7CiAgIHNpZ3NldF90ICpzaWdtYXNr
OwogICBMT05HICpzaWd0b2RvOworICB2b2lkIGNyZWF0ZSAodm9pZCAqKCop
KHZvaWQgKiksIHB0aHJlYWRfYXR0ciAqLCB2b2lkICopOworCisgICAgcHRo
cmVhZCAoKTsKKyAgIH5wdGhyZWFkICgpOworCitwcml2YXRlOgorICAgIERX
T1JEIHRocmVhZF9pZDsKKwogfTsKIAotY2xhc3MgTXV0ZXhJdGVtOiBwdWJs
aWMgTVRpdGVtCitjbGFzcyBwdGhyZWFkX211dGV4YXR0cjpwdWJsaWMgdmVy
aWZ5YWJsZV9vYmplY3QKIHsKIHB1YmxpYzoKKworICBwdGhyZWFkX211dGV4
YXR0ciAoKTsKKyAgfnB0aHJlYWRfbXV0ZXhhdHRyICgpOworfTsKKworY2xh
c3MgcHRocmVhZF9tdXRleDpwdWJsaWMgdmVyaWZ5YWJsZV9vYmplY3QKK3sK
K3B1YmxpYzoKKyAgSEFORExFIHdpbjMyX29ial9pZDsKKyAgTE9ORyBjb25k
d2FpdHM7CisKICAgaW50IExvY2sgKCk7CiAgIGludCBUcnlMb2NrICgpOwog
ICBpbnQgVW5Mb2NrICgpOworCisgICAgcHRocmVhZF9tdXRleCAocHRocmVh
ZF9tdXRleGF0dHIgKik7CisgICB+cHRocmVhZF9tdXRleCAoKTsKIH07CiAK
LWNsYXNzIFNlbWFwaG9yZUl0ZW06IHB1YmxpYyBNVGl0ZW0KK2NsYXNzIHB0
aHJlYWRfa2V5OnB1YmxpYyB2ZXJpZnlhYmxlX29iamVjdAogewogcHVibGlj
OgorCisgIERXT1JEIGR3VGxzSW5kZXg7CisgIGludCBzZXQgKGNvbnN0IHZv
aWQgKik7CisgIHZvaWQgKmdldCAoKTsKKworICAgIHB0aHJlYWRfa2V5ICgp
OworICAgfnB0aHJlYWRfa2V5ICgpOworfTsKKworY2xhc3MgcHRocmVhZF9j
b25kYXR0cjpwdWJsaWMgdmVyaWZ5YWJsZV9vYmplY3QKK3sKK3B1YmxpYzoK
ICAgaW50IHNoYXJlZDsKLSAgaW50IFdhaXQgKCk7Ci0gIGludCBQb3N0ICgp
OwotICBpbnQgVHJ5V2FpdCAoKTsKKworICAgIHB0aHJlYWRfY29uZGF0dHIg
KCk7CisgICB+cHRocmVhZF9jb25kYXR0ciAoKTsKIH07CiAKLWNsYXNzIENv
bmRJdGVtOiBwdWJsaWMgTVRpdGVtCitjbGFzcyBwdGhyZWFkX2NvbmQ6cHVi
bGljIHZlcmlmeWFibGVfb2JqZWN0CiB7CiBwdWJsaWM6CiAgIGludCBzaGFy
ZWQ7CiAgIExPTkcgd2FpdGluZzsKLSAgTXV0ZXhJdGVtICptdXRleGl0ZW07
Ci0gIGludCBXYWl0ICgpOworICBwdGhyZWFkX211dGV4ICptdXRleDsKKyAg
SEFORExFIHdpbjMyX29ial9pZDsKICAgaW50IFRpbWVkV2FpdCAoRFdPUkQg
ZHdNaWxsaXNlY29uZHMpOwotICBpbnQgQnJvYWRDYXN0ICgpOwotICBpbnQg
U2lnbmFsICgpOworICB2b2lkIEJyb2FkQ2FzdCAoKTsKKyAgdm9pZCBTaWdu
YWwgKCk7CisKKyAgICBwdGhyZWFkX2NvbmQgKHB0aHJlYWRfY29uZGF0dHIg
Kik7CisgICB+cHRocmVhZF9jb25kICgpOwogfTsKIAotdHlwZWRlZiBzdHJ1
Y3QKKy8qIHNob3VsZG4ndCBiZSBoZXJlICovCitjbGFzcyBzZW1hcGhvcmU6
cHVibGljIHZlcmlmeWFibGVfb2JqZWN0CiB7Ci0gIE1UaXRlbSAqaXRlbXNb
TVRfTUFYX0lURU1TXTsKLSAgaW50IGluZGV4OwotfSBNVExpc3Q7CitwdWJs
aWM6CisgIEhBTkRMRSB3aW4zMl9vYmpfaWQ7CisgIGludCBzaGFyZWQ7Cisg
IHZvaWQgV2FpdCAoKTsKKyAgdm9pZCBQb3N0ICgpOworICBpbnQgVHJ5V2Fp
dCAoKTsKIAorICAgIHNlbWFwaG9yZSAoaW50LCB1bnNpZ25lZCBpbnQpOwor
ICAgfnNlbWFwaG9yZSAoKTsKK307CisKK3R5cGVkZWYgY2xhc3MgcHRocmVh
ZCAqcHRocmVhZF90OwordHlwZWRlZiBjbGFzcyBwdGhyZWFkX211dGV4ICpw
dGhyZWFkX211dGV4X3Q7CisvKiBzZW0gcm91dGluZXMgYmVsb25nIGluIHNl
bWFwaG9yZS5jYyAqLwordHlwZWRlZiBjbGFzcyBzZW1hcGhvcmUgKnNlbV90
OworCit0eXBlZGVmIGNsYXNzIHB0aHJlYWRfa2V5ICpwdGhyZWFkX2tleV90
OwordHlwZWRlZiBjbGFzcyBwdGhyZWFkX2F0dHIgKnB0aHJlYWRfYXR0cl90
OwordHlwZWRlZiBjbGFzcyBwdGhyZWFkX211dGV4YXR0ciAqcHRocmVhZF9t
dXRleGF0dHJfdDsKK3R5cGVkZWYgY2xhc3MgcHRocmVhZF9jb25kYXR0ciAq
cHRocmVhZF9jb25kYXR0cl90OwordHlwZWRlZiBjbGFzcyBwdGhyZWFkX2Nv
bmQgKnB0aHJlYWRfY29uZF90OworCiBjbGFzcyBNVGludGVyZmFjZQogewog
cHVibGljOgogICAvLyBHZW5lcmFsCiAgIERXT1JEIHJlZW50X2luZGV4Owot
ICBEV09SRCB0aHJlYWRfa2V5OworICBEV09SRCB0aHJlYWRfc2VsZl9kd1Rs
c0luZGV4OworICAvKiB3ZSBtYXkgZ2V0IDAgZm9yIHRoZSBUbHMgaW5kZXgu
LiBncnJyICovCisgIGludCBpbmRleGFsbG9jYXRlZDsKIAogICAvLyBVc2Vk
IGZvciBtYWluIHRocmVhZCBkYXRhLCBhbmQgc2lncHJvYyB0aHJlYWQKICAg
c3RydWN0IF9fcmVlbnRfdCByZWVudHM7CiAgIHN0cnVjdCBfd2luc3VwX3Qg
d2luc3VwX3JlZW50OwotICBUaHJlYWRJdGVtIG1haW50aHJlYWQ7CisgIHB0
aHJlYWQgbWFpbnRocmVhZDsKIAogICB2b2lkIEluaXQgKGludCk7CiAKLSAg
dm9pZCBSZWxlYXNlSXRlbSAoTVRpdGVtICopOwotCi0gIC8vIFRocmVhZCBm
dW5jdGlvbnMKLSAgVGhyZWFkSXRlbSAqQ3JlYXRlVGhyZWFkIChwdGhyZWFk
X3QgKiwgVEZEIChmdW5jKSwgdm9pZCAqLCBwdGhyZWFkX2F0dHJfdCk7Ci0g
IFRocmVhZEl0ZW0gKkdldENhbGxpbmdUaHJlYWQgKCk7Ci0gIFRocmVhZEl0
ZW0gKkdldFRocmVhZCAocHRocmVhZF90ICopOwotCi0gIC8vIE11dGV4IGZ1
bmN0aW9ucwotICBNdXRleEl0ZW0gKkNyZWF0ZU11dGV4IChwdGhyZWFkX211
dGV4X3QgKik7Ci0gIE11dGV4SXRlbSAqR2V0TXV0ZXggKHB0aHJlYWRfbXV0
ZXhfdCAqKTsKLQotICAvLyBTZW1hcGhvcmUgZnVuY3Rpb25zCi0gIFNlbWFw
aG9yZUl0ZW0gKkNyZWF0ZVNlbWFwaG9yZSAoc2VtX3QgKiwgaW50LCBpbnQp
OwotICBTZW1hcGhvcmVJdGVtICpHZXRTZW1hcGhvcmUgKHNlbV90ICogdCk7
Ci0KLSAgLy8gQ29uZGl0aW9uIGZ1bmN0aW9ucwotICBDb25kSXRlbSAqQ3Jl
YXRlQ29uZCAocHRocmVhZF9jb25kX3QgKiwgY29uc3QgcHRocmVhZF9jb25k
YXR0cl90ICopOwotICBDb25kSXRlbSAqR2V0Q29uZCAocHRocmVhZF9jb25k
X3QgKik7Ci0KLXByaXZhdGU6Ci0gIC8vIEdlbmVyYWwgQWRtaW5pc3RyYXRp
b24KLSAgTVRpdGVtICogRmluZCAodm9pZCAqLCBpbnQgKCpjb21wYXJlKSAo
dm9pZCAqLCB2b2lkICopLCBpbnQgJiwgTVRMaXN0ICopOwotICBNVGl0ZW0g
KkdldEl0ZW0gKGludCwgTVRMaXN0ICopOwotICBNVGl0ZW0gKlNldEl0ZW0g
KGludCwgTVRpdGVtICosIE1UTGlzdCAqKTsKLSAgaW50IEZpbmQgKE1UaXRl
bSAmLCBNVExpc3QgKik7Ci0gIGludCBGaW5kTmV4dFVudXNlZCAoTVRMaXN0
ICopOwotCi0gIE1UTGlzdCB0aHJlYWRsaXN0OwotICBNVExpc3QgbXV0ZXhs
aXN0OwotICBNVExpc3Qgc2VtYWxpc3Q7Ci0gIE1UTGlzdCBjb25kbGlzdDsK
KyAgICBNVGludGVyZmFjZSAoKTpyZWVudF9pbmRleCAoMCksIGluZGV4YWxs
b2NhdGVkICgwKQorICB7CisgIH0KIH07CiAKIAogZXh0ZXJuICJDIgogewog
Ci12b2lkICp0aHJlYWRfaW5pdF93cmFwcGVyICh2b2lkICopOworICB2b2lk
ICp0aHJlYWRfaW5pdF93cmFwcGVyICh2b2lkICopOwogCiAvKiAgVGhyZWFk
Q3JlYXRpb24gKi8KLWludCBfX3B0aHJlYWRfY3JlYXRlIChwdGhyZWFkX3Qg
KiB0aHJlYWQsIGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0ciwgVEZEIChz
dGFydF9yb3V0aW5lKSwgdm9pZCAqYXJnKTsKLWludCBfX3B0aHJlYWRfYXR0
cl9pbml0IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIpOwotaW50IF9fcHRocmVh
ZF9hdHRyX2Rlc3Ryb3kgKHB0aHJlYWRfYXR0cl90ICogYXR0cik7Ci1pbnQg
X19wdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChwdGhyZWFkX2F0dHJfdCAq
IGF0dHIsIHNpemVfdCBzaXplKTsKLWludCBfX3B0aHJlYWRfYXR0cl9nZXRz
dGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICogYXR0ciwgc2l6ZV90ICogc2l6
ZSk7CisgIGludCBfX3B0aHJlYWRfY3JlYXRlIChwdGhyZWFkX3QgKiB0aHJl
YWQsIGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0ciwKKwkJCXZvaWQgKigq
c3RhcnRfcm91dGluZSkgKHZvaWQgKiksIHZvaWQgKmFyZyk7CisgIGludCBf
X3B0aHJlYWRfYXR0cl9pbml0IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIpOwor
ICBpbnQgX19wdGhyZWFkX2F0dHJfZGVzdHJveSAocHRocmVhZF9hdHRyX3Qg
KiBhdHRyKTsKKyAgaW50IF9fcHRocmVhZF9hdHRyX3NldGRldGFjaHN0YXRl
IChwdGhyZWFkX2F0dHJfdCAqLCBpbnQpOworICBpbnQgX19wdGhyZWFkX2F0
dHJfZ2V0ZGV0YWNoc3RhdGUgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICosIGlu
dCAqKTsKKyAgaW50IF9fcHRocmVhZF9hdHRyX3NldHN0YWNrc2l6ZSAocHRo
cmVhZF9hdHRyX3QgKiBhdHRyLCBzaXplX3Qgc2l6ZSk7CisgIGludCBfX3B0
aHJlYWRfYXR0cl9nZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICogYXR0
ciwgc2l6ZV90ICogc2l6ZSk7CiAvKgogX19wdGhyZWFkX2F0dHJfc2V0c3Rh
Y2thZGRyKC4uLik7CiBfX3B0aHJlYWRfYXR0cl9nZXRzdGFja2FkZHIoLi4u
KTsKICovCiAKIC8qIFRocmVhZCBFeGl0ICovCi1pbnQgX19wdGhyZWFkX2V4
aXQgKHZvaWQgKnZhbHVlX3B0cik7Ci1pbnQgX19wdGhyZWFkX2pvaW4ocHRo
cmVhZF90ICp0aHJlYWQsIHZvaWQgKipyZXR1cm5fdmFsKTsKLWludCBfX3B0
aHJlYWRfZGV0YWNoKHB0aHJlYWRfdCAqdGhyZWFkKTsKKyAgdm9pZCBfX3B0
aHJlYWRfZXhpdCAodm9pZCAqdmFsdWVfcHRyKTsKKyAgaW50IF9fcHRocmVh
ZF9qb2luIChwdGhyZWFkX3QgKiB0aHJlYWQsIHZvaWQgKipyZXR1cm5fdmFs
KTsKKyAgaW50IF9fcHRocmVhZF9kZXRhY2ggKHB0aHJlYWRfdCAqIHRocmVh
ZCk7CiAKIC8qIFRocmVhZCBzdXNwZW5kICovCiAKLWludCBfX3B0aHJlYWRf
c3VzcGVuZChwdGhyZWFkX3QgKnRocmVhZCk7Ci1pbnQgX19wdGhyZWFkX2Nv
bnRpbnVlKHB0aHJlYWRfdCAqdGhyZWFkKTsKKyAgaW50IF9fcHRocmVhZF9z
dXNwZW5kIChwdGhyZWFkX3QgKiB0aHJlYWQpOworICBpbnQgX19wdGhyZWFk
X2NvbnRpbnVlIChwdGhyZWFkX3QgKiB0aHJlYWQpOwogCi11bnNpZ25lZCBs
b25nIF9fcHRocmVhZF9nZXRzZXF1ZW5jZV9ucCAocHRocmVhZF90ICogdGhy
ZWFkKTsKKyAgdW5zaWduZWQgbG9uZyBfX3B0aHJlYWRfZ2V0c2VxdWVuY2Vf
bnAgKHB0aHJlYWRfdCAqIHRocmVhZCk7CiAKIC8qIFRocmVhZCBTcGVjaWZp
Y0RhdGEgKi8KLWludCBfX3B0aHJlYWRfa2V5X2NyZWF0ZSAocHRocmVhZF9r
ZXlfdCAqIGtleSk7Ci1pbnQgX19wdGhyZWFkX2tleV9kZWxldGUgKHB0aHJl
YWRfa2V5X3QgKiBrZXkpOwotaW50IF9fcHRocmVhZF9zZXRzcGVjaWZpYyAo
cHRocmVhZF9rZXlfdCAqIGtleSwgY29uc3Qgdm9pZCAqdmFsdWUpOwotdm9p
ZCAqX19wdGhyZWFkX2dldHNwZWNpZmljIChwdGhyZWFkX2tleV90ICoga2V5
KTsKKyAgaW50IF9fcHRocmVhZF9rZXlfY3JlYXRlIChwdGhyZWFkX2tleV90
ICoga2V5LCB2b2lkICgqZGVzdHJ1Y3RvcikgKHZvaWQgKikpOworICBpbnQg
X19wdGhyZWFkX2tleV9kZWxldGUgKHB0aHJlYWRfa2V5X3QgKiBrZXkpOwor
ICBpbnQgX19wdGhyZWFkX3NldHNwZWNpZmljIChwdGhyZWFkX2tleV90IGtl
eSwgY29uc3Qgdm9pZCAqdmFsdWUpOworICB2b2lkICpfX3B0aHJlYWRfZ2V0
c3BlY2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5KTsKIAogLyogVGhlYWQgc3lu
Y2hyb25pYXRpb24gKi8KLWludCBfX3B0aHJlYWRfY29uZF9kZXN0cm95KHB0
aHJlYWRfY29uZF90ICpjb25kKTsKLWludCBfX3B0aHJlYWRfY29uZF9pbml0
KHB0aHJlYWRfY29uZF90ICpjb25kLCBjb25zdCBwdGhyZWFkX2NvbmRhdHRy
X3QgKmF0dHIpOwotaW50IF9fcHRocmVhZF9jb25kX3NpZ25hbChwdGhyZWFk
X2NvbmRfdCAqY29uZCk7Ci1pbnQgX19wdGhyZWFkX2NvbmRfYnJvYWRjYXN0
KHB0aHJlYWRfY29uZF90ICpjb25kKTsKLWludCBfX3B0aHJlYWRfY29uZF90
aW1lZHdhaXQocHRocmVhZF9jb25kX3QgKmNvbmQsIHB0aHJlYWRfbXV0ZXhf
dCAqbXV0ZXgsIGNvbnN0IHN0cnVjdCB0aW1lc3BlYyAqYWJzdGltZSk7Ci1p
bnQgX19wdGhyZWFkX2NvbmRfd2FpdChwdGhyZWFkX2NvbmRfdCAqY29uZCwg
cHRocmVhZF9tdXRleF90ICptdXRleCk7Ci1pbnQgX19wdGhyZWFkX2NvbmRh
dHRyX2luaXQgKHB0aHJlYWRfY29uZGF0dHJfdCAqIGNvbmRhdHRyKTsKLWlu
dCBfX3B0aHJlYWRfY29uZGF0dHJfZGVzdHJveSAocHRocmVhZF9jb25kYXR0
cl90ICogY29uZGF0dHIpOwotaW50IF9fcHRocmVhZF9jb25kYXR0cl9nZXRw
c2hhcmVkIChjb25zdCBwdGhyZWFkX2NvbmRhdHRyX3QgKmF0dHIsIGludCAq
cHNoYXJlZCk7Ci1pbnQgX19wdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQg
KHB0aHJlYWRfY29uZGF0dHJfdCAqYXR0ciwgaW50IHBzaGFyZWQpOworICBp
bnQgX19wdGhyZWFkX2NvbmRfZGVzdHJveSAocHRocmVhZF9jb25kX3QgKiBj
b25kKTsKKyAgaW50IF9fcHRocmVhZF9jb25kX2luaXQgKHB0aHJlYWRfY29u
ZF90ICogY29uZCwKKwkJCSAgIGNvbnN0IHB0aHJlYWRfY29uZGF0dHJfdCAq
IGF0dHIpOworICBpbnQgX19wdGhyZWFkX2NvbmRfc2lnbmFsIChwdGhyZWFk
X2NvbmRfdCAqIGNvbmQpOworICBpbnQgX19wdGhyZWFkX2NvbmRfYnJvYWRj
YXN0IChwdGhyZWFkX2NvbmRfdCAqIGNvbmQpOworICBpbnQgX19wdGhyZWFk
X2NvbmRfdGltZWR3YWl0IChwdGhyZWFkX2NvbmRfdCAqIGNvbmQsCisJCQkJ
cHRocmVhZF9tdXRleF90ICogbXV0ZXgsCisJCQkJY29uc3Qgc3RydWN0IHRp
bWVzcGVjICphYnN0aW1lKTsKKyAgaW50IF9fcHRocmVhZF9jb25kX3dhaXQg
KHB0aHJlYWRfY29uZF90ICogY29uZCwgcHRocmVhZF9tdXRleF90ICogbXV0
ZXgpOworICBpbnQgX19wdGhyZWFkX2NvbmRhdHRyX2luaXQgKHB0aHJlYWRf
Y29uZGF0dHJfdCAqIGNvbmRhdHRyKTsKKyAgaW50IF9fcHRocmVhZF9jb25k
YXR0cl9kZXN0cm95IChwdGhyZWFkX2NvbmRhdHRyX3QgKiBjb25kYXR0cik7
CisgIGludCBfX3B0aHJlYWRfY29uZGF0dHJfZ2V0cHNoYXJlZCAoY29uc3Qg
cHRocmVhZF9jb25kYXR0cl90ICogYXR0ciwKKwkJCQkgICAgIGludCAqcHNo
YXJlZCk7CisgIGludCBfX3B0aHJlYWRfY29uZGF0dHJfc2V0cHNoYXJlZCAo
cHRocmVhZF9jb25kYXR0cl90ICogYXR0ciwgaW50IHBzaGFyZWQpOwogCiAv
KiBUaHJlYWQgc2lnbmFsICovCi1pbnQgX19wdGhyZWFkX2tpbGwgKHB0aHJl
YWRfdCAqIHRocmVhZCwgaW50IHNpZyk7Ci1pbnQgX19wdGhyZWFkX3NpZ21h
c2sgKGludCBvcGVyYXRpb24sIGNvbnN0IHNpZ3NldF90ICogc2V0LCBzaWdz
ZXRfdCAqIG9sZF9zZXQpOworICBpbnQgX19wdGhyZWFkX2tpbGwgKHB0aHJl
YWRfdCAqIHRocmVhZCwgaW50IHNpZyk7CisgIGludCBfX3B0aHJlYWRfc2ln
bWFzayAoaW50IG9wZXJhdGlvbiwgY29uc3Qgc2lnc2V0X3QgKiBzZXQsCisJ
CQkgc2lnc2V0X3QgKiBvbGRfc2V0KTsKIAogLyogIElEICovCi1wdGhyZWFk
X3QgX19wdGhyZWFkX3NlbGYgKCk7Ci1pbnQgX19wdGhyZWFkX2VxdWFsIChw
dGhyZWFkX3QgKiB0MSwgcHRocmVhZF90ICogdDIpOworICBwdGhyZWFkX3Qg
X19wdGhyZWFkX3NlbGYgKCk7CisgIGludCBfX3B0aHJlYWRfZXF1YWwgKHB0
aHJlYWRfdCAqIHQxLCBwdGhyZWFkX3QgKiB0Mik7CiAKIAogLyogTXV0ZXhl
cyAgKi8KLWludCBfX3B0aHJlYWRfbXV0ZXhfaW5pdCAocHRocmVhZF9tdXRl
eF90ICosIGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKik7Ci1pbnQgX19w
dGhyZWFkX211dGV4X2xvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqKTsKLWludCBf
X3B0aHJlYWRfbXV0ZXhfdHJ5bG9jayAocHRocmVhZF9tdXRleF90ICopOwot
aW50IF9fcHRocmVhZF9tdXRleF91bmxvY2sgKHB0aHJlYWRfbXV0ZXhfdCAq
KTsKLWludCBfX3B0aHJlYWRfbXV0ZXhfZGVzdHJveSAocHRocmVhZF9tdXRl
eF90ICopOworICBpbnQgX19wdGhyZWFkX211dGV4X2luaXQgKHB0aHJlYWRf
bXV0ZXhfdCAqLCBjb25zdCBwdGhyZWFkX211dGV4YXR0cl90ICopOworICBp
bnQgX19wdGhyZWFkX211dGV4X2xvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqKTsK
KyAgaW50IF9fcHRocmVhZF9tdXRleF90cnlsb2NrIChwdGhyZWFkX211dGV4
X3QgKik7CisgIGludCBfX3B0aHJlYWRfbXV0ZXhfdW5sb2NrIChwdGhyZWFk
X211dGV4X3QgKik7CisgIGludCBfX3B0aHJlYWRfbXV0ZXhfZGVzdHJveSAo
cHRocmVhZF9tdXRleF90ICopOwogCiAvKiBTZW1hcGhvcmVzICovCi1pbnQg
X19zZW1faW5pdCAoc2VtX3QgKiBzZW0sIGludCBwc2hhcmVkLCB1bnNpZ25l
ZCBpbnQgdmFsdWUpOwotaW50IF9fc2VtX2Rlc3Ryb3kgKHNlbV90ICogc2Vt
KTsKLWludCBfX3NlbV93YWl0IChzZW1fdCAqIHNlbSk7Ci1pbnQgX19zZW1f
dHJ5d2FpdCAoc2VtX3QgKiBzZW0pOwotaW50IF9fc2VtX3Bvc3QgKHNlbV90
ICogc2VtKTsKKyAgaW50IF9fc2VtX2luaXQgKHNlbV90ICogc2VtLCBpbnQg
cHNoYXJlZCwgdW5zaWduZWQgaW50IHZhbHVlKTsKKyAgaW50IF9fc2VtX2Rl
c3Ryb3kgKHNlbV90ICogc2VtKTsKKyAgaW50IF9fc2VtX3dhaXQgKHNlbV90
ICogc2VtKTsKKyAgaW50IF9fc2VtX3RyeXdhaXQgKHNlbV90ICogc2VtKTsK
KyAgaW50IF9fc2VtX3Bvc3QgKHNlbV90ICogc2VtKTsKIAogfTsKIApJbmRl
eDogTWFrZWZpbGUuaW4KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpSQ1MgZmls
ZTogL2N2cy9zcmMvc3JjL3dpbnN1cC9jeWd3aW4vTWFrZWZpbGUuaW4sdgpy
ZXRyaWV2aW5nIHJldmlzaW9uIDEuNTEKZGlmZiAtdSAtcCAtcjEuNTEgTWFr
ZWZpbGUuaW4KLS0tIE1ha2VmaWxlLmluCTIwMDEvMDIvMjIgMTI6NTY6MzYJ
MS41MQorKysgTWFrZWZpbGUuaW4JMjAwMS8wMy8yMSAwMDowMDoxMwpAQCAt
MTIzLDggKzEyMyw4IEBAIERMTF9PRklMRVM6PWFzc2VydC5vIGF1dG9sb2Fk
Lm8gY3lnaGVhcC4KIAlmb3JrLm8gZ2xvYi5vIGdycC5vIGhlYXAubyBpbml0
Lm8gaW9jdGwubyBsb2NhbHRpbWUubyBtYWxsb2MubyBcCiAJbWlzY2Z1bmNz
Lm8gbW1hcC5vIFwKIAluZXQubyBudGVhLm8gcGFzc3dkLm8gcGF0aC5vIHBp
bmZvLm8gcGlwZS5vIHBvbGwubyBwdGhyZWFkLm8gcmVnZXhwLm8gXAotCXJl
Z2Vycm9yLm8gcmVnc3ViLm8gcmVnaXN0cnkubyByZXNvdXJjZS5vIHNjYW5k
aXIubyBzZWN1cml0eS5vIHNlbGVjdC5vIFwKLQlzaGFyZWQubyBcCisJcmVn
ZXJyb3IubyByZWdzdWIubyByZWdpc3RyeS5vIHJlc291cmNlLm8gc2NhbmRp
ci5vIHNjaGVkLm8gXAorICAgICAgICBzZWN1cml0eS5vIHNlbGVjdC5vIHNo
YXJlZC5vIFwKIAlzaG9ydGN1dC5vIHNpZ25hbC5vIHNpZ3Byb2MubyBzbWFs
bHByaW50Lm8gc3Bhd24ubyBzdHJhY2UubyBzdHJzZXAubyBcCiAJc3luYy5v
IHN5c2NhbGxzLm8gc3lzY29uZi5vIHN5c2xvZy5vIHRlcm1pb3MubyB0aHJl
YWQubyB0aW1lcy5vIHR0eS5vIFwKIAl1aW5mby5vIHVuYW1lLm8gd2FpdC5v
IHdpbmRvdy5vIFwKSW5kZXg6IHBpbmZvLmgKPT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PQpSQ1MgZmlsZTogL2N2cy9zcmMvc3JjL3dpbnN1cC9jeWd3aW4vcGlu
Zm8uaCx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4yNApkaWZmIC11IC1wIC1y
MS4yNCBwaW5mby5oCi0tLSBwaW5mby5oCTIwMDEvMDMvMTAgMjM6Mzc6NTAJ
MS4yNAorKysgcGluZm8uaAkyMDAxLzAzLzIxIDAwOjAwOjE0CkBAIC0xMTYs
MTMgKzExNiwxMyBAQCBwdWJsaWM6CiAgICAgcmV0dXJuIHRocmVhZDJzaWdu
YWwgPyB0aHJlYWQyc2lnbmFsLT53aW4zMl9vYmpfaWQgOiBoTWFpblRocmVh
ZDsKICAgfQogCi0gIGlubGluZSB2b2lkIHNldHRocmVhZDJzaWduYWwgKHZv
aWQgKnRocikge3RocmVhZDJzaWduYWwgPSAoVGhyZWFkSXRlbSAqKSB0aHI7
fQorICBpbmxpbmUgdm9pZCBzZXR0aHJlYWQyc2lnbmFsICh2b2lkICp0aHIp
IHt0aHJlYWQyc2lnbmFsID0gKHB0aHJlYWQgKikgdGhyO30KIAogcHJpdmF0
ZToKICAgc3RydWN0IHNpZ2FjdGlvbiBzaWdzW05TSUddOwogICBzaWdzZXRf
dCBzaWdfbWFzazsJCS8qIG9uZSBzZXQgZm9yIGV2ZXJ5dGhpbmcgdG8gaWdu
b3JlLiAqLwogICBMT05HIF9zaWd0b2RvW05TSUcgKyBfX1NJR09GRlNFVF07
Ci0gIFRocmVhZEl0ZW0gKnRocmVhZDJzaWduYWw7ICAvLyBOVUxMIG1lYW5z
IG1lYW5zIHRocmVhZCBhbnkgb3RoZXIgbWVhbnMgYSBwdGhyZWFkCisgIHB0
aHJlYWQgKnRocmVhZDJzaWduYWw7ICAvLyBOVUxMIG1lYW5zIG1lYW5zIHRo
cmVhZCBhbnkgb3RoZXIgbWVhbnMgYSBwdGhyZWFkCiB9OwogCiBjbGFzcyBw
aW5mbwpJbmRleDogY3lnd2luLmRpbgo9PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
ClJDUyBmaWxlOiAvY3ZzL3NyYy9zcmMvd2luc3VwL2N5Z3dpbi9jeWd3aW4u
ZGluLHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjIyCmRpZmYgLXUgLXAgLXIx
LjIyIGN5Z3dpbi5kaW4KLS0tIGN5Z3dpbi5kaW4JMjAwMS8wMy8xNyAwMTox
NDo1NwkxLjIyCisrKyBjeWd3aW4uZGluCTIwMDEvMDMvMjEgMDA6MDA6MTUK
QEAgLTExMTQsNiArMTExNCwxNCBAQCBjeWd3aW4zMl9pbnRlcm5hbCA9IGN5
Z3dpbl9pbnRlcm5hbAogQFBUSF9BTExPV0BzZW1fd2FpdAogQFBUSF9BTExP
V0BzZW1fdHJ5d2FpdAogQFBUSF9BTExPV0BzZW1fcG9zdAorc2NoZWRfZ2V0
X3ByaW9yaXR5X21heAorc2NoZWRfZ2V0X3ByaW9yaXR5X21pbgorc2NoZWRf
Z2V0cGFyYW0KK3NjaGVkX2dldHNjaGVkdWxlcgorc2NoZWRfcnJfZ2V0X2lu
dGVydmFsCitzY2hlZF9zZXRwYXJhbQorc2NoZWRfc2V0c2NoZWR1bGVyCitz
Y2hlZF95aWVsZAogYWNsCiBfYWNsID0gYWNsCiBmYWNsCg==

------------=_1583532846-65438-26
Content-Type: text/x-c; charset=us-ascii; name="semaphore.h"
Content-Disposition: inline; filename="semaphore.h"
Content-Transfer-Encoding: base64
Content-Length: 1086

Lyogc2VtYXBob3JlLmg6IFBPU0lYIHNlbWFwaG9yZSBpbnRlcmZhY2UKCiAg
IENvcHlyaWdodCAyMDAxIFJlZCBIYXQsIEluYy4KCiAgIFdyaXR0ZW4gYnkg
Um9iZXJ0IENvbGxpbnMgPHJidGNvbGxpbnNAaG90bWFpbC5jb20+CgogICBU
aGlzIGZpbGUgaXMgcGFydCBvZiBDeWd3aW4uCgogICBUaGlzIHNvZnR3YXJl
IGlzIGEgY29weXJpZ2h0ZWQgd29yayBsaWNlbnNlZCB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlCiAgIEN5Z3dpbiBsaWNlbnNlLiAgUGxlYXNlIGNvbnN1bHQg
dGhlIGZpbGUgIkNZR1dJTl9MSUNFTlNFIiBmb3IKICAgZGV0YWlscy4gKi8K
CiNpbmNsdWRlIDxzeXMvdHlwZXMuaD4KCiNpZm5kZWYgX1NFTUFQSE9SRV9I
CiNkZWZpbmUgX1NFTUFQSE9SRV9ICgojaWZkZWYgX19jcGx1c3BsdXMKZXh0
ZXJuICJDIgp7CiNlbmRpZgoKI2lmbmRlZiBfX0lOU0lERV9DWUdXSU5fXwog
IHR5cGVkZWYgdm9pZCAqc2VtX3Q7CiNlbmRpZgoKI2RlZmluZSBTRU1fRkFJ
TEVEIDAKI2RlZmluZSBTRU1fVkFMVUVfTUFYIDExNDc0ODM2NDgKCi8qIFNl
bWFwaG9yZXMgKi8KICBpbnQgc2VtX2luaXQgKHNlbV90ICogc2VtLCBpbnQg
cHNoYXJlZCwgdW5zaWduZWQgaW50IHZhbHVlKTsKICBpbnQgc2VtX2Rlc3Ry
b3kgKHNlbV90ICogc2VtKTsKICBpbnQgc2VtX3dhaXQgKHNlbV90ICogc2Vt
KTsKICBpbnQgc2VtX3RyeXdhaXQgKHNlbV90ICogc2VtKTsKICBpbnQgc2Vt
X3Bvc3QgKHNlbV90ICogc2VtKTsKCiNpZmRlZiBfX2NwbHVzcGx1cwp9CiNl
bmRpZgoKI2VuZGlmCQkJCS8qIF9TRU1BUEhPUkVfSCAqLwo=

------------=_1583532846-65438-26--
