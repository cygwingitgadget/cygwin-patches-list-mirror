Return-Path: <cygwin-patches-return-10152-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 57723 invoked by alias); 2 Mar 2020 00:45:33 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Id: <cygwin-patches.cygwin.com>
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sourceware.org/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sourceware.org/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Mail-Followup-To: cygwin-patches@cygwin.com
Received: (qmail 57674 invoked by uid 89); 2 Mar 2020 00:45:24 -0000
Authentication-Results: sourceware.org; auth=none
X-Spam-SWARE-Status: No, score=-6.2 required=5.0 tests=AWL,BAYES_00,RCVD_IN_DNSWL_NONE autolearn=ham version=3.3.1 spammy=looked, HContent-Transfer-Encoding:8bit
X-HELO: conssluserg-03.nifty.com
Received: from conssluserg-03.nifty.com (HELO conssluserg-03.nifty.com) (210.131.2.82) by sourceware.org (qpsmtpd/0.93/v0.84-503-g423c35a) with ESMTP; Mon, 02 Mar 2020 00:45:13 +0000
Received: from Express5800-S70 (ntsitm196171.sitm.nt.ngn.ppp.infoweb.ne.jp [125.0.207.171]) (authenticated)	by conssluserg-03.nifty.com with ESMTP id 0220itDJ029519	for <cygwin-patches@cygwin.com>; Mon, 2 Mar 2020 09:44:56 +0900
DKIM-Filter: OpenDKIM Filter v2.10.3 conssluserg-03.nifty.com 0220itDJ029519
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nifty.ne.jp;	s=dec2015msa; t=1583109896;	bh=0juhjiE/aGDAaH/kT6JfOSYXyNjftH2hY7W65ILDczI=;	h=Date:From:To:Subject:In-Reply-To:References:From;	b=qt6TMkRR27FhH21xQr5wgikSCSi4UUkq7f59UDAn6gXPsMtl7QJzZABBuZJr1UaNv	 2dMKtEpj8HC7JQDSmpgZGXQZEgxLbSlE0SxuZeLPbfVdvVyru3hGXdFrksdZ9aS9EW	 RlLyHo6nQwAOy9pH+EolT/2px14/M9aXQh80wcO/VrQv6010LxOYqBq0532aSVXVGy	 9SyBEPfXEs/Pdk+HF9dy/Vtbo6JBgwIuHpRAne3HEYKUcQ/8GE2LFjqCREw6B3U/gu	 eAKa/k4roA9jap8AD6XGGyXPTSvmeHdapd3x/IaJ0xFIgYMmmFPuxC5427eiY/2zLc	 F4a/YX8D2Z+2g==
Date: Mon, 02 Mar 2020 00:45:00 -0000
From: Takashi Yano <takashi.yano@nifty.ne.jp>
To: cygwin-patches@cygwin.com
Subject: Re: [PATCH v2 1/4] Cygwin: console: Add workaround for broken IL/DL in xterm mode.
Message-Id: <20200302094459.4e995985caa46426f20eaa86@nifty.ne.jp>
In-Reply-To: <49f801fe-3c86-d2ab-1ea2-b7eea7ad7c5f@t-online.de>
References: <20200226153302.584-1-takashi.yano@nifty.ne.jp>	<20200226153302.584-2-takashi.yano@nifty.ne.jp>	<05cca441-eb83-4600-90f3-bf82ec7a0190@dronecode.org.uk>	<20200228111409.149929dcf710cabf99a879b3@nifty.ne.jp>	<20200228133122.GG4045@calimero.vinschen.de>	<cc657f02-e3a4-1880-34a2-dcf04d6e902a@t-online.de>	<20200301153342.cbc54c2b14687b71679f993a@nifty.ne.jp>	<49f801fe-3c86-d2ab-1ea2-b7eea7ad7c5f@t-online.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-IsSubscribed: yes
X-SW-Source: 2020-q1/txt/msg00258.txt

On Sun, 1 Mar 2020 14:56:31 +0100
Hans-Bernhard BrÃ¶ker wrote:
> Am 01.03.2020 um 07:33 schrieb Takashi Yano:
> 
> > However, from the view point of performance, just inline
> > static function is better. 
> 
> I don't see how that could be the case.  Inline methods of a static C++ 
> object should not suffer any perfomance penalty compared to inline 
> functions operating on static variables.
> 
> > Attached code measures the
> > performance of access speed for wpbuf.
> > I compiled it by g++ 7.4.0 with -O2 option.
> > 
> > The result is as follows.
> > 
> > Total1: 2.315627 second
> > Total2: 1.588511 second
> > Total3: 1.571572 second
> 
> Strange.  The result here (with GCC 9.2) is rather different:
> 
> $ g++ -O2 -o tt wpbuf-bench.cc && ./tt
> Total1: 0.753815 second
> Total2: 0.757444 second
> Total3: 1.217352 second
> 
> And on inspection, all three bench*() functions do appear to have 
> exactly the same machine code, too.  They may be inlined and mixed into 
> main() somewhat differently, though.  That might explain the difference 
> more readily than any actual difference in speed between the three 
> implementations.

I looked into the code generated by g++ 7.4.0 with -O2. The codes
generated are different.

With 32bit compiler,

bench1():
L3:
    cmpl    $255, %edx
    jg  L2
    movb    $65, _wpbuf(%edx)
    movl    $1, %ecx
    addl    $1, %edx
L2:
    subl    $1, %eax
    [...]

bench2(), bench3():
L22:
    cmpl    $255, %edx
    jg  L21
    movb    $65, _wpbuf2(%edx)
    addl    $1, %edx
L21:
    subl    $1, %eax
    [...]

With 64bit compiler,

bench1():
.L3:
    cmpl    $255, %edx
    jg  .L2
    movslq  %edx, %rcx
    addl    $1, %edx
    movb    $65, (%r8,%rcx)
    movl    $1, %ecx
.L2:
    subl    $1, %eax
    [...]

bench2(), bench3():
.L15:
    cmpl    $255, %edx
    jg  .L14
    movslq  %edx, %rcx
    addl    $1, %edx
    movb    $65, (%r8,%rcx)
.L14:
    subl    $1, %eax
    [...]

Obviously, code for bench2() and bench3() is shorter than
bench1().

However, with g++ 9.2.0 with -O2,

bench1(), bench2(), bench3():
L3:
    cmpl    $255, %edx
    jg  L2
    movb    $65, _wpbuf(%edx)
    addl    $1, %edx
L2:
    subl    $1, %eax
    [...]

all the codes are exactly the same, as you mentioned.

So, if we assume g++ 9.2.0, please forget the previous remarks
about speed.

-- 
Takashi Yano <takashi.yano@nifty.ne.jp>
