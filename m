From: "Robert Collins" <robert.collins@itdomain.com.au>
To: <cygwin-patches@cygwin.com>
Subject: Cygwin half of pthread update
Date: Wed, 11 Apr 2001 18:10:00 -0000
Message-id: <03f001c0c2ed$3b89acd0$0200a8c0@lifelesswks>
X-SW-Source: 2001-q2/msg00034.html
Content-type: multipart/mixed; boundary="----------=_1583532847-65438-40"

This is a multi-part message in MIME format...

------------=_1583532847-65438-40
Content-length: 5440

Ok, this is a bug one. I really really really hope I've got the
ChangeLog correct!

The standard GPL warning applies to this contrib:
no warranty.
All care no responsibility :]

Thurs Apr 12 10:02 2001  Robert Collins <rbtcollins@hotmail.com>

 * configure.in: Remove PTH_ALLOW.
 * cygwin.din: Remove @PTH_ALLOW@ prefixes to pthread functions.
 (thread_attr_getdetachstate): New export.
 (pthread_attr_getdetachstate): New export.
 (pthread_attr_getinheritsched): New export.
 (pthread_attr_getschedparam): New export.
 (pthread_attr_getschedpolicy): New export.
 (pthread_attr_getscope): New export.
 (pthread_attr_setdetachstate): New export.
 (pthread_attr_setinheritsched): New export.
 (pthread_attr_setschedparam): New export.
 (pthread_attr_setschedpolicy): New export.
 (pthread_attr_setscope): New export.
 (pthread_cancel): New export.
 (pthread_create): New export.
 (pthread_detach): New export.
 (pthread_equal): New export.
 (pthread_exit): New export.
 (pthread_getconcurrency): New export.
 (pthread_getschedparam): New export.
 (pthread_join): New export.
 (pthread_mutex_getprioceiling): New export.
 (pthread_mutex_setprioceiling): New export.
 (pthread_mutexattr_destroy): New export.
 (pthread_mutexattr_getprioceiling): New export.
 (pthread_mutexattr_getprotocol): New export.
 (pthread_mutexattr_getpshared): New export.
 (pthread_mutexattr_gettype): New export.
 (pthread_mutexattr_init): New export.
 (pthread_mutexattr_setprioceiling): New export.
 (pthread_mutexattr_setprotocol): New export.
 (pthread_mutexattr_setpshared): New export.
 (pthread_mutexattr_settype): New export.
 (pthread_once): New export.
 (pthread_setcancelstate): New export.
 (pthread_setcanceltype): New export.
 (pthread_setconcurrency): New export.
 (pthread_setschedparam): New export.
 (pthread_testcancel): New export.
 pthread.cc: New wrapper functions for the above new exports.
 sched.cc (valid_sched_parameters): New function.
 (sched_setparam): Use it.
 (sched_set_thread_priority): New function. Used by pthread_sched*.
 thread.cc (pthread_key_destructor::InsertAfter): New function.
 (pthread_key_destructor::UnlinkNext): New function.
 (pthread_key_destructor::Next): New function.
 (pthread_key_destructor_list::Insert): New function.
 (pthread_key_destructor_list::Remove): New function.
 (pthread_key_destructor_list::Pop): New function.
 (pthread_key_destructor::pthread_key_destructor): New function.
 (pthread_key_destructor_list::IterateNull): New function.
 (MTinterface::Init): Initialise new member.
 (pthread::pthread): Initialise new members.
 (pthread::create): Copy new attributes. Set the new thread priority.
 (pthread_attr::pthread_attr): Initialise new members.
 (pthread_key::pthread_key): Setup destructor function.
 (pthread_key::~pthread_key): Remove destructor function.
 (pthread_mutexattr::pthread_mutexattr): New function.
 (pthread_mutexattr::~pthread_mutexattr): New function.
 (__pthread_once): New function.
 (__pthread_cleanup): New function.
 (__pthread_cancel): New function.
 (__pthread_setcancelstate): New function.
 (__pthread_setcanceltype): New function.
 (__pthread_testcancel): New function.
 (__pthread_attr_getinheritsched): New function.
 (__pthread_attr_getschedparam): New function.
 (__pthread_attr_getschedpolicy): New function.
 (__pthread_attr_getscope): New function.
 (__pthread_attr_setinheritsched): New function.
 (__pthread_attr_setschedparam): New function.
 (__pthread_attr_setschedpolicy): New function.
 (__pthread_attr_setscope): New function.
 (__pthread_exit): Call any key destructors on thread exit.
 (__pthread_join): Use the embedded attr values.
 (__pthread_detach): Use the embedded attr values.
 (__pthread_getconcurrency): New function.
 (__pthread_getschedparam): New function.
 (__pthread_key_create): Pass the destructor on object creation.
 (__pthread_key_delete): Correct incorrect prototype.
 (__pthread_setconcurrency): New function.
 (__pthread_setschedparam): New function.
 (__pthread_cond_timedwait): Support static mutex initialisers.
 (__pthread_cond_wait): Ditto.
 (__pthread_mutex_getprioceiling): New function.
 (__pthread_mutex_lock): Support static mutex initialisers.
 (__pthread_mutex_trylock): Ditto.
 (__pthread_mutex_unlock): Ditto.
 (__pthread_mutex_destroy): Ditto.
 (__pthread_mutex_setprioceiling): New function.
 (__pthread_mutexattr_getprotocol): New function.
 (__pthread_mutexattr_getpshared): New function.
 (__pthread_mutexattr_gettype): New function.
 (__pthread_mutexattr_init): New function.
 (__pthread_mutexattr_destroy): New function.
 (__pthread_mutexattr_setprotocol): New function.
 (__pthread_mutexattr_setprioceiling): New function.
 (__pthread_mutexattr_getprioceiling): New function.
 (__pthread_mutexattr_setpshared): New function.
 (__pthread_mutexattr_settype): New function.
 Remove stubs for non MT_SAFE compilation.
 thread.h: Run indent.
 Remove duplicate #defines.
 Add prototypes for new functions in thread.cc.
 (pthread_key_destructor): New class.
 (pthread_key_destructor_list): New class.
 (pthread_attr): Add new members.
 (pthread): Remove members that are duplicated in the pthread_attr
class.
 (pthread_mutex_attr): Add new members.
 (pthread_once): New class.
 include/pthread.h: Add prototypes for new functions exported from
cygwin1.dll.
 Run indent.
 Remove typedefs.
 include/sched.h: Add prototypes for new functions in sched.cc.
 include/cygwin/types.h: Add typedefs from pthread.h



------------=_1583532847-65438-40
Content-Type: text/plain; charset=us-ascii; name="pthread.ChangeLog"
Content-Disposition: inline; filename="pthread.ChangeLog"
Content-Transfer-Encoding: base64
Content-Length: 7137

VGh1cnMgQXByIDEyIDEwOjAyIDIwMDEgIFJvYmVydCBDb2xsaW5zIDxyYnRj
b2xsaW5zQGhvdG1haWwuY29tPgoKCSogY29uZmlndXJlLmluOiBSZW1vdmUg
UFRIX0FMTE9XLgoJKiBjeWd3aW4uZGluOiBSZW1vdmUgQFBUSF9BTExPV0Ag
cHJlZml4ZXMgdG8gcHRocmVhZCBmdW5jdGlvbnMuCgkodGhyZWFkX2F0dHJf
Z2V0ZGV0YWNoc3RhdGUpOiBOZXcgZXhwb3J0LgoJKHB0aHJlYWRfYXR0cl9n
ZXRkZXRhY2hzdGF0ZSk6IE5ldyBleHBvcnQuCgkocHRocmVhZF9hdHRyX2dl
dGluaGVyaXRzY2hlZCk6IE5ldyBleHBvcnQuCgkocHRocmVhZF9hdHRyX2dl
dHNjaGVkcGFyYW0pOiBOZXcgZXhwb3J0LgoJKHB0aHJlYWRfYXR0cl9nZXRz
Y2hlZHBvbGljeSk6IE5ldyBleHBvcnQuCgkocHRocmVhZF9hdHRyX2dldHNj
b3BlKTogTmV3IGV4cG9ydC4KCShwdGhyZWFkX2F0dHJfc2V0ZGV0YWNoc3Rh
dGUpOiBOZXcgZXhwb3J0LgoJKHB0aHJlYWRfYXR0cl9zZXRpbmhlcml0c2No
ZWQpOiBOZXcgZXhwb3J0LgoJKHB0aHJlYWRfYXR0cl9zZXRzY2hlZHBhcmFt
KTogTmV3IGV4cG9ydC4KCShwdGhyZWFkX2F0dHJfc2V0c2NoZWRwb2xpY3kp
OiBOZXcgZXhwb3J0LgoJKHB0aHJlYWRfYXR0cl9zZXRzY29wZSk6IE5ldyBl
eHBvcnQuCgkocHRocmVhZF9jYW5jZWwpOiBOZXcgZXhwb3J0LgoJKHB0aHJl
YWRfY3JlYXRlKTogTmV3IGV4cG9ydC4KCShwdGhyZWFkX2RldGFjaCk6IE5l
dyBleHBvcnQuCgkocHRocmVhZF9lcXVhbCk6IE5ldyBleHBvcnQuCgkocHRo
cmVhZF9leGl0KTogTmV3IGV4cG9ydC4KCShwdGhyZWFkX2dldGNvbmN1cnJl
bmN5KTogTmV3IGV4cG9ydC4KCShwdGhyZWFkX2dldHNjaGVkcGFyYW0pOiBO
ZXcgZXhwb3J0LgoJKHB0aHJlYWRfam9pbik6IE5ldyBleHBvcnQuCgkocHRo
cmVhZF9tdXRleF9nZXRwcmlvY2VpbGluZyk6IE5ldyBleHBvcnQuCgkocHRo
cmVhZF9tdXRleF9zZXRwcmlvY2VpbGluZyk6IE5ldyBleHBvcnQuCgkocHRo
cmVhZF9tdXRleGF0dHJfZGVzdHJveSk6IE5ldyBleHBvcnQuCgkocHRocmVh
ZF9tdXRleGF0dHJfZ2V0cHJpb2NlaWxpbmcpOiBOZXcgZXhwb3J0LgoJKHB0
aHJlYWRfbXV0ZXhhdHRyX2dldHByb3RvY29sKTogTmV3IGV4cG9ydC4KCShw
dGhyZWFkX211dGV4YXR0cl9nZXRwc2hhcmVkKTogTmV3IGV4cG9ydC4KCShw
dGhyZWFkX211dGV4YXR0cl9nZXR0eXBlKTogTmV3IGV4cG9ydC4KCShwdGhy
ZWFkX211dGV4YXR0cl9pbml0KTogTmV3IGV4cG9ydC4KCShwdGhyZWFkX211
dGV4YXR0cl9zZXRwcmlvY2VpbGluZyk6IE5ldyBleHBvcnQuCgkocHRocmVh
ZF9tdXRleGF0dHJfc2V0cHJvdG9jb2wpOiBOZXcgZXhwb3J0LgoJKHB0aHJl
YWRfbXV0ZXhhdHRyX3NldHBzaGFyZWQpOiBOZXcgZXhwb3J0LgoJKHB0aHJl
YWRfbXV0ZXhhdHRyX3NldHR5cGUpOiBOZXcgZXhwb3J0LgoJKHB0aHJlYWRf
b25jZSk6IE5ldyBleHBvcnQuCgkocHRocmVhZF9zZXRjYW5jZWxzdGF0ZSk6
IE5ldyBleHBvcnQuCgkocHRocmVhZF9zZXRjYW5jZWx0eXBlKTogTmV3IGV4
cG9ydC4KCShwdGhyZWFkX3NldGNvbmN1cnJlbmN5KTogTmV3IGV4cG9ydC4K
CShwdGhyZWFkX3NldHNjaGVkcGFyYW0pOiBOZXcgZXhwb3J0LgoJKHB0aHJl
YWRfdGVzdGNhbmNlbCk6IE5ldyBleHBvcnQuCglwdGhyZWFkLmNjOiBOZXcg
d3JhcHBlciBmdW5jdGlvbnMgZm9yIHRoZSBhYm92ZSBuZXcgZXhwb3J0cy4K
CXNjaGVkLmNjICh2YWxpZF9zY2hlZF9wYXJhbWV0ZXJzKTogTmV3IGZ1bmN0
aW9uLgoJKHNjaGVkX3NldHBhcmFtKTogVXNlIGl0LgoJKHNjaGVkX3NldF90
aHJlYWRfcHJpb3JpdHkpOiBOZXcgZnVuY3Rpb24uIFVzZWQgYnkgcHRocmVh
ZF9zY2hlZCouCgl0aHJlYWQuY2MgKHB0aHJlYWRfa2V5X2Rlc3RydWN0b3I6
Okluc2VydEFmdGVyKTogTmV3IGZ1bmN0aW9uLgoJKHB0aHJlYWRfa2V5X2Rl
c3RydWN0b3I6OlVubGlua05leHQpOiBOZXcgZnVuY3Rpb24uCgkocHRocmVh
ZF9rZXlfZGVzdHJ1Y3Rvcjo6TmV4dCk6IE5ldyBmdW5jdGlvbi4KCShwdGhy
ZWFkX2tleV9kZXN0cnVjdG9yX2xpc3Q6Okluc2VydCk6IE5ldyBmdW5jdGlv
bi4KCShwdGhyZWFkX2tleV9kZXN0cnVjdG9yX2xpc3Q6OlJlbW92ZSk6IE5l
dyBmdW5jdGlvbi4KCShwdGhyZWFkX2tleV9kZXN0cnVjdG9yX2xpc3Q6OlBv
cCk6IE5ldyBmdW5jdGlvbi4KCShwdGhyZWFkX2tleV9kZXN0cnVjdG9yOjpw
dGhyZWFkX2tleV9kZXN0cnVjdG9yKTogTmV3IGZ1bmN0aW9uLgoJKHB0aHJl
YWRfa2V5X2Rlc3RydWN0b3JfbGlzdDo6SXRlcmF0ZU51bGwpOiBOZXcgZnVu
Y3Rpb24uCgkoTVRpbnRlcmZhY2U6OkluaXQpOiBJbml0aWFsaXNlIG5ldyBt
ZW1iZXIuCgkocHRocmVhZDo6cHRocmVhZCk6IEluaXRpYWxpc2UgbmV3IG1l
bWJlcnMuCgkocHRocmVhZDo6Y3JlYXRlKTogQ29weSBuZXcgYXR0cmlidXRl
cy4gU2V0IHRoZSBuZXcgdGhyZWFkIHByaW9yaXR5LgoJKHB0aHJlYWRfYXR0
cjo6cHRocmVhZF9hdHRyKTogSW5pdGlhbGlzZSBuZXcgbWVtYmVycy4KCShw
dGhyZWFkX2tleTo6cHRocmVhZF9rZXkpOiBTZXR1cCBkZXN0cnVjdG9yIGZ1
bmN0aW9uLgoJKHB0aHJlYWRfa2V5Ojp+cHRocmVhZF9rZXkpOiBSZW1vdmUg
ZGVzdHJ1Y3RvciBmdW5jdGlvbi4KCShwdGhyZWFkX211dGV4YXR0cjo6cHRo
cmVhZF9tdXRleGF0dHIpOiBOZXcgZnVuY3Rpb24uCgkocHRocmVhZF9tdXRl
eGF0dHI6On5wdGhyZWFkX211dGV4YXR0cik6IE5ldyBmdW5jdGlvbi4KCShf
X3B0aHJlYWRfb25jZSk6IE5ldyBmdW5jdGlvbi4KCShfX3B0aHJlYWRfY2xl
YW51cCk6IE5ldyBmdW5jdGlvbi4gCgkoX19wdGhyZWFkX2NhbmNlbCk6IE5l
dyBmdW5jdGlvbi4KCShfX3B0aHJlYWRfc2V0Y2FuY2Vsc3RhdGUpOiBOZXcg
ZnVuY3Rpb24uCgkoX19wdGhyZWFkX3NldGNhbmNlbHR5cGUpOiBOZXcgZnVu
Y3Rpb24uCgkoX19wdGhyZWFkX3Rlc3RjYW5jZWwpOiBOZXcgZnVuY3Rpb24u
CgkoX19wdGhyZWFkX2F0dHJfZ2V0aW5oZXJpdHNjaGVkKTogTmV3IGZ1bmN0
aW9uLgoJKF9fcHRocmVhZF9hdHRyX2dldHNjaGVkcGFyYW0pOiBOZXcgZnVu
Y3Rpb24uCgkoX19wdGhyZWFkX2F0dHJfZ2V0c2NoZWRwb2xpY3kpOiBOZXcg
ZnVuY3Rpb24uCgkoX19wdGhyZWFkX2F0dHJfZ2V0c2NvcGUpOiBOZXcgZnVu
Y3Rpb24uCgkoX19wdGhyZWFkX2F0dHJfc2V0aW5oZXJpdHNjaGVkKTogTmV3
IGZ1bmN0aW9uLgoJKF9fcHRocmVhZF9hdHRyX3NldHNjaGVkcGFyYW0pOiBO
ZXcgZnVuY3Rpb24uCgkoX19wdGhyZWFkX2F0dHJfc2V0c2NoZWRwb2xpY3kp
OiBOZXcgZnVuY3Rpb24uCgkoX19wdGhyZWFkX2F0dHJfc2V0c2NvcGUpOiBO
ZXcgZnVuY3Rpb24uCgkoX19wdGhyZWFkX2V4aXQpOiBDYWxsIGFueSBrZXkg
ZGVzdHJ1Y3RvcnMgb24gdGhyZWFkIGV4aXQuCgkoX19wdGhyZWFkX2pvaW4p
OiBVc2UgdGhlIGVtYmVkZGVkIGF0dHIgdmFsdWVzLgoJKF9fcHRocmVhZF9k
ZXRhY2gpOiBVc2UgdGhlIGVtYmVkZGVkIGF0dHIgdmFsdWVzLgoJKF9fcHRo
cmVhZF9nZXRjb25jdXJyZW5jeSk6IE5ldyBmdW5jdGlvbi4KCShfX3B0aHJl
YWRfZ2V0c2NoZWRwYXJhbSk6IE5ldyBmdW5jdGlvbi4KCShfX3B0aHJlYWRf
a2V5X2NyZWF0ZSk6IFBhc3MgdGhlIGRlc3RydWN0b3Igb24gb2JqZWN0IGNy
ZWF0aW9uLgoJKF9fcHRocmVhZF9rZXlfZGVsZXRlKTogQ29ycmVjdCBpbmNv
cnJlY3QgcHJvdG90eXBlLgoJKF9fcHRocmVhZF9zZXRjb25jdXJyZW5jeSk6
IE5ldyBmdW5jdGlvbi4KCShfX3B0aHJlYWRfc2V0c2NoZWRwYXJhbSk6IE5l
dyBmdW5jdGlvbi4KCShfX3B0aHJlYWRfY29uZF90aW1lZHdhaXQpOiBTdXBw
b3J0IHN0YXRpYyBtdXRleCBpbml0aWFsaXNlcnMuCgkoX19wdGhyZWFkX2Nv
bmRfd2FpdCk6IERpdHRvLgoJKF9fcHRocmVhZF9tdXRleF9nZXRwcmlvY2Vp
bGluZyk6IE5ldyBmdW5jdGlvbi4KCShfX3B0aHJlYWRfbXV0ZXhfbG9jayk6
IFN1cHBvcnQgc3RhdGljIG11dGV4IGluaXRpYWxpc2Vycy4KCShfX3B0aHJl
YWRfbXV0ZXhfdHJ5bG9jayk6IERpdHRvLgoJKF9fcHRocmVhZF9tdXRleF91
bmxvY2spOiBEaXR0by4KCShfX3B0aHJlYWRfbXV0ZXhfZGVzdHJveSk6IERp
dHRvLgoJKF9fcHRocmVhZF9tdXRleF9zZXRwcmlvY2VpbGluZyk6IE5ldyBm
dW5jdGlvbi4KCShfX3B0aHJlYWRfbXV0ZXhhdHRyX2dldHByb3RvY29sKTog
TmV3IGZ1bmN0aW9uLgoJKF9fcHRocmVhZF9tdXRleGF0dHJfZ2V0cHNoYXJl
ZCk6IE5ldyBmdW5jdGlvbi4KCShfX3B0aHJlYWRfbXV0ZXhhdHRyX2dldHR5
cGUpOiBOZXcgZnVuY3Rpb24uCgkoX19wdGhyZWFkX211dGV4YXR0cl9pbml0
KTogTmV3IGZ1bmN0aW9uLgoJKF9fcHRocmVhZF9tdXRleGF0dHJfZGVzdHJv
eSk6IE5ldyBmdW5jdGlvbi4KCShfX3B0aHJlYWRfbXV0ZXhhdHRyX3NldHBy
b3RvY29sKTogTmV3IGZ1bmN0aW9uLgoJKF9fcHRocmVhZF9tdXRleGF0dHJf
c2V0cHJpb2NlaWxpbmcpOiBOZXcgZnVuY3Rpb24uCgkoX19wdGhyZWFkX211
dGV4YXR0cl9nZXRwcmlvY2VpbGluZyk6IE5ldyBmdW5jdGlvbi4KCShfX3B0
aHJlYWRfbXV0ZXhhdHRyX3NldHBzaGFyZWQpOiBOZXcgZnVuY3Rpb24uCgko
X19wdGhyZWFkX211dGV4YXR0cl9zZXR0eXBlKTogTmV3IGZ1bmN0aW9uLgoJ
UmVtb3ZlIHN0dWJzIGZvciBub24gTVRfU0FGRSBjb21waWxhdGlvbi4KCXRo
cmVhZC5oOiBSdW4gaW5kZW50LgoJUmVtb3ZlIGR1cGxpY2F0ZSAjZGVmaW5l
cy4KCUFkZCBwcm90b3R5cGVzIGZvciBuZXcgZnVuY3Rpb25zIGluIHRocmVh
ZC5jYy4KCShwdGhyZWFkX2tleV9kZXN0cnVjdG9yKTogTmV3IGNsYXNzLgoJ
KHB0aHJlYWRfa2V5X2Rlc3RydWN0b3JfbGlzdCk6IE5ldyBjbGFzcy4KCShw
dGhyZWFkX2F0dHIpOiBBZGQgbmV3IG1lbWJlcnMuCgkocHRocmVhZCk6IFJl
bW92ZSBtZW1iZXJzIHRoYXQgYXJlIGR1cGxpY2F0ZWQgaW4gdGhlIHB0aHJl
YWRfYXR0ciBjbGFzcy4KCShwdGhyZWFkX211dGV4X2F0dHIpOiBBZGQgbmV3
IG1lbWJlcnMuCgkocHRocmVhZF9vbmNlKTogTmV3IGNsYXNzLgoJaW5jbHVk
ZS9wdGhyZWFkLmg6IEFkZCBwcm90b3R5cGVzIGZvciBuZXcgZnVuY3Rpb25z
IGV4cG9ydGVkIGZyb20gY3lnd2luMS5kbGwuCglSdW4gaW5kZW50LgoJUmVt
b3ZlIHR5cGVkZWZzLgoJaW5jbHVkZS9zY2hlZC5oOiBBZGQgcHJvdG90eXBl
cyBmb3IgbmV3IGZ1bmN0aW9ucyBpbiBzY2hlZC5jYy4KCWluY2x1ZGUvY3ln
d2luL3R5cGVzLmg6IEFkZCB0eXBlZGVmcyBmcm9tIHB0aHJlYWQuaAoJCg==

------------=_1583532847-65438-40
Content-Type: text/x-diff; charset=us-ascii; name="pthread.patch"
Content-Disposition: inline; filename="pthread.patch"
Content-Transfer-Encoding: base64
Content-Length: 101533

SW5kZXg6IGNvbmZpZ3VyZS5pbgo9PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ClJD
UyBmaWxlOiAvY3ZzL3NyYy9zcmMvd2luc3VwL2N5Z3dpbi9jb25maWd1cmUu
aW4sdgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuNwpkaWZmIC11IC1wIC1yMS43
IGNvbmZpZ3VyZS5pbgotLS0gY29uZmlndXJlLmluCTIwMDAvMTIvMDMgMDU6
MTY6MzMJMS43CisrKyBjb25maWd1cmUuaW4JMjAwMS8wNC8xMiAwMDoyMzo1
NwpAQCAtMTE5LDcgKzExOSw2IEBAIEFDX0xBTkdfUkVTVE9SRQogZG5sIHNl
dCBkZWZhdWx0IG10IHNhZmVuZXNzIGFuZCB0aGVuIHByb2Nlc3MgdGhlIG9w
dGlvbnMuCiBtdF9zYWZlX3ZhbD0xCiBNVF9TQUZFPXllcwotUFRIX0FMTE9X
PScnCiAKIEFDX0FSR19FTkFCTEUodGhyZWFkc2FmZSwKIFsgLS1lbmFibGUt
dGhyZWFkc2FmZT1bcnVudGltZV0JQnVpbGQgYSBjeWd3aW4gRExMIHdoaWNo
IGlzIHRocmVhZCBzYWZlXSwKQEAgLTEzNCw3ICsxMzMsNiBAQCBydW50aW1l
KQogbm8pCiAgIG10X3NhZmVfdmFsPTAKICAgTVRfU0FGRT1ubwotICBQVEhf
QUxMT1c9JzsnCiAgIDs7CiBlc2FjCiBdKQpAQCAtMTU5LDcgKzE1Nyw2IEBA
IGZpCiAKIGRubCBNYWtlZmlsZSB1c2VzIE1UX1NBRkUsIHNvIHdlIHN1YnN0
IGFzIHdlbGwgYXMgZGVmaW5pbmcgaXQuCiBBQ19TVUJTVChNVF9TQUZFKQot
QUNfU1VCU1QoUFRIX0FMTE9XKQogCiBBQ19BUkdfRU5BQkxFKGRlYnVnZ2lu
ZywKIFsgLS1lbmFibGUtZGVidWdnaW5nCQlCdWlsZCBhIGN5Z3dpbiBETEwg
d2hpY2ggaGFzIG1vcmUgY29uc2lzdGVuY3kgY2hlY2tpbmcgZm9yIGRlYnVn
Z2luZ10sCkluZGV4OiBjeWd3aW4uZGluCj09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0KUkNTIGZpbGU6IC9jdnMvc3JjL3NyYy93aW5zdXAvY3lnd2luL2N5Z3dp
bi5kaW4sdgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMjQKZGlmZiAtdSAtcCAt
cjEuMjQgY3lnd2luLmRpbgotLS0gY3lnd2luLmRpbgkyMDAxLzA0LzA5IDAw
OjQ0OjI1CTEuMjQKKysrIGN5Z3dpbi5kaW4JMjAwMS8wNC8xMiAwMDoyMzo1
OQpAQCAtNDk4LDYgKzQ5OCw3IEBAIG1lbXNldAogX21lbXNldCA9IG1lbXNl
dAogbWtkaXIKIF9ta2RpciA9IG1rZGlyCitta2ZpZm8KIG1rbm9kCiBfbWtu
b2QgPSBta25vZAogbWtzdGVtcApAQCAtMTA3NSw0NCArMTA3Niw3NSBAQCBj
eWd3aW5fYXR0YWNoX2hhbmRsZV90b19mZAogY3lnd2luMzJfYXR0YWNoX2hh
bmRsZV90b19mZCA9IGN5Z3dpbl9hdHRhY2hfaGFuZGxlX3RvX2ZkCiBjeWd3
aW5faW50ZXJuYWwKIGN5Z3dpbjMyX2ludGVybmFsID0gY3lnd2luX2ludGVy
bmFsCi1AUFRIX0FMTE9XQHB0aHJlYWRfY3JlYXRlCi1AUFRIX0FMTE9XQHB0
aHJlYWRfYXR0cl9pbml0Ci1AUFRIX0FMTE9XQHB0aHJlYWRfYXR0cl9kZXN0
cm95Ci1AUFRIX0FMTE9XQHB0aHJlYWRfYXR0cl9zZXRzdGFja3NpemUKLUBQ
VEhfQUxMT1dAcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZQotQFBUSF9BTExP
V0BwdGhyZWFkX2V4aXQKLUBQVEhfQUxMT1dAcHRocmVhZF9qb2luCi1AUFRI
X0FMTE9XQHB0aHJlYWRfZGV0YWNoCi1AUFRIX0FMTE9XQHB0aHJlYWRfc3Vz
cGVuZAotQFBUSF9BTExPV0BwdGhyZWFkX2NvbnRpbnVlCi1AUFRIX0FMTE9X
QHB0aHJlYWRfa2V5X2NyZWF0ZQotQFBUSF9BTExPV0BwdGhyZWFkX2tleV9k
ZWxldGUKLUBQVEhfQUxMT1dAcHRocmVhZF9zZXRzcGVjaWZpYwotQFBUSF9B
TExPV0BwdGhyZWFkX2dldHNwZWNpZmljCi1AUFRIX0FMTE9XQHB0aHJlYWRf
a2lsbAotQFBUSF9BTExPV0BwdGhyZWFkX3NpZ21hc2sKLUBQVEhfQUxMT1dA
cHRocmVhZF9zZWxmCi1AUFRIX0FMTE9XQHB0aHJlYWRfZXF1YWwKLUBQVEhf
QUxMT1dAcHRocmVhZF9tdXRleF9pbml0Ci1AUFRIX0FMTE9XQHB0aHJlYWRf
bXV0ZXhfbG9jawotQFBUSF9BTExPV0BwdGhyZWFkX211dGV4X3RyeWxvY2sK
LUBQVEhfQUxMT1dAcHRocmVhZF9tdXRleF91bmxvY2sKLUBQVEhfQUxMT1dA
cHRocmVhZF9tdXRleF9kZXN0cm95Ci1AUFRIX0FMTE9XQHB0aHJlYWRfY29u
ZF9pbml0Ci1AUFRIX0FMTE9XQHB0aHJlYWRfY29uZF9kZXN0cm95Ci1AUFRI
X0FMTE9XQHB0aHJlYWRfY29uZF9icm9hZGNhc3QKLUBQVEhfQUxMT1dAcHRo
cmVhZF9jb25kX3NpZ25hbAotQFBUSF9BTExPV0BwdGhyZWFkX2NvbmRfd2Fp
dAotQFBUSF9BTExPV0BwdGhyZWFkX2NvbmRfdGltZWR3YWl0Ci1AUFRIX0FM
TE9XQHB0aHJlYWRfY29uZGF0dHJfaW5pdAotQFBUSF9BTExPV0BwdGhyZWFk
X2NvbmRhdHRyX2Rlc3Ryb3kKLUBQVEhfQUxMT1dAcHRocmVhZF9jb25kYXR0
cl9nZXRwc2hhcmVkCi1AUFRIX0FMTE9XQHB0aHJlYWRfY29uZGF0dHJfc2V0
cHNoYXJlZAotQFBUSF9BTExPV0BzZW1faW5pdAotQFBUSF9BTExPV0BzZW1f
ZGVzdHJveQotQFBUSF9BTExPV0BzZW1fd2FpdAotQFBUSF9BTExPV0BzZW1f
dHJ5d2FpdAotQFBUSF9BTExPV0BzZW1fcG9zdAorcHRocmVhZF9hdHRyX2Rl
c3Ryb3kKK3B0aHJlYWRfYXR0cl9nZXRkZXRhY2hzdGF0ZQorcHRocmVhZF9h
dHRyX2dldGluaGVyaXRzY2hlZAorcHRocmVhZF9hdHRyX2dldHNjaGVkcGFy
YW0KK3B0aHJlYWRfYXR0cl9nZXRzY2hlZHBvbGljeQorcHRocmVhZF9hdHRy
X2dldHNjb3BlCitwdGhyZWFkX2F0dHJfZ2V0c3RhY2tzaXplCitwdGhyZWFk
X2F0dHJfaW5pdAorcHRocmVhZF9hdHRyX3NldGRldGFjaHN0YXRlCitwdGhy
ZWFkX2F0dHJfc2V0aW5oZXJpdHNjaGVkCitwdGhyZWFkX2F0dHJfc2V0c2No
ZWRwYXJhbQorcHRocmVhZF9hdHRyX3NldHNjaGVkcG9saWN5CitwdGhyZWFk
X2F0dHJfc2V0c2NvcGUKK3B0aHJlYWRfYXR0cl9zZXRzdGFja3NpemUKK3B0
aHJlYWRfY2FuY2VsCitwdGhyZWFkX2NvbmRfYnJvYWRjYXN0CitwdGhyZWFk
X2NvbmRfZGVzdHJveQorcHRocmVhZF9jb25kX2luaXQKK3B0aHJlYWRfY29u
ZF9zaWduYWwKK3B0aHJlYWRfY29uZF90aW1lZHdhaXQKK3B0aHJlYWRfY29u
ZF93YWl0CitwdGhyZWFkX2NvbmRhdHRyX2Rlc3Ryb3kKK3B0aHJlYWRfY29u
ZGF0dHJfZ2V0cHNoYXJlZAorcHRocmVhZF9jb25kYXR0cl9pbml0CitwdGhy
ZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQKK3B0aHJlYWRfY3JlYXRlCitwdGhy
ZWFkX2RldGFjaAorcHRocmVhZF9lcXVhbAorcHRocmVhZF9leGl0CitwdGhy
ZWFkX2dldGNvbmN1cnJlbmN5CitwdGhyZWFkX2dldHNjaGVkcGFyYW0KK3B0
aHJlYWRfZ2V0c3BlY2lmaWMKK3B0aHJlYWRfam9pbgorcHRocmVhZF9rZXlf
Y3JlYXRlCitwdGhyZWFkX2tleV9kZWxldGUKK3B0aHJlYWRfbXV0ZXhfZGVz
dHJveQorcHRocmVhZF9tdXRleF9nZXRwcmlvY2VpbGluZworcHRocmVhZF9t
dXRleF9pbml0CitwdGhyZWFkX211dGV4X2xvY2sKK3B0aHJlYWRfbXV0ZXhf
c2V0cHJpb2NlaWxpbmcKK3B0aHJlYWRfbXV0ZXhfdHJ5bG9jaworcHRocmVh
ZF9tdXRleF91bmxvY2sKK3B0aHJlYWRfbXV0ZXhhdHRyX2Rlc3Ryb3kKK3B0
aHJlYWRfbXV0ZXhhdHRyX2dldHByaW9jZWlsaW5nCitwdGhyZWFkX211dGV4
YXR0cl9nZXRwcm90b2NvbAorcHRocmVhZF9tdXRleGF0dHJfZ2V0cHNoYXJl
ZAorcHRocmVhZF9tdXRleGF0dHJfZ2V0dHlwZQorcHRocmVhZF9tdXRleGF0
dHJfaW5pdAorcHRocmVhZF9tdXRleGF0dHJfc2V0cHJpb2NlaWxpbmcKK3B0
aHJlYWRfbXV0ZXhhdHRyX3NldHByb3RvY29sCitwdGhyZWFkX211dGV4YXR0
cl9zZXRwc2hhcmVkCitwdGhyZWFkX211dGV4YXR0cl9zZXR0eXBlCitwdGhy
ZWFkX29uY2UKK3B0aHJlYWRfc2VsZgorcHRocmVhZF9zZXRjYW5jZWxzdGF0
ZQorcHRocmVhZF9zZXRjYW5jZWx0eXBlCitwdGhyZWFkX3NldGNvbmN1cnJl
bmN5CitwdGhyZWFkX3NldHNjaGVkcGFyYW0KK3B0aHJlYWRfc2V0c3BlY2lm
aWMKK3B0aHJlYWRfdGVzdGNhbmNlbAorcHRocmVhZF9zdXNwZW5kCitwdGhy
ZWFkX2NvbnRpbnVlCitwdGhyZWFkX2tpbGwKK3B0aHJlYWRfc2lnbWFzawor
c2VtX2luaXQKK3NlbV9kZXN0cm95CitzZW1fd2FpdAorc2VtX3RyeXdhaXQK
K3NlbV9wb3N0CiBzY2hlZF9nZXRfcHJpb3JpdHlfbWF4CiBzY2hlZF9nZXRf
cHJpb3JpdHlfbWluCiBzY2hlZF9nZXRwYXJhbQpJbmRleDogcHRocmVhZC5j
Ywo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvY3ZzL3NyYy9z
cmMvd2luc3VwL2N5Z3dpbi9wdGhyZWFkLmNjLHYKcmV0cmlldmluZyByZXZp
c2lvbiAxLjcKZGlmZiAtdSAtcCAtcjEuNyBwdGhyZWFkLmNjCi0tLSBwdGhy
ZWFkLmNjCTIwMDEvMDQvMDkgMDA6NDQ6MjUJMS43CisrKyBwdGhyZWFkLmNj
CTIwMDEvMDQvMTIgMDA6MjM6NTkKQEAgLTE3LDExMSArMTcsMTkzIEBAIGV4
dGVybiAiQyIKIHsKIC8qICBUaHJlYWRDcmVhdGlvbiAqLwogaW50Ci0gIHB0
aHJlYWRfY3JlYXRlIChwdGhyZWFkX3QgKiB0aHJlYWQsIGNvbnN0IHB0aHJl
YWRfYXR0cl90ICogYXR0ciwKLQkJICB2b2lkICooKnN0YXJ0X3JvdXRpbmUp
ICh2b2lkICopLCB2b2lkICphcmcpCitwdGhyZWFkX2NyZWF0ZSAocHRocmVh
ZF90ICogdGhyZWFkLCBjb25zdCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsCisJ
CXZvaWQgKigqc3RhcnRfcm91dGluZSkgKHZvaWQgKiksIHZvaWQgKmFyZykK
IHsKICAgcmV0dXJuIF9fcHRocmVhZF9jcmVhdGUgKHRocmVhZCwgYXR0ciwg
c3RhcnRfcm91dGluZSwgYXJnKTsKIH0KIAotaW50IHB0aHJlYWRfYXR0cl9p
bml0IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIpCitpbnQKK3B0aHJlYWRfb25j
ZSAocHRocmVhZF9vbmNlX3QgKiBvbmNlX2NvbnRyb2wsIHZvaWQgKCppbml0
X3JvdXRpbmUpICh2b2lkKSkKK3sKKyAgcmV0dXJuIF9fcHRocmVhZF9vbmNl
IChvbmNlX2NvbnRyb2wsIGluaXRfcm91dGluZSk7Cit9CisKK2ludAorcHRo
cmVhZF9hdHRyX2luaXQgKHB0aHJlYWRfYXR0cl90ICogYXR0cikKIHsKICAg
cmV0dXJuIF9fcHRocmVhZF9hdHRyX2luaXQgKGF0dHIpOwogfQogCi1pbnQg
cHRocmVhZF9hdHRyX2Rlc3Ryb3kgKHB0aHJlYWRfYXR0cl90ICogYXR0cikK
K2ludAorcHRocmVhZF9hdHRyX2Rlc3Ryb3kgKHB0aHJlYWRfYXR0cl90ICog
YXR0cikKIHsKICAgcmV0dXJuIF9fcHRocmVhZF9hdHRyX2Rlc3Ryb3kgKGF0
dHIpOwogfQogCi1pbnQgcHRocmVhZF9hdHRyX3NldGRldGFjaHN0YXRlIChw
dGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCBkZXRhY2hzdGF0ZSkKK2ludAor
cHRocmVhZF9hdHRyX3NldGRldGFjaHN0YXRlIChwdGhyZWFkX2F0dHJfdCAq
IGF0dHIsIGludCBkZXRhY2hzdGF0ZSkKIHsKICAgcmV0dXJuIF9fcHRocmVh
ZF9hdHRyX3NldGRldGFjaHN0YXRlIChhdHRyLCBkZXRhY2hzdGF0ZSk7CiB9
CiAKIGludAotICBwdGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUgKGNvbnN0
IHB0aHJlYWRfYXR0cl90ICogYXR0ciwKLQkJCSAgICAgICBpbnQgKmRldGFj
aHN0YXRlKQorcHRocmVhZF9hdHRyX2dldGRldGFjaHN0YXRlIChjb25zdCBw
dGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCAqZGV0YWNoc3RhdGUpCiB7CiAg
IHJldHVybiBfX3B0aHJlYWRfYXR0cl9nZXRkZXRhY2hzdGF0ZSAoYXR0ciwg
ZGV0YWNoc3RhdGUpOwogfQogCiAKLWludCBwdGhyZWFkX2F0dHJfc2V0c3Rh
Y2tzaXplIChwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIHNpemVfdCBzaXplKQor
aW50CitwdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChwdGhyZWFkX2F0dHJf
dCAqIGF0dHIsIHNpemVfdCBzaXplKQogewogICByZXR1cm4gX19wdGhyZWFk
X2F0dHJfc2V0c3RhY2tzaXplIChhdHRyLCBzaXplKTsKIH0KIAotaW50IHB0
aHJlYWRfYXR0cl9nZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICogYXR0
ciwgc2l6ZV90ICogc2l6ZSkKK2ludAorcHRocmVhZF9hdHRyX2dldHN0YWNr
c2l6ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiBhdHRyLCBzaXplX3QgKiBz
aXplKQogewogICByZXR1cm4gX19wdGhyZWFkX2F0dHJfZ2V0c3RhY2tzaXpl
IChhdHRyLCBzaXplKTsKIH0KIAoraW50CitwdGhyZWFkX2F0dHJfc2V0aW5o
ZXJpdHNjaGVkIChwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCBpbmhlcml0
c2NoZWQpCit7CisgIHJldHVybiBfX3B0aHJlYWRfYXR0cl9zZXRpbmhlcml0
c2NoZWQgKGF0dHIsIGluaGVyaXRzY2hlZCk7Cit9CisKK2ludAorcHRocmVh
ZF9hdHRyX2dldGluaGVyaXRzY2hlZCAoY29uc3QgcHRocmVhZF9hdHRyX3Qg
KiBhdHRyLCBpbnQgKmluaGVyaXRzY2hlZCkKK3sKKyAgcmV0dXJuIF9fcHRo
cmVhZF9hdHRyX2dldGluaGVyaXRzY2hlZCAoYXR0ciwgaW5oZXJpdHNjaGVk
KTsKK30KKworaW50CitwdGhyZWFkX2F0dHJfc2V0c2NoZWRwYXJhbSAocHRo
cmVhZF9hdHRyX3QgKiBhdHRyLAorCQkJICAgIGNvbnN0IHN0cnVjdCBzY2hl
ZF9wYXJhbSAqcGFyYW0pCit7CisgIHJldHVybiBfX3B0aHJlYWRfYXR0cl9z
ZXRzY2hlZHBhcmFtIChhdHRyLCBwYXJhbSk7Cit9CisKK2ludAorcHRocmVh
ZF9hdHRyX2dldHNjaGVkcGFyYW0gKGNvbnN0IHB0aHJlYWRfYXR0cl90ICog
YXR0ciwKKwkJCSAgICBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKnBhcmFtKQorewor
ICByZXR1cm4gX19wdGhyZWFkX2F0dHJfZ2V0c2NoZWRwYXJhbSAoYXR0ciwg
cGFyYW0pOworfQorCitpbnQKK3B0aHJlYWRfYXR0cl9zZXRzY2hlZHBvbGlj
eSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCBpbnQgcG9saWN5KQoreworICBy
ZXR1cm4gX19wdGhyZWFkX2F0dHJfc2V0c2NoZWRwb2xpY3kgKGF0dHIsIHBv
bGljeSk7Cit9CisKK2ludAorcHRocmVhZF9hdHRyX2dldHNjaGVkcG9saWN5
IChjb25zdCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCAqcG9saWN5KQor
eworICByZXR1cm4gX19wdGhyZWFkX2F0dHJfZ2V0c2NoZWRwb2xpY3kgKGF0
dHIsIHBvbGljeSk7Cit9CisKK2ludAorcHRocmVhZF9hdHRyX3NldHNjb3Bl
IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCBjb250ZW50aW9uc2NvcGUp
Cit7CisgIHJldHVybiBfX3B0aHJlYWRfYXR0cl9zZXRzY29wZSAoYXR0ciwg
Y29udGVudGlvbnNjb3BlKTsKK30KKworaW50CitwdGhyZWFkX2F0dHJfZ2V0
c2NvcGUgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0ciwgaW50ICpjb250
ZW50aW9uc2NvcGUpCit7CisgIHJldHVybiBfX3B0aHJlYWRfYXR0cl9nZXRz
Y29wZSAoYXR0ciwgY29udGVudGlvbnNjb3BlKTsKK30KKworI2lmZGVmIF9Q
T1NJWF9USFJFQURfQVRUUl9TVEFDS0FERFIKK2ludAorcHRocmVhZF9hdHRy
X3NldHN0YWNrYWRkciAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCB2b2lkICpz
dGFja2FkZHIpCit7CisgIHJldHVybiBfX3B0aHJlYWRfYXR0cl9zZXRzdGFj
a2FkZHIgKGF0dHIsIHN0YWNrYWRkcik7Cit9CiAKLS8qCi0gcHRocmVhZF9h
dHRyX3NldHN0YWNrYWRkciguLi4pe307Ci0gcHRocmVhZF9hdHRyX2dldHN0
YWNrYWRkciguLi4pe307Ci0qLworaW50CitwdGhyZWFkX2F0dHJfZ2V0c3Rh
Y2thZGRyIChjb25zdCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIHZvaWQgKipz
dGFja2FkZHIpCit7CisgIHJldHVybiBfX3B0aHJlYWRfYXR0cl9nZXRzdGFj
a2FkZHIgKGF0dHIsIHN0YWNrYWRkcik7Cit9CisjZW5kaWYKIAogLyogVGhy
ZWFkIEV4aXQgKi8KLXZvaWQgcHRocmVhZF9leGl0ICh2b2lkICp2YWx1ZV9w
dHIpCit2b2lkCitwdGhyZWFkX2V4aXQgKHZvaWQgKnZhbHVlX3B0cikKIHsK
ICAgcmV0dXJuIF9fcHRocmVhZF9leGl0ICh2YWx1ZV9wdHIpOwogfQogCi1p
bnQgcHRocmVhZF9qb2luIChwdGhyZWFkX3QgdGhyZWFkLCB2b2lkICoqcmV0
dXJuX3ZhbCkKK2ludAorcHRocmVhZF9qb2luIChwdGhyZWFkX3QgdGhyZWFk
LCB2b2lkICoqcmV0dXJuX3ZhbCkKIHsKICAgcmV0dXJuIF9fcHRocmVhZF9q
b2luICgmdGhyZWFkLCAodm9pZCAqKikgcmV0dXJuX3ZhbCk7CiB9CiAKLWlu
dCBwdGhyZWFkX2RldGFjaCAocHRocmVhZF90IHRocmVhZCkKK2ludAorcHRo
cmVhZF9kZXRhY2ggKHB0aHJlYWRfdCB0aHJlYWQpCiB7CiAgIHJldHVybiBf
X3B0aHJlYWRfZGV0YWNoICgmdGhyZWFkKTsKIH0KKwogCi1pbnQgcHRocmVh
ZF9zdXNwZW5kIChwdGhyZWFkX3QgdGhyZWFkKQorLyogVGhpcyBpc24ndCBh
IHBvc2l4IGNhbGwuLi4gc2hvdWxkIHdlIGtlZXAgaXQ/ICovCitpbnQKK3B0
aHJlYWRfc3VzcGVuZCAocHRocmVhZF90IHRocmVhZCkKIHsKICAgcmV0dXJu
IF9fcHRocmVhZF9zdXNwZW5kICgmdGhyZWFkKTsKIH0KIAotaW50IHB0aHJl
YWRfY29udGludWUgKHB0aHJlYWRfdCB0aHJlYWQpCisvKiBzYW1lICovCitp
bnQKK3B0aHJlYWRfY29udGludWUgKHB0aHJlYWRfdCB0aHJlYWQpCiB7CiAg
IHJldHVybiBfX3B0aHJlYWRfY29udGludWUgKCZ0aHJlYWQpOwogfQogCi11
bnNpZ25lZCBsb25nIHB0aHJlYWRfZ2V0c2VxdWVuY2VfbnAgKHB0aHJlYWRf
dCAqIHRocmVhZCkKK3Vuc2lnbmVkIGxvbmcKK3B0aHJlYWRfZ2V0c2VxdWVu
Y2VfbnAgKHB0aHJlYWRfdCAqIHRocmVhZCkKIHsKICAgcmV0dXJuIF9fcHRo
cmVhZF9nZXRzZXF1ZW5jZV9ucCAodGhyZWFkKTsKIH0KIAogLyogVGhyZWFk
IFNwZWNpZmljRGF0YSAqLwotaW50IHB0aHJlYWRfa2V5X2NyZWF0ZSAocHRo
cmVhZF9rZXlfdCAqIGtleSwgdm9pZCAoKmRlc3RydWN0b3IpICh2b2lkICop
KQoraW50CitwdGhyZWFkX2tleV9jcmVhdGUgKHB0aHJlYWRfa2V5X3QgKiBr
ZXksIHZvaWQgKCpkZXN0cnVjdG9yKSAodm9pZCAqKSkKIHsKICAgcmV0dXJu
IF9fcHRocmVhZF9rZXlfY3JlYXRlIChrZXksIGRlc3RydWN0b3IpOwogfQog
Ci1pbnQgcHRocmVhZF9rZXlfZGVsZXRlIChwdGhyZWFkX2tleV90ICoga2V5
KQoraW50CitwdGhyZWFkX2tleV9kZWxldGUgKHB0aHJlYWRfa2V5X3Qga2V5
KQogewogICByZXR1cm4gX19wdGhyZWFkX2tleV9kZWxldGUgKGtleSk7CiB9
CiAKLWludCBwdGhyZWFkX3NldHNwZWNpZmljIChwdGhyZWFkX2tleV90IGtl
eSwgY29uc3Qgdm9pZCAqdmFsdWUpCitpbnQKK3B0aHJlYWRfc2V0c3BlY2lm
aWMgKHB0aHJlYWRfa2V5X3Qga2V5LCBjb25zdCB2b2lkICp2YWx1ZSkKIHsK
ICAgcmV0dXJuIF9fcHRocmVhZF9zZXRzcGVjaWZpYyAoa2V5LCB2YWx1ZSk7
CiB9CiAKLXZvaWQgKnB0aHJlYWRfZ2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5
X3Qga2V5KQordm9pZCAqCitwdGhyZWFkX2dldHNwZWNpZmljIChwdGhyZWFk
X2tleV90IGtleSkKIHsKICAgcmV0dXJuICh2b2lkICopIF9fcHRocmVhZF9n
ZXRzcGVjaWZpYyAoa2V5KTsKIH0KIAogLyogVGhyZWFkIHNpZ25hbCAqLwot
aW50IHB0aHJlYWRfa2lsbCAocHRocmVhZF90ICogdGhyZWFkLCBpbnQgc2ln
KQoraW50CitwdGhyZWFkX2tpbGwgKHB0aHJlYWRfdCB0aHJlYWQsIGludCBz
aWcpCiB7CiAgIHJldHVybiBfX3B0aHJlYWRfa2lsbCAodGhyZWFkLCBzaWcp
OwogfQogCiBpbnQKLSAgcHRocmVhZF9zaWdtYXNrIChpbnQgb3BlcmF0aW9u
LCBjb25zdCBzaWdzZXRfdCAqIHNldCwgc2lnc2V0X3QgKiBvbGRfc2V0KQor
cHRocmVhZF9zaWdtYXNrIChpbnQgb3BlcmF0aW9uLCBjb25zdCBzaWdzZXRf
dCAqIHNldCwgc2lnc2V0X3QgKiBvbGRfc2V0KQogewogICByZXR1cm4gX19w
dGhyZWFkX3NpZ21hc2sgKG9wZXJhdGlvbiwgc2V0LCBvbGRfc2V0KTsKIH0K
QEAgLTEzMywxMjAgKzIxNSwyNzMgQEAgcHRocmVhZF90IHB0aHJlYWRfc2Vs
ZiAoKQogICByZXR1cm4gX19wdGhyZWFkX3NlbGYgKCk7CiB9CiAKLWludCBw
dGhyZWFkX2VxdWFsIChwdGhyZWFkX3QgdDEsIHB0aHJlYWRfdCB0MikKK2lu
dAorcHRocmVhZF9lcXVhbCAocHRocmVhZF90IHQxLCBwdGhyZWFkX3QgdDIp
CiB7CiAgIHJldHVybiBfX3B0aHJlYWRfZXF1YWwgKCZ0MSwgJnQyKTsKIH0K
IAogLyogTXV0ZXhlcyAgKi8KIGludAotICBwdGhyZWFkX211dGV4X2luaXQg
KHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4LAotCQkgICAgICBjb25zdCBwdGhy
ZWFkX211dGV4YXR0cl90ICogYXR0cikKK3B0aHJlYWRfbXV0ZXhfaW5pdCAo
cHRocmVhZF9tdXRleF90ICogbXV0ZXgsIGNvbnN0IHB0aHJlYWRfbXV0ZXhh
dHRyX3QgKiBhdHRyKQogewogICByZXR1cm4gX19wdGhyZWFkX211dGV4X2lu
aXQgKG11dGV4LCBhdHRyKTsKIH0KIAotaW50IHB0aHJlYWRfbXV0ZXhfbG9j
ayAocHRocmVhZF9tdXRleF90ICogbXV0ZXgpCitpbnQKK3B0aHJlYWRfbXV0
ZXhfbG9jayAocHRocmVhZF9tdXRleF90ICogbXV0ZXgpCiB7CiAgIHJldHVy
biBfX3B0aHJlYWRfbXV0ZXhfbG9jayAobXV0ZXgpOwogfQogCi1pbnQgcHRo
cmVhZF9tdXRleF90cnlsb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleCkK
K2ludAorcHRocmVhZF9tdXRleF90cnlsb2NrIChwdGhyZWFkX211dGV4X3Qg
KiBtdXRleCkKIHsKICAgcmV0dXJuIF9fcHRocmVhZF9tdXRleF90cnlsb2Nr
IChtdXRleCk7CiB9CiAKLWludCBwdGhyZWFkX211dGV4X3VubG9jayAocHRo
cmVhZF9tdXRleF90ICogbXV0ZXgpCitpbnQKK3B0aHJlYWRfbXV0ZXhfdW5s
b2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleCkKIHsKICAgcmV0dXJuIF9f
cHRocmVhZF9tdXRleF91bmxvY2sgKG11dGV4KTsKIH0KIAotaW50IHB0aHJl
YWRfbXV0ZXhfZGVzdHJveSAocHRocmVhZF9tdXRleF90ICogbXV0ZXgpCitp
bnQKK3B0aHJlYWRfbXV0ZXhfZGVzdHJveSAocHRocmVhZF9tdXRleF90ICog
bXV0ZXgpCiB7CiAgIHJldHVybiBfX3B0aHJlYWRfbXV0ZXhfZGVzdHJveSAo
bXV0ZXgpOwogfQogCitpbnQKK3B0aHJlYWRfbXV0ZXhfc2V0cHJpb2NlaWxp
bmcgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4LAorCQkJICAgICAgaW50IHBy
aW9jZWlsaW5nLCBpbnQgKm9sZF9jZWlsaW5nKQoreworICByZXR1cm4gX19w
dGhyZWFkX211dGV4X3NldHByaW9jZWlsaW5nIChtdXRleCwgcHJpb2NlaWxp
bmcsIG9sZF9jZWlsaW5nKTsKK30KKworaW50CitwdGhyZWFkX211dGV4X2dl
dHByaW9jZWlsaW5nIChjb25zdCBwdGhyZWFkX211dGV4X3QgKiBtdXRleCwg
aW50ICpwcmlvY2VpbGluZykKK3sKKyAgcmV0dXJuIF9fcHRocmVhZF9tdXRl
eF9nZXRwcmlvY2VpbGluZyAobXV0ZXgsIHByaW9jZWlsaW5nKTsKK30KKwor
CisKK2ludAorcHRocmVhZF9tdXRleGF0dHJfZGVzdHJveSAocHRocmVhZF9t
dXRleGF0dHJfdCAqIGF0dHIpCit7CisgIHJldHVybiBfX3B0aHJlYWRfbXV0
ZXhhdHRyX2Rlc3Ryb3kgKGF0dHIpOworfQorCitpbnQKK3B0aHJlYWRfbXV0
ZXhhdHRyX2dldHByaW9jZWlsaW5nIChjb25zdCBwdGhyZWFkX211dGV4YXR0
cl90ICogYXR0ciwKKwkJCQkgIGludCAqcHJpb2NlaWxpbmcpCit7CisgIHJl
dHVybiBfX3B0aHJlYWRfbXV0ZXhhdHRyX2dldHByaW9jZWlsaW5nIChhdHRy
LCBwcmlvY2VpbGluZyk7Cit9CisKK2ludAorcHRocmVhZF9tdXRleGF0dHJf
Z2V0cHJvdG9jb2wgKGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKiBhdHRy
LAorCQkJICAgICAgIGludCAqcHJvdG9jb2wpCit7CisgIHJldHVybiBfX3B0
aHJlYWRfbXV0ZXhhdHRyX2dldHByb3RvY29sIChhdHRyLCBwcm90b2NvbCk7
Cit9CisKK2ludAorcHRocmVhZF9tdXRleGF0dHJfZ2V0cHNoYXJlZCAoY29u
c3QgcHRocmVhZF9tdXRleGF0dHJfdCAqIGF0dHIsIGludCAqcHNoYXJlZCkK
K3sKKyAgcmV0dXJuIF9fcHRocmVhZF9tdXRleGF0dHJfZ2V0cHNoYXJlZCAo
YXR0ciwgcHNoYXJlZCk7Cit9CisKK2ludAorcHRocmVhZF9tdXRleGF0dHJf
Z2V0dHlwZSAoY29uc3QgcHRocmVhZF9tdXRleGF0dHJfdCAqIGF0dHIsIGlu
dCAqdHlwZSkKK3sKKyAgcmV0dXJuIF9fcHRocmVhZF9tdXRleGF0dHJfZ2V0
dHlwZSAoYXR0ciwgdHlwZSk7Cit9CisKK2ludAorcHRocmVhZF9tdXRleGF0
dHJfaW5pdCAocHRocmVhZF9tdXRleGF0dHJfdCAqIGF0dHIpCit7CisgIHJl
dHVybiBfX3B0aHJlYWRfbXV0ZXhhdHRyX2luaXQgKGF0dHIpOworfQorCitp
bnQKK3B0aHJlYWRfbXV0ZXhhdHRyX3NldHByaW9jZWlsaW5nIChwdGhyZWFk
X211dGV4YXR0cl90ICogYXR0ciwgaW50IHByaW9jZWlsaW5nKQoreworICBy
ZXR1cm4gX19wdGhyZWFkX211dGV4YXR0cl9zZXRwcmlvY2VpbGluZyAoYXR0
ciwgcHJpb2NlaWxpbmcpOworfQorCitpbnQKK3B0aHJlYWRfbXV0ZXhhdHRy
X3NldHByb3RvY29sIChwdGhyZWFkX211dGV4YXR0cl90ICogYXR0ciwgaW50
IHByb3RvY29sKQoreworICByZXR1cm4gX19wdGhyZWFkX211dGV4YXR0cl9z
ZXRwcm90b2NvbCAoYXR0ciwgcHJvdG9jb2wpOworfQorCitpbnQKK3B0aHJl
YWRfbXV0ZXhhdHRyX3NldHBzaGFyZWQgKHB0aHJlYWRfbXV0ZXhhdHRyX3Qg
KiBhdHRyLCBpbnQgcHNoYXJlZCkKK3sKKyAgcmV0dXJuIF9fcHRocmVhZF9t
dXRleGF0dHJfc2V0cHNoYXJlZCAoYXR0ciwgcHNoYXJlZCk7Cit9CisKK2lu
dAorcHRocmVhZF9tdXRleGF0dHJfc2V0dHlwZSAocHRocmVhZF9tdXRleGF0
dHJfdCAqIGF0dHIsIGludCB0eXBlKQoreworICByZXR1cm4gX19wdGhyZWFk
X211dGV4YXR0cl9zZXR0eXBlIChhdHRyLCB0eXBlKTsKK30KKwogLyogU3lu
Y2hyb25pc2F0aW9uICovCiAKLWludCBwdGhyZWFkX2NvbmRfZGVzdHJveSAo
cHRocmVhZF9jb25kX3QgKiBjb25kKQoraW50CitwdGhyZWFkX2NvbmRfZGVz
dHJveSAocHRocmVhZF9jb25kX3QgKiBjb25kKQogewogICByZXR1cm4gX19w
dGhyZWFkX2NvbmRfZGVzdHJveSAoY29uZCk7CiB9CiAKIGludAotICBwdGhy
ZWFkX2NvbmRfaW5pdCAocHRocmVhZF9jb25kX3QgKiBjb25kLCBjb25zdCBw
dGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRyKQorcHRocmVhZF9jb25kX2luaXQg
KHB0aHJlYWRfY29uZF90ICogY29uZCwgY29uc3QgcHRocmVhZF9jb25kYXR0
cl90ICogYXR0cikKIHsKICAgcmV0dXJuIF9fcHRocmVhZF9jb25kX2luaXQg
KGNvbmQsIGF0dHIpOwogfQogCi1pbnQgcHRocmVhZF9jb25kX3NpZ25hbCAo
cHRocmVhZF9jb25kX3QgKiBjb25kKQoraW50CitwdGhyZWFkX2NvbmRfc2ln
bmFsIChwdGhyZWFkX2NvbmRfdCAqIGNvbmQpCiB7CiAgIHJldHVybiBfX3B0
aHJlYWRfY29uZF9zaWduYWwgKGNvbmQpOwogfQogCi1pbnQgcHRocmVhZF9j
b25kX2Jyb2FkY2FzdCAocHRocmVhZF9jb25kX3QgKiBjb25kKQoraW50Citw
dGhyZWFkX2NvbmRfYnJvYWRjYXN0IChwdGhyZWFkX2NvbmRfdCAqIGNvbmQp
CiB7CiAgIHJldHVybiBfX3B0aHJlYWRfY29uZF9icm9hZGNhc3QgKGNvbmQp
OwogfQogCiBpbnQKLSAgcHRocmVhZF9jb25kX3RpbWVkd2FpdCAocHRocmVh
ZF9jb25kX3QgKiBjb25kLAotCQkJICBwdGhyZWFkX211dGV4X3QgKiBtdXRl
eCwKLQkJCSAgY29uc3Qgc3RydWN0IHRpbWVzcGVjICphYnN0aW1lKQorcHRo
cmVhZF9jb25kX3RpbWVkd2FpdCAocHRocmVhZF9jb25kX3QgKiBjb25kLAor
CQkJcHRocmVhZF9tdXRleF90ICogbXV0ZXgsCisJCQljb25zdCBzdHJ1Y3Qg
dGltZXNwZWMgKmFic3RpbWUpCiB7CiAgIHJldHVybiBfX3B0aHJlYWRfY29u
ZF90aW1lZHdhaXQgKGNvbmQsIG11dGV4LCBhYnN0aW1lKTsKIH0KIAotaW50
IHB0aHJlYWRfY29uZF93YWl0IChwdGhyZWFkX2NvbmRfdCAqIGNvbmQsIHB0
aHJlYWRfbXV0ZXhfdCAqIG11dGV4KQoraW50CitwdGhyZWFkX2NvbmRfd2Fp
dCAocHRocmVhZF9jb25kX3QgKiBjb25kLCBwdGhyZWFkX211dGV4X3QgKiBt
dXRleCkKIHsKICAgcmV0dXJuIF9fcHRocmVhZF9jb25kX3dhaXQgKGNvbmQs
IG11dGV4KTsKIH0KIAotaW50IHB0aHJlYWRfY29uZGF0dHJfaW5pdCAocHRo
cmVhZF9jb25kYXR0cl90ICogY29uZGF0dHIpCitpbnQKK3B0aHJlYWRfY29u
ZGF0dHJfaW5pdCAocHRocmVhZF9jb25kYXR0cl90ICogY29uZGF0dHIpCiB7
CiAgIHJldHVybiBfX3B0aHJlYWRfY29uZGF0dHJfaW5pdCAoY29uZGF0dHIp
OwogfQogCi1pbnQgcHRocmVhZF9jb25kYXR0cl9kZXN0cm95IChwdGhyZWFk
X2NvbmRhdHRyX3QgKiBjb25kYXR0cikKK2ludAorcHRocmVhZF9jb25kYXR0
cl9kZXN0cm95IChwdGhyZWFkX2NvbmRhdHRyX3QgKiBjb25kYXR0cikKIHsK
ICAgcmV0dXJuIF9fcHRocmVhZF9jb25kYXR0cl9kZXN0cm95IChjb25kYXR0
cik7CiB9CiAKIGludAotICBwdGhyZWFkX2NvbmRhdHRyX2dldHBzaGFyZWQg
KGNvbnN0IHB0aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIsCi0JCQkgICAgICAg
aW50ICpwc2hhcmVkKQorcHRocmVhZF9jb25kYXR0cl9nZXRwc2hhcmVkIChj
b25zdCBwdGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRyLCBpbnQgKnBzaGFyZWQp
CiB7CiAgIHJldHVybiBfX3B0aHJlYWRfY29uZGF0dHJfZ2V0cHNoYXJlZCAo
YXR0ciwgcHNoYXJlZCk7CiB9CiAKLWludCBwdGhyZWFkX2NvbmRhdHRyX3Nl
dHBzaGFyZWQgKHB0aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIsIGludCBwc2hh
cmVkKQoraW50CitwdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQgKHB0aHJl
YWRfY29uZGF0dHJfdCAqIGF0dHIsIGludCBwc2hhcmVkKQogewogICByZXR1
cm4gX19wdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQgKGF0dHIsIHBzaGFy
ZWQpOwogfQogCisvKiBTY2hlZHVsaW5nICovCisKK2ludAorcHRocmVhZF9n
ZXRjb25jdXJyZW5jeSAodm9pZCkKK3sKKyAgcmV0dXJuIF9fcHRocmVhZF9n
ZXRjb25jdXJyZW5jeSAoKTsKK30KKworaW50CitwdGhyZWFkX3NldGNvbmN1
cnJlbmN5IChpbnQgbmV3X2xldmVsKQoreworICByZXR1cm4gX19wdGhyZWFk
X3NldGNvbmN1cnJlbmN5IChuZXdfbGV2ZWwpOworfQorCisKKworCitpbnQK
K3B0aHJlYWRfZ2V0c2NoZWRwYXJhbSAocHRocmVhZF90IHRocmVhZCwgaW50
ICpwb2xpY3ksCisJCSAgICAgICBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKnBhcmFt
KQoreworICByZXR1cm4gX19wdGhyZWFkX2dldHNjaGVkcGFyYW0gKHRocmVh
ZCwgcG9saWN5LCBwYXJhbSk7Cit9CisKK2ludAorcHRocmVhZF9zZXRzY2hl
ZHBhcmFtIChwdGhyZWFkX3QgdGhyZWFkLCBpbnQgcG9saWN5LAorCQkgICAg
ICAgY29uc3Qgc3RydWN0IHNjaGVkX3BhcmFtICpwYXJhbSkKK3sKKyAgcmV0
dXJuIF9fcHRocmVhZF9zZXRzY2hlZHBhcmFtICh0aHJlYWQsIHBvbGljeSwg
cGFyYW0pOworfQorCisKKy8qIENhbmNlbGFiaWxpdHkgKi8KKworaW50Citw
dGhyZWFkX2NhbmNlbCAocHRocmVhZF90IHRocmVhZCkKK3sKKyAgcmV0dXJu
IF9fcHRocmVhZF9jYW5jZWwgKHRocmVhZCk7Cit9CisKKworCitpbnQKK3B0
aHJlYWRfc2V0Y2FuY2Vsc3RhdGUgKGludCBzdGF0ZSwgaW50ICpvbGRzdGF0
ZSkKK3sKKyAgcmV0dXJuIF9fcHRocmVhZF9zZXRjYW5jZWxzdGF0ZSAoc3Rh
dGUsIG9sZHN0YXRlKTsKK30KKworaW50CitwdGhyZWFkX3NldGNhbmNlbHR5
cGUgKGludCB0eXBlLCBpbnQgKm9sZHR5cGUpCit7CisgIHJldHVybiBfX3B0
aHJlYWRfc2V0Y2FuY2VsdHlwZSAodHlwZSwgb2xkdHlwZSk7Cit9CisKK3Zv
aWQKK3B0aHJlYWRfdGVzdGNhbmNlbCAodm9pZCkKK3sKKyAgX19wdGhyZWFk
X3Rlc3RjYW5jZWwgKCk7Cit9CisKIC8qIFNlbWFwaG9yZXMgKi8KLWludCBz
ZW1faW5pdCAoc2VtX3QgKiBzZW0sIGludCBwc2hhcmVkLCB1bnNpZ25lZCBp
bnQgdmFsdWUpCitpbnQKK3NlbV9pbml0IChzZW1fdCAqIHNlbSwgaW50IHBz
aGFyZWQsIHVuc2lnbmVkIGludCB2YWx1ZSkKIHsKICAgcmV0dXJuIF9fc2Vt
X2luaXQgKHNlbSwgcHNoYXJlZCwgdmFsdWUpOwogfQogCi1pbnQgc2VtX2Rl
c3Ryb3kgKHNlbV90ICogc2VtKQoraW50CitzZW1fZGVzdHJveSAoc2VtX3Qg
KiBzZW0pCiB7CiAgIHJldHVybiBfX3NlbV9kZXN0cm95IChzZW0pOwogfQog
Ci1pbnQgc2VtX3dhaXQgKHNlbV90ICogc2VtKQoraW50CitzZW1fd2FpdCAo
c2VtX3QgKiBzZW0pCiB7CiAgIHJldHVybiBfX3NlbV93YWl0IChzZW0pOwog
fQogCi1pbnQgc2VtX3RyeXdhaXQgKHNlbV90ICogc2VtKQoraW50CitzZW1f
dHJ5d2FpdCAoc2VtX3QgKiBzZW0pCiB7CiAgIHJldHVybiBfX3NlbV90cnl3
YWl0IChzZW0pOwogfQogCi1pbnQgc2VtX3Bvc3QgKHNlbV90ICogc2VtKQor
aW50CitzZW1fcG9zdCAoc2VtX3QgKiBzZW0pCiB7CiAgIHJldHVybiBfX3Nl
bV9wb3N0IChzZW0pOwogfQorCiB9CkluZGV4OiBzY2hlZC5jYwo9PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvY3ZzL3NyYy9zcmMvd2luc3Vw
L2N5Z3dpbi9zY2hlZC5jYyx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4xCmRp
ZmYgLXUgLXAgLXIxLjEgc2NoZWQuY2MKLS0tIHNjaGVkLmNjCTIwMDEvMDMv
MjEgMTQ6MDA6MjgJMS4xCisrKyBzY2hlZC5jYwkyMDAxLzA0LzEyIDAwOjI0
OjAwCkBAIC04MSw2ICs4MSwxOCBAQCBzY2hlZF9nZXRfcHJpb3JpdHlfbWlu
IChpbnQgcG9saWN5KQogICByZXR1cm4gMTU7CiB9CiAKKy8qIENoZWNrIGEg
c2NoZWR1bGVyIHBhcmFtZXRlciBzdHJ1Y3QgZm9yIHZhbGlkIHNldHRpbmdz
ICovCitpbnQKK3ZhbGlkX3NjaGVkX3BhcmFtZXRlcnMoY29uc3Qgc3RydWN0
IHNjaGVkX3BhcmFtICpwYXJhbSkKK3sKKyAgaWYgKHBhcmFtLT5zY2hlZF9w
cmlvcml0eSA8IC0xNCB8fCBwYXJhbS0+c2NoZWRfcHJpb3JpdHkgPiAxNSkK
KyAgICB7CisgICAgICByZXR1cm4gMDsKKyAgICB9CisgIHJldHVybiAtMTsK
KworfQorCiAvKiBnZXQgc2NoZWQgcGFyYW1zIGZvciBwcm9jZXNzCiAKICAg
IE5vdGUsIEknbSBuZXZlciByZXR1cm5pbmcgRVBFUk0sIApAQCAtMjczLDcg
KzI4NSw3IEBAIHNjaGVkX3NldHBhcmFtIChwaWRfdCBwaWQsIGNvbnN0IHN0
cnVjdCAKICAgICAgIHJldHVybiAtMTsKICAgICB9CiAKLSAgaWYgKHBhcmFt
LT5zY2hlZF9wcmlvcml0eSA8IC0xNCB8fCBwYXJhbS0+c2NoZWRfcHJpb3Jp
dHkgPiAxNSkKKyAgaWYgKCF2YWxpZF9zY2hlZF9wYXJhbWV0ZXJzKHBhcmFt
KSkKICAgICB7CiAgICAgICBzZXRfZXJybm8gKEVJTlZBTCk7CiAgICAgICBy
ZXR1cm4gLTE7CkBAIC0zODEsNiArMzkzLDM2IEBAIHNjaGVkX3NldHBhcmFt
IChwaWRfdCBwaWQsIGNvbnN0IHN0cnVjdCAKICAgICB9CiAgIENsb3NlSGFu
ZGxlIChwcm9jZXNzKTsKIAorICByZXR1cm4gMDsKK30KKworLyogd2UgbWFw
IC0xNCB0byAxNSwgYW5kIDE1IHRvIDEgdmlhICgxNi0gKChuKzE2KSA+PiAx
KSkuIFRoaXMgbGluZXMgdXAgd2l0aCB0aGUgYWxsb3dlZAorICogdmFsdWVz
d2UgcmV0dXJuIGVsc2V3aGVyZSBpbiB0aGUgc2NoZWQqIGZ1bmN0aW9ucy4g
V2UgdGhlbiBtYXAgaW4gZ3JvdXBzIG9mIHRocmVlIHRvCisgKiBhbGxvd2Vk
IHRocmVhZCBwcmlvcml0eSdzLiBUaGUgcmVhc29uIGZvciBkcm9wcGluZyBh
Y2N1cmFjeSB3aGlsZSBzdGlsbCByZXR1cm5pbmcKKyAqIGEgd2lkZSByYW5n
ZSBvZiB2YWx1ZXMgaXMgdG8gYWxsb3cgbW9yZSBmbGV4aWJsZSBjb2RlIGlu
IHRoZSBmdXR1cmUuCisgKi8KK2ludAorc2NoZWRfc2V0X3RocmVhZF9wcmlv
cml0eShIQU5ETEUgdGhyZWFkLCBpbnQgcHJpb3JpdHkpCit7CisgIGludCBy
ZWFsX3ByaTsKKyAgcmVhbF9wcmkgPSAxNiAtICgocHJpb3JpdHkgKyAxNikg
Pj4gMSk7CisgIGlmIChyZWFsX3ByaSA8MSB8fCByZWFsX3ByaSA+IDE1KQor
ICAgIHJldHVybiBFSU5WQUw7CisgIAorICBpZiAocmVhbF9wcmkgPCA0KSAK
KyAgICByZWFsX3ByaSA9IFRIUkVBRF9QUklPUklUWV9MT1dFU1Q7CisgIGVs
c2UgaWYgKHJlYWxfcHJpIDwgNykKKyAgICByZWFsX3ByaSA9IFRIUkVBRF9Q
UklPUklUWV9CRUxPV19OT1JNQUw7CisgIGVsc2UgaWYgKHJlYWxfcHJpIDwg
MTApCisgICAgcmVhbF9wcmkgPSBUSFJFQURfUFJJT1JJVFlfTk9STUFMOwor
ICBlbHNlIGlmIChyZWFsX3ByaSA8IDEzKQorICAgIHJlYWxfcHJpID0gVEhS
RUFEX1BSSU9SSVRZX0FCT1ZFX05PUk1BTDsKKyAgZWxzZQorICAgIHJlYWxf
cHJpID0gVEhSRUFEX1BSSU9SSVRZX0hJR0hFU1Q7CisKKyAgaWYgKCFTZXRU
aHJlYWRQcmlvcml0eSh0aHJlYWQsIHJlYWxfcHJpKSkKKyAgICAvKiBpbnZh
bGlkIGhhbmRsZSwgbm8gYWNjZXNzIGFyZSB0aGUgb25seSBleHBlY3RlZCBl
cnJvcnMuICovCisgICAgcmV0dXJuIEVQRVJNOwogICByZXR1cm4gMDsKIH0K
IApJbmRleDogdGhyZWFkLmNjCj09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNT
IGZpbGU6IC9jdnMvc3JjL3NyYy93aW5zdXAvY3lnd2luL3RocmVhZC5jYyx2
CnJldHJpZXZpbmcgcmV2aXNpb24gMS4yMQpkaWZmIC11IC1wIC1yMS4yMSB0
aHJlYWQuY2MKLS0tIHRocmVhZC5jYwkyMDAxLzA0LzA5IDAwOjQ0OjI1CTEu
MjEKKysrIHRocmVhZC5jYwkyMDAxLzA0LzEyIDAwOjI0OjAzCkBAIC0xMCw2
ICsxMCwyMSBAQCBUaGlzIHNvZnR3YXJlIGlzIGEgY29weXJpZ2h0ZWQgd29y
ayBsaWNlCiBDeWd3aW4gbGljZW5zZS4gIFBsZWFzZSBjb25zdWx0IHRoZSBm
aWxlICJDWUdXSU5fTElDRU5TRSIgZm9yCiBkZXRhaWxzLiAqLwogCisvKiBJ
bXBsZW1lbnRhdGlvbiBvdmVydmlldyBhbmQgY2F2ZWF0czoKKworICBXaW4z
MiBwdXRzIHNvbWUgY29udHJhaW50cyBvbiB3aGF0IGNhbiBhbmQgY2Fubm90
IGJlIGltcGxlbWVudGVkLiBXaGVyZSBwb3NzaWJsZQorICB3ZSB3b3JrIGFy
b3VuZCB0aG9zZSBjb250cmFpbnN0cy4gV2hlcmUgd2UgY2Fubm90IHdvcmsg
YXJvdW5kIHRoZSBjb25zdHJhaW50cyB3ZQorICBlaXRoZXIgcHJldGVuZCB0
byBiZSBjb25mb3JtYW50LCBvciByZXR1cm4gYW4gZXJyb3IgY29kZS4gCisK
KyAgU29tZSBjYXZlYXRzOiBQUk9DRVNTX1NIQVJFRCBvYmplY3RzIHdoaWxl
IHRoZXkgcHJldGVuZCB0byBiZSBwcm9jZXNzIHNoYXJlZCwKKyAgbWF5IG5v
dCBhY3R1YWxseSB3b3JrLiBTb21lIHRlc3QgY2FzZXMgYXJlIG5lZWRlZCB0
byBkZXRlcm1pbmUgd2luMzIncyBiZWhhdmlvdXIuCisgIE15IHN1c3BpY2lv
biBpcyB0aGF0IHRoZSB3aW4zMiBoYW5kbGUgbmVlZHMgdG8gYmUgb3BlbmVk
IHdpdGggZGlmZmVyZW50IGZsYWdzIGZvcgorICBwcm9wZXIgb3BlcmF0aW9u
LgorCisgIFIuQ29sbGlucywgQXByaWwgMjAwMS4KKworICAqLworCiAjaWZk
ZWYgSEFWRV9DT05GSUdfSAogIyBpbmNsdWRlICJjb25maWcuaCIKICNlbmRp
ZgpAQCAtMzEsMTAgKzQ2LDk0IEBAIGRldGFpbHMuICovCiAKIGV4dGVybiBp
bnQgdGhyZWFkc2FmZTsKIAotI2RlZmluZSBNVF9JTlRFUkZBQ0UgdXNlcl9k
YXRhLT50aHJlYWRpbnRlcmZhY2UKKy8qIHB0aHJlYWRfa2V5X2Rlc3RydWN0
b3JfbGlzdCBjbGFzczogdG8tYmUgdGhyZWFkc2FmZSBzaW5nbGUgbGlua2Vk
IGxpc3QgCisgKiBGSVhNRTogUHV0IG1lIGluIGEgZGVkaWNhdGVkIGZpbGUs
IG9yIGEgbGVhc3QgYSB0b29scyBhcmVhICEKKyAqLworCitwdGhyZWFkX2tl
eV9kZXN0cnVjdG9yICoKK3B0aHJlYWRfa2V5X2Rlc3RydWN0b3I6Okluc2Vy
dEFmdGVyIChwdGhyZWFkX2tleV9kZXN0cnVjdG9yICogbm9kZSkKK3sKKyAg
cHRocmVhZF9rZXlfZGVzdHJ1Y3RvciAqdGVtcCA9IG5leHQ7CisgIG5leHQg
PSBub2RlOworICByZXR1cm4gdGVtcDsKK30KKworcHRocmVhZF9rZXlfZGVz
dHJ1Y3RvciAqCitwdGhyZWFkX2tleV9kZXN0cnVjdG9yOjpVbmxpbmtOZXh0
ICgpCit7CisgIHB0aHJlYWRfa2V5X2Rlc3RydWN0b3IgKnRlbXAgPSBuZXh0
OworICBpZiAobmV4dCkKKyAgICBuZXh0ID0gbmV4dC0+TmV4dCAoKTsKKyAg
cmV0dXJuIHRlbXA7Cit9CiAKLSNkZWZpbmUgTk9UX0lNUChuKSAgc3lzdGVt
X3ByaW50ZiAoIm5vdCBpbXBsZW1lbnRlZCAlc1xuIiwgbik7IHJldHVybiAw
OworcHRocmVhZF9rZXlfZGVzdHJ1Y3RvciAqCitwdGhyZWFkX2tleV9kZXN0
cnVjdG9yOjpOZXh0ICgpCit7CisgIHJldHVybiBuZXh0OworfQorCit2b2lk
CitwdGhyZWFkX2tleV9kZXN0cnVjdG9yX2xpc3Q6Okluc2VydCAocHRocmVh
ZF9rZXlfZGVzdHJ1Y3RvciAqIG5vZGUpCit7CisgIGlmICghbm9kZSkKKyAg
ICByZXR1cm47CisgIGhlYWQgPSBub2RlLT5JbnNlcnRBZnRlciAoaGVhZCk7
CisgIGlmICghaGVhZCkKKyAgICBoZWFkID0gbm9kZTsJCS8qIGZpcnN0IG5v
ZGUgc3BlY2lhbCBjYXNlICovCit9CiAKKyAgLyogcmVtb3ZlIGEgZ2l2ZW4g
ZGF0YWl0ZW0sIHdoZXJldmVyIGluIHRoZSBsaXN0IGl0IGlzICovCitwdGhy
ZWFkX2tleV9kZXN0cnVjdG9yICoKK3B0aHJlYWRfa2V5X2Rlc3RydWN0b3Jf
bGlzdDo6UmVtb3ZlIChwdGhyZWFkX2tleSAqIGtleSkKK3sKKyAgaWYgKCFr
ZXkpCisgICAgcmV0dXJuIE5VTEw7CisgIGlmICghaGVhZCkKKyAgICByZXR1
cm4gTlVMTDsKKyAgaWYgKGtleSA9PSBoZWFkLT5rZXkpCisgICAgcmV0dXJu
IFBvcCAoKTsKKyAgcHRocmVhZF9rZXlfZGVzdHJ1Y3RvciAqdGVtcCA9IGhl
YWQ7CisgIHdoaWxlICh0ZW1wICYmIHRlbXAtPk5leHQgKCkgJiYgIShrZXkg
PT0gdGVtcC0+TmV4dCAoKS0+a2V5KSkKKyAgICB7CisgICAgICB0ZW1wID0g
dGVtcC0+TmV4dCAoKTsKKyAgICB9CisgIGlmICh0ZW1wKQorICAgIHJldHVy
biB0ZW1wLT5VbmxpbmtOZXh0ICgpOworICByZXR1cm4gTlVMTDsKK30KKwor
ICAvKiBnZXQgdGhlIGZpcnN0IGl0ZW0gYW5kIHJlbW92ZSBhdCB0aGUgc2Ft
ZSB0aW1lICovCitwdGhyZWFkX2tleV9kZXN0cnVjdG9yICoKK3B0aHJlYWRf
a2V5X2Rlc3RydWN0b3JfbGlzdDo6UG9wICgpCit7CisgIHB0aHJlYWRfa2V5
X2Rlc3RydWN0b3IgKnRlbXAgPSBoZWFkOworICBoZWFkID0gaGVhZC0+TmV4
dCAoKTsKKyAgcmV0dXJuIHRlbXA7Cit9CisKK3B0aHJlYWRfa2V5X2Rlc3Ry
dWN0b3I6OgorcHRocmVhZF9rZXlfZGVzdHJ1Y3RvciAodm9pZCAoKnRoZWRl
c3RydWN0b3IpICh2b2lkICopLCBwdGhyZWFkX2tleSAqIGtleSkKK3sKKyAg
ZGVzdHJ1Y3RvciA9IHRoZWRlc3RydWN0b3I7CisgIG5leHQgPSBOVUxMOwor
ICB0aGlzLT5rZXkgPSBrZXk7Cit9CisKK3ZvaWQKK3B0aHJlYWRfa2V5X2Rl
c3RydWN0b3JfbGlzdDo6SXRlcmF0ZU51bGwgKCkKK3sKKyAgcHRocmVhZF9r
ZXlfZGVzdHJ1Y3RvciAqdGVtcCA9IGhlYWQ7CisgIHdoaWxlICh0ZW1wKQor
ICAgIHsKKyAgICAgIHRlbXAtPmRlc3RydWN0b3IgKCh0ZW1wLT5rZXkpLT5n
ZXQgKCkpOworICAgICAgdGVtcCA9IHRlbXAtPk5leHQgKCk7CisgICAgfQor
fQorCisKKyNkZWZpbmUgTVRfSU5URVJGQUNFIHVzZXJfZGF0YS0+dGhyZWFk
aW50ZXJmYWNlCisKIHN0cnVjdCBfcmVlbnQgKgogX3JlZW50X2NsaWIgKCkK
IHsKQEAgLTE5MSw2ICsyOTAsOCBAQCBNVGludGVyZmFjZTo6SW5pdCAoaW50
IGZvcmtlZCkKIAkgICgibG9jYWwgc3RvcmFnZSBmb3IgdGhyZWFkIGNvdWxk
bid0IGJlIHNldFxuVGhpcyBtZWFucyB0aGF0IHdlIGFyZSBub3QgdGhyZWFk
IHNhZmUhXG4iKTsKICAgICB9CiAKKyAgY29uY3VycmVuY3kgPSAwOworCiAg
IGlmIChmb3JrZWQpCiAgICAgcmV0dXJuOwogCkBAIC0yMDgsNyArMzA5LDgg
QEAgTVRpbnRlcmZhY2U6OkluaXQgKGludCBmb3JrZWQpCiAjZW5kaWYKIH0K
IAotcHRocmVhZDo6cHRocmVhZCAoKTp2ZXJpZnlhYmxlX29iamVjdCAoUFRI
UkVBRF9NQUdJQyksIHdpbjMyX29ial9pZCAoMCkKK3B0aHJlYWQ6OnB0aHJl
YWQgKCk6dmVyaWZ5YWJsZV9vYmplY3QgKFBUSFJFQURfTUFHSUMpLCB3aW4z
Ml9vYmpfaWQgKDApLAorY2FuY2Vsc3RhdGUgKDApLCBjYW5jZWx0eXBlICgw
KQogewogfQogCkBAIC0yMzAsNiArMzMyLDggQEAgcHRocmVhZDo6Y3JlYXRl
ICh2b2lkICooKmZ1bmMpICh2b2lkICopLAogICBpZiAobmV3YXR0cikKICAg
ICB7CiAgICAgICBhdHRyLmpvaW5hYmxlID0gbmV3YXR0ci0+am9pbmFibGU7
CisgICAgICBhdHRyLmNvbnRlbnRpb25zY29wZSA9IG5ld2F0dHItPmNvbnRl
bnRpb25zY29wZTsKKyAgICAgIGF0dHIuaW5oZXJpdHNjaGVkID0gbmV3YXR0
ci0+aW5oZXJpdHNjaGVkOwogICAgICAgYXR0ci5zdGFja3NpemUgPSBuZXdh
dHRyLT5zdGFja3NpemU7CiAgICAgfQogICBmdW5jdGlvbiA9IGZ1bmM7CkBA
IC0yNDIsMjAgKzM0NiwzMCBAQCBwdGhyZWFkOjpjcmVhdGUgKHZvaWQgKigq
ZnVuYykgKHZvaWQgKiksCiAgIGlmICghd2luMzJfb2JqX2lkKQogICAgIG1h
Z2ljID0gMDsKICAgZWxzZQotICAgIFJlc3VtZVRocmVhZCAod2luMzJfb2Jq
X2lkKTsKKyAgICB7CisgICAgICAvKiBGSVhNRTogc2V0IHRoZSBwcmlvcml0
eSBhcHByb3ByaWF0ZWx5IGZvciBzeXN0ZW0gY29udGVudGlvbiBzY29wZSAq
LworICAgICAgaWYgKGF0dHIuaW5oZXJpdHNjaGVkID09IFBUSFJFQURfRVhQ
TElDSVRfU0NIRUQpCisJeworCSAgLyogRklYTUU6IHNldCB0aGUgc2NoZWR1
bGluZyBzZXR0aW5ncyBmb3IgdGhlIG5ldyB0aHJlYWQgKi8KKwkgIC8qIHNj
aGVkX3RocmVhZF9zZXRwYXJhbSh3aW4zMl9vYmpfaWQsIGF0dHIuc2NoZWRw
YXJhbSk7ICovCisJfQorICAgICAgUmVzdW1lVGhyZWFkICh3aW4zMl9vYmpf
aWQpOworICAgIH0KIH0KIAogcHRocmVhZF9hdHRyOjpwdGhyZWFkX2F0dHIg
KCk6dmVyaWZ5YWJsZV9vYmplY3QgKFBUSFJFQURfQVRUUl9NQUdJQyksCi1q
b2luYWJsZSAoUFRIUkVBRF9DUkVBVEVfSk9JTkFCTEUpLCBzdGFja3NpemUg
KDApCitqb2luYWJsZSAoUFRIUkVBRF9DUkVBVEVfSk9JTkFCTEUpLCBjb250
ZW50aW9uc2NvcGUgKFBUSFJFQURfU0NPUEVfUFJPQ0VTUyksCitpbmhlcml0
c2NoZWQgKFBUSFJFQURfSU5IRVJJVF9TQ0hFRCksIHN0YWNrc2l6ZSAoMCkK
IHsKKyAgc2NoZWRwYXJhbS5zY2hlZF9wcmlvcml0eSA9IDA7CiB9CiAKIHB0
aHJlYWRfYXR0cjo6fnB0aHJlYWRfYXR0ciAoKQogewogfQogCi1wdGhyZWFk
X2NvbmRhdHRyOjpwdGhyZWFkX2NvbmRhdHRyICgpOnZlcmlmeWFibGVfb2Jq
ZWN0IAotKFBUSFJFQURfQ09OREFUVFJfTUFHSUMpLCBzaGFyZWQgKFBUSFJF
QURfUFJPQ0VTU19QUklWQVRFKQorcHRocmVhZF9jb25kYXR0cjo6cHRocmVh
ZF9jb25kYXR0ciAoKTp2ZXJpZnlhYmxlX29iamVjdAorICAoUFRIUkVBRF9D
T05EQVRUUl9NQUdJQyksIHNoYXJlZCAoUFRIUkVBRF9QUk9DRVNTX1BSSVZB
VEUpCiB7CiB9CiAKQEAgLTI2OSwxMCArMzgzLDkgQEAgcHRocmVhZF9jb25k
OjpwdGhyZWFkX2NvbmQgKHB0aHJlYWRfY29uZAogICB0aGlzLT5tdXRleCA9
IE5VTEw7CiAgIHRoaXMtPndhaXRpbmcgPSAwOwogCi0gIHRoaXMtPndpbjMy
X29ial9pZCA9OjpDcmVhdGVFdmVudCAoJnNlY19ub25lX25paCwgCi0JZmFs
c2UsCS8qIGF1dG8gc2lnbmFsIHJlc2V0IC0gd2hpY2ggSSB0aGluayBpcyBw
dGhyZWFkcyBsaWtlID8gKi8KLQlmYWxzZSwJLyogc3RhcnQgbm9uIHNpZ25h
bGVkICovCi0JTlVMTCAvKiBubyBuYW1lICovICk7CisgIHRoaXMtPndpbjMy
X29ial9pZCA9OjpDcmVhdGVFdmVudCAoJnNlY19ub25lX25paCwgZmFsc2Us
CS8qIGF1dG8gc2lnbmFsIHJlc2V0IC0gd2hpY2ggSSB0aGluayBpcyBwdGhy
ZWFkcyBsaWtlID8gKi8KKwkJCQkgICAgIGZhbHNlLAkvKiBzdGFydCBub24g
c2lnbmFsZWQgKi8KKwkJCQkgICAgIE5VTEwgLyogbm8gbmFtZSAqLyApOwog
CiAgIGlmICghdGhpcy0+d2luMzJfb2JqX2lkKQogICAgIG1hZ2ljID0gMDsK
QEAgLTMxMiwyMSArNDI1LDI2IEBAIHB0aHJlYWRfY29uZDo6VGltZWRXYWl0
IChEV09SRCBkd01pbGxpc2UKICAgc3dpdGNoIChydikKICAgICB7CiAgICAg
Y2FzZSBXQUlUX0ZBSUxFRDoKLSAgICAgIHJldHVybiAwOwkJLyogUE9TSVgg
ZG9lc24ndCBhbGxvdyBlcnJvcnMgYWZ0ZXIgd2UgbW9kaWZ5IHRoZSBtdXRl
eCBzdGF0ZSAqLworICAgICAgcmV0dXJuIDA7CQkJLyogUE9TSVggZG9lc24n
dCBhbGxvdyBlcnJvcnMgYWZ0ZXIgd2UgbW9kaWZ5IHRoZSBtdXRleCBzdGF0
ZSAqLwogICAgIGNhc2UgV0FJVF9BQkFORE9ORUQ6CiAgICAgICByZXR1cm4g
RVRJTUVET1VUOwogICAgIGNhc2UgV0FJVF9PQkpFQ1RfMDoKLSAgICAgIHJl
dHVybiAwOwkJLyogd2UgaGF2ZSBiZWVuIHNpZ25hbGVkICovCisgICAgICBy
ZXR1cm4gMDsJCQkvKiB3ZSBoYXZlIGJlZW4gc2lnbmFsZWQgKi8KICAgICBk
ZWZhdWx0OgogICAgICAgcmV0dXJuIDA7CiAgICAgfQogfQogCi1wdGhyZWFk
X2tleTo6cHRocmVhZF9rZXkgKCk6dmVyaWZ5YWJsZV9vYmplY3QgKFBUSFJF
QURfS0VZX01BR0lDKQorcHRocmVhZF9rZXk6OnB0aHJlYWRfa2V5ICh2b2lk
ICgqZGVzdHJ1Y3RvcikgKHZvaWQgKikpOnZlcmlmeWFibGVfb2JqZWN0IChQ
VEhSRUFEX0tFWV9NQUdJQykKIHsKICAgZHdUbHNJbmRleCA9IFRsc0FsbG9j
ICgpOwogICBpZiAoZHdUbHNJbmRleCA9PSBUTFNfT1VUX09GX0lOREVYRVMp
CiAgICAgbWFnaWMgPSAwOworICBlbHNlIGlmIChkZXN0cnVjdG9yKQorICAg
IHsKKyAgICAgIE1UX0lOVEVSRkFDRS0+ZGVzdHJ1Y3RvcnMuCisJSW5zZXJ0
IChuZXcgcHRocmVhZF9rZXlfZGVzdHJ1Y3RvciAoZGVzdHJ1Y3RvciwgdGhp
cykpOworICAgIH0KIH0KIAogcHRocmVhZF9rZXk6On5wdGhyZWFkX2tleSAo
KQpAQCAtMzM2LDYgKzQ1NCw4IEBAIHB0aHJlYWRfa2V5Ojp+cHRocmVhZF9r
ZXkgKCkKICAqIGlmIChkZXN0cnVjdG9yICYmIFRsc0dldFZhbHVlKGR3VGxz
SW5kZXgpKQogICogICBkZXN0cnVjdG9yIChUbHNHZXRWYWx1ZShkd1Rsc0lu
ZGV4KSk7CiAgKi8KKyAgaWYgKHB0aHJlYWRfa2V5X2Rlc3RydWN0b3IgKiBk
ZXN0ID0gTVRfSU5URVJGQUNFLT5kZXN0cnVjdG9ycy5SZW1vdmUgKHRoaXMp
KQorICAgIGRlbGV0ZSBkZXN0OwogICBUbHNGcmVlIChkd1Rsc0luZGV4KTsK
IH07CiAKQEAgLTM2MCw3ICs0ODAsNyBAQCBwdGhyZWFkX211dGV4OjpwdGhy
ZWFkX211dGV4IChwdGhyZWFkX211CiAgIGlmICghdGhpcy0+d2luMzJfb2Jq
X2lkKQogICAgIG1hZ2ljID0gMDsKICAgY29uZHdhaXRzID0gMDsKLX07Cit9
CiAKIHB0aHJlYWRfbXV0ZXg6On5wdGhyZWFkX211dGV4ICgpCiB7CkBAIC0z
ODYsNiArNTA2LDE1IEBAIHB0aHJlYWRfbXV0ZXg6OlVuTG9jayAoKQogICBy
ZXR1cm4gUmVsZWFzZU11dGV4ICh3aW4zMl9vYmpfaWQpOwogfQogCitwdGhy
ZWFkX211dGV4YXR0cjo6cHRocmVhZF9tdXRleGF0dHIgKCk6dmVyaWZ5YWJs
ZV9vYmplY3QgKFBUSFJFQURfTVVURVhBVFRSX01BR0lDKSwKK3BzaGFyZWQg
KFBUSFJFQURfUFJPQ0VTU19QUklWQVRFKSwgbXV0ZXh0eXBlIChQVEhSRUFE
X01VVEVYX0RFRkFVTFQpCit7Cit9CisKK3B0aHJlYWRfbXV0ZXhhdHRyOjp+
cHRocmVhZF9tdXRleGF0dHIgKCkKK3sKK307CisKIHNlbWFwaG9yZTo6c2Vt
YXBob3JlIChpbnQgcHNoYXJlZCwgdW5zaWduZWQgaW50IHZhbHVlKTp2ZXJp
ZnlhYmxlX29iamVjdCAoU0VNX01BR0lDKQogewogICB0aGlzLT53aW4zMl9v
YmpfaWQgPTo6Q3JlYXRlU2VtYXBob3JlICgmc2VjX25vbmVfbmloLCB2YWx1
ZSwgTE9OR19NQVgsCkBAIC01NDAsNiArNjY5LDI3MyBAQCBfX3B0aHJlYWRf
Y3JlYXRlIChwdGhyZWFkX3QgKiB0aHJlYWQsIGNvCiB9CiAKIGludAorX19w
dGhyZWFkX29uY2UgKHB0aHJlYWRfb25jZV90ICogb25jZV9jb250cm9sLCB2
b2lkICgqaW5pdF9yb3V0aW5lKSAodm9pZCkpCit7CisgIHB0aHJlYWRfbXV0
ZXhfbG9jayAoJm9uY2VfY29udHJvbC0+bXV0ZXgpOworICAvKiBIZXJlIHdl
IG11c3Qgc2V0IGEgY2FuY2VsbGF0aW9uIGhhbmRsZXIgdG8gdW5sb2NrIHRo
ZSBtdXRleCBpZiBuZWVkZWQgKi8KKyAgLyogYnV0IGEgY2FuY2VsbGF0aW9u
IGhhbmRsZXIgaXMgbm90IHRoZSByaWdodCB0aGluZy4gV2UgbmVlZCB0aGlz
IGluIHRoZSB0aHJlYWQKKyAgICogY2xlYW51cCByb3V0aW5lLiBBc3N1bXB0
aW9uOiBhIHRocmVhZCBjYW4gb25seSBiZSBpbiBvbmUgcHRocmVhZF9vbmNl
IHJvdXRpbmUKKyAgICogYXQgYSB0aW1lLiBTdG90ZSBhIG11dGV4X3QgKiBp
biB0aGUgcHRocmVhZF9zdHJ1Y3R1cmUuIGlmIHRoYXQncyBub24gbnVsbCB1
bmxvY2sgCisgICAqIG9uIHB0aHJlYWRfZXhpdCgpOworICAgKi8KKyAgaWYg
KG9uY2VfY29udHJvbC0+c3RhdGUgPT0gMCkKKyAgICB7CisgICAgICBpbml0
X3JvdXRpbmUgKCk7CisgICAgICBvbmNlX2NvbnRyb2wtPnN0YXRlID0gMTsK
KyAgICB9CisgIC8qIEhlcmUgd2UgbXVzdCByZW1vdmUgb3VyIGNhbmNlbGxh
dGlvbiBoYW5kbGVyICovCisgIHB0aHJlYWRfbXV0ZXhfdW5sb2NrICgmb25j
ZV9jb250cm9sLT5tdXRleCk7CisgIHJldHVybiAwOworfQorCisvKiBDYW5j
ZWxhYmlsaXR5IHN0YXRlcyAqLworCisKKy8qIFBlcmZvcm0gdGhlIGFjdHVh
bCBjYW5jZWwgKi8KK3ZvaWQKK19fcHRocmVhZF9jbGVhbnVwIChwdGhyZWFk
X3QgdGhyZWFkKQoreworfQorCisKK2ludAorX19wdGhyZWFkX2NhbmNlbCAo
cHRocmVhZF90IHRocmVhZCkKK3sKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVj
dF9pc3ZhbGlkICh0aHJlYWQsIFBUSFJFQURfTUFHSUMpKQorICAgIHJldHVy
biBFU1JDSDsKKyAgaWYgKHRocmVhZC0+Y2FuY2Vsc3RhdGUgPT0gUFRIUkVB
RF9DQU5DRUxfRU5BQkxFKQorICAgIHsKKyNpZiAwCisgICAgICAvKiBvbmNl
IGFsbCB0aGUgZnVuY3Rpb25zIGNhbGwgdGVzdGNhbmNlbCgpLCB3ZSB3aWxs
IGRvIHRoaXMgKi8KKyAgICAgIGlmICh0aHJlYWQtPmNhbmNlbHR5cGUgPT0g
UFRIUkVBRF9DQU5DRUxfREVGRVJSRUQpCisJeworCX0KKyAgICAgIGVsc2UK
Kwl7CisJICAvKiBwb3NzaWJsZSBGSVhNRTogdGhpcyBmdW5jdGlvbiBpcyBt
ZWFudCB0byByZXR1cm4gYXN5bmNocm9ub3VzbHkKKwkgICAqIGZyb20gdGhl
IGNhbmNlbGxhdGlvbiByb3V0aW5lIGFjdHVhbGx5IGZpcmluZy4gU28gd2Ug
bWF5IG5lZWQgc29tZSBzb3J0CisJICAgKiBvZiBzaWduYWwgdG8gYmUgc2Vu
dCB0aGF0IGlzIGltbWVkaWF0ZWx5IHJlY2lldmVkIGFuZCBhY3RlZCBvbi4K
KwkgICAqLworCSAgX19wdGhyZWFkX2NsZWFudXAgKHRocmVhZCk7CisJfQor
I2VuZGlmCisgICAgfQorLyogIHJldHVybiAwOyAKKyovCisKKyAgcmV0dXJu
IEVTUkNIOworLyoKKyAgd2UgcmV0dXJuIEVTUkNIIHVudGlsIGFsbCB0aGUg
cmVxdWlyZWQgZnVuY3Rpb25zIGNhbGwgdGVzdGNhbmNlbCgpOworICB0aGlz
IHdpbGwgZ2l2ZSBhcHBsaWNhdGlvbnMgcHJlZGljdGFibGUgYmVoYXZpb3Vy
LgorCisgIHRoZSByZXF1aXJlZCBmdW5jdGlvbiBsaXN0IGlzOgorYWlvX3N1
c3BlbmQoKQorY2xvc2UoKQorY3JlYXQoKQorZmNudGwoKQorZnN5bmMoKQor
Z2V0bXNnKCkKK2dldHBtc2coKQorbG9ja2YoKQorbXFfcmVjZWl2ZSgpCitt
cV9zZW5kKCkKK21zZ3JjdigpCittc2dzbmQoKQorbXN5bmMoKQorbmFub3Ns
ZWVwKCkKK29wZW4oKQorcGF1c2UoKQorcG9sbCgpCitwcmVhZCgpCitwdGhy
ZWFkX2NvbmRfdGltZWR3YWl0KCkKK3B0aHJlYWRfY29uZF93YWl0KCkKK3B0
aHJlYWRfam9pbigpCitwdGhyZWFkX3Rlc3RjYW5jZWwoKQorcHV0bXNnKCkK
K3B1dHBtc2coKQorcHdyaXRlKCkKK3JlYWQoKQorcmVhZHYoKQorc2VsZWN0
KCkKK3NlbV93YWl0KCkKK3NpZ3BhdXNlKCkKK3NpZ3N1c3BlbmQoKQorc2ln
dGltZWR3YWl0KCkKK3NpZ3dhaXQoKQorc2lnd2FpdGluZm8oKQorc2xlZXAo
KQorc3lzdGVtKCkKK3RjZHJhaW4oKQordXNsZWVwKCkKK3dhaXQoKQord2Fp
dDMoKQord2FpdGlkKCkKK3dhaXRwaWQoKQord3JpdGUoKQord3JpdGV2KCkK
KwordGhlIG9wdGlvbmFsIGxpc3QgaXM6CitjYXRjbG9zZSgpCitjYXRnZXRz
KCkKK2NhdG9wZW4oKQorY2xvc2VkaXIoKQorY2xvc2Vsb2coKQorY3Rlcm1p
ZCgpCitkYm1fY2xvc2UoKQorZGJtX2RlbGV0ZSgpCitkYm1fZmV0Y2goKQor
ZGJtX25leHRrZXkoKQorZGJtX29wZW4oKQorZGJtX3N0b3JlKCkKK2RsY2xv
c2UoKQorZGxvcGVuKCkKK2VuZGdyZW50KCkKK2VuZHB3ZW50KCkKK2VuZHV0
eGVudCgpCitmY2xvc2UoKQorZmNudGwoKQorZmZsdXNoKCkKK2ZnZXRjKCkK
K2ZnZXRwb3MoKQorZmdldHMoKQorZmdldHdjKCkKK2ZnZXR3cygpCitmb3Bl
bigpCitmcHJpbnRmKCkKK2ZwdXRjKCkKK2ZwdXRzKCkKK2ZwdXR3YygpCitm
cHV0d3MoKQorZnJlYWQoKQorZnJlb3BlbigpCitmc2NhbmYoKQorZnNlZWso
KQorZnNlZWtvKCkKK2ZzZXRwb3MoKQorZnRlbGwoKQorZnRlbGxvKCkKK2Z0
dygpCitmd3ByaW50ZigpCitmd3JpdGUoKQorZndzY2FuZigpCitnZXRjKCkK
K2dldGNfdW5sb2NrZWQoKQorZ2V0Y2hhcigpCitnZXRjaGFyX3VubG9ja2Vk
KCkKK2dldGN3ZCgpCitnZXRkYXRlKCkKK2dldGdyZW50KCkKK2dldGdyZ2lk
KCkKK2dldGdyZ2lkX3IoKQorZ2V0Z3JuYW0oKQorZ2V0Z3JuYW1fcigpCitn
ZXRsb2dpbigpCitnZXRsb2dpbl9yKCkKK2dldHB3ZW50KCkKK2dldHB3bmFt
KCkKK2dldHB3bmFtX3IoKQorZ2V0cHd1aWQoKQorZ2V0cHd1aWRfcigpCitn
ZXRzKCkKK2dldHV0eGVudCgpCitnZXR1dHhpZCgpCitnZXR1dHhsaW5lKCkK
K2dldHcoKQorZ2V0d2MoKQorZ2V0d2NoYXIoKQorZ2V0d2QoKQorZ2xvYigp
CitpY29udl9jbG9zZSgpCitpY29udl9vcGVuKCkKK2lvY3RsKCkKK2xzZWVr
KCkKK21rc3RlbXAoKQorbmZ0dygpCitvcGVuZGlyKCkKK29wZW5sb2coKQor
cGNsb3NlKCkKK3BlcnJvcigpCitwb3BlbigpCitwcmludGYoKQorcHV0Yygp
CitwdXRjX3VubG9ja2VkKCkKK3B1dGNoYXIoKQorcHV0Y2hhcl91bmxvY2tl
ZCgpCitwdXRzKCkKK3B1dHV0eGxpbmUoKQorcHV0dygpCitwdXR3YygpCitw
dXR3Y2hhcigpCityZWFkZGlyKCkKK3JlYWRkaXJfcigpCityZW1vdmUoKQor
cmVuYW1lKCkKK3Jld2luZCgpCityZXdpbmRkaXIoKQorc2NhbmYoKQorc2Vl
a2RpcigpCitzZW1vcCgpCitzZXRncmVudCgpCitzZXRwd2VudCgpCitzZXR1
dHhlbnQoKQorc3RyZXJyb3IoKQorc3lzbG9nKCkKK3RtcGZpbGUoKQordG1w
bmFtKCkKK3R0eW5hbWUoKQordHR5bmFtZV9yKCkKK3VuZ2V0YygpCit1bmdl
dHdjKCkKK3VubGluaygpCit2ZnByaW50ZigpCit2ZndwcmludGYoKQordnBy
aW50ZigpCit2d3ByaW50ZigpCit3cHJpbnRmKCkKK3dzY2FuZigpCisKK05v
dGUsIHRoYXQgZm9yIGZjbnRsKCksIGZvciBhbnkgdmFsdWUgb2YgdGhlIGNt
ZCBhcmd1bWVudC4gCisKK0FuZCB3ZSBtdXN0IG5vdCBpbnRyb2R1Y2UgY2Fu
Y2VsbGF0aW9uIHBvaW50cyBhbnl3aGVyZSBlbHNlIHRoYXQncyBwYXJ0IG9m
IHRoZSBwb3NpeCBvcgorb3Blbmdyb3VwIHNwZWNzLgorICovCit9CisKKy8q
IG5vIHJhY2VzIGluIHRoZXNlIHRocmVlIGZ1bmN0aW9uczogdGhleSBhcmUg
YWxsIGN1cnJlbnQtdGhyZWFkLW9ubHkgKi8KK2ludAorX19wdGhyZWFkX3Nl
dGNhbmNlbHN0YXRlIChpbnQgc3RhdGUsIGludCAqb2xkc3RhdGUpCit7Cisg
IGNsYXNzIHB0aHJlYWQgKnRocmVhZCA9IF9fcHRocmVhZF9zZWxmICgpOwor
ICBpZiAoc3RhdGUgIT0gUFRIUkVBRF9DQU5DRUxfRU5BQkxFICYmIHN0YXRl
ICE9IFBUSFJFQURfQ0FOQ0VMX0RJU0FCTEUpCisgICAgcmV0dXJuIEVJTlZB
TDsKKyAgKm9sZHN0YXRlID0gdGhyZWFkLT5jYW5jZWxzdGF0ZTsKKyAgdGhy
ZWFkLT5jYW5jZWxzdGF0ZSA9IHN0YXRlOworICByZXR1cm4gMDsKK30KKwor
aW50CitfX3B0aHJlYWRfc2V0Y2FuY2VsdHlwZSAoaW50IHR5cGUsIGludCAq
b2xkdHlwZSkKK3sKKyAgY2xhc3MgcHRocmVhZCAqdGhyZWFkID0gX19wdGhy
ZWFkX3NlbGYgKCk7CisgIGlmICh0eXBlICE9IFBUSFJFQURfQ0FOQ0VMX0RF
RkVSUkVEICYmIHR5cGUgIT0gUFRIUkVBRF9DQU5DRUxfQVNZTkNIUk9OT1VT
KQorICAgIHJldHVybiBFSU5WQUw7CisgICpvbGR0eXBlID0gdGhyZWFkLT5j
YW5jZWx0eXBlOworICB0aHJlYWQtPmNhbmNlbHR5cGUgPSB0eXBlOworICBy
ZXR1cm4gMDsKK30KKworLyogZGVmZXJyZWQgY2FuY2VsbGF0aW9uIHJlcXVl
c3QgaGFuZGxlciAqLwordm9pZAorX19wdGhyZWFkX3Rlc3RjYW5jZWwgKHZv
aWQpCit7CisgIGNsYXNzIHB0aHJlYWQgKnRocmVhZCA9IF9fcHRocmVhZF9z
ZWxmICgpOworICBpZiAodGhyZWFkLT5jYW5jZWxzdGF0ZSA9PSBQVEhSRUFE
X0NBTkNFTF9ESVNBQkxFKQorICAgIHJldHVybjsKKyAgLyogY2hlY2sgdGhl
IGNhbmNlbGxhdGlvbiBldmVudCBvYmplY3QgaGVyZSAtIG5vdCBuZWVkZWR1
bnRpbCBwdGhyZWFkX2NhbmNlbCBhY3R1YWxseQorICAgKiBkb2VzIHNvbWV0
aGluZyovCit9CisKK2ludAogX19wdGhyZWFkX2F0dHJfaW5pdCAocHRocmVh
ZF9hdHRyX3QgKiBhdHRyKQogewogICAqYXR0ciA9IG5ldyBwdGhyZWFkX2F0
dHI7CkBAIC01NTMsNiArOTQ5LDQ5IEBAIF9fcHRocmVhZF9hdHRyX2luaXQg
KHB0aHJlYWRfYXR0cl90ICogYXQKIH0KIAogaW50CitfX3B0aHJlYWRfYXR0
cl9nZXRpbmhlcml0c2NoZWQgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0
ciwKKwkJCQlpbnQgKmluaGVyaXRzY2hlZCkKK3sKKyAgaWYgKCF2ZXJpZnlh
YmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9BVFRSX01BR0lD
KSkKKyAgICByZXR1cm4gRUlOVkFMOworICAqaW5oZXJpdHNjaGVkID0gKCph
dHRyKS0+aW5oZXJpdHNjaGVkOworICByZXR1cm4gMDsKK30KKworaW50Citf
X3B0aHJlYWRfYXR0cl9nZXRzY2hlZHBhcmFtIChjb25zdCBwdGhyZWFkX2F0
dHJfdCAqIGF0dHIsCisJCQkgICAgICBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKnBh
cmFtKQoreworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCph
dHRyLCBQVEhSRUFEX0FUVFJfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7
CisgICpwYXJhbSA9ICgqYXR0ciktPnNjaGVkcGFyYW07CisgIHJldHVybiAw
OworfQorCisvKiBGcm9tIGEgcHVyZSBjb2RlIHBvaW50IG9mIHZpZXcsIHRo
aXMgc2hvdWxkIGNhbGwgYSBoZWxwZXIgaW4gc2NoZWQuY2MsCisgKiB0byBh
bGxvdyBmb3Igc29tZW9uZSBhZGRpbmcgc2NoZWR1bGVyIHBvbGljeSBjaGFu
Z2VzIHRvIHdpbjMyIGluIHRoZSBmdXR1cmUuCisgKiBIb3dldmVyIHRoYXQn
cyBleHRyZW1lbHkgdW5saWtlbHksIHNvIHNob3J0IGFuZCBzd2VldCB3aWxs
IGRvIHVzIAorICovCitpbnQKK19fcHRocmVhZF9hdHRyX2dldHNjaGVkcG9s
aWN5IChjb25zdCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCAqcG9saWN5
KQoreworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCphdHRy
LCBQVEhSRUFEX0FUVFJfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7Cisg
ICpwb2xpY3kgPSBTQ0hFRF9GSUZPOworICByZXR1cm4gMDsKK30KKworCitp
bnQKK19fcHRocmVhZF9hdHRyX2dldHNjb3BlIChjb25zdCBwdGhyZWFkX2F0
dHJfdCAqIGF0dHIsIGludCAqY29udGVudGlvbnNjb3BlKQoreworICBpZiAo
IXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCphdHRyLCBQVEhSRUFEX0FU
VFJfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CisgICpjb250ZW50aW9u
c2NvcGUgPSAoKmF0dHIpLT5jb250ZW50aW9uc2NvcGU7CisgIHJldHVybiAw
OworfQorCitpbnQKIF9fcHRocmVhZF9hdHRyX3NldGRldGFjaHN0YXRlIChw
dGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCBkZXRhY2hzdGF0ZSkKIHsKICAg
aWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVB
RF9BVFRSX01BR0lDKSkKQEAgLTU3Myw2ICsxMDEyLDU3IEBAIF9fcHRocmVh
ZF9hdHRyX2dldGRldGFjaHN0YXRlIChjb25zdCBwdGgKIH0KIAogaW50Citf
X3B0aHJlYWRfYXR0cl9zZXRpbmhlcml0c2NoZWQgKHB0aHJlYWRfYXR0cl90
ICogYXR0ciwgaW50IGluaGVyaXRzY2hlZCkKK3sKKyAgaWYgKCF2ZXJpZnlh
YmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9BVFRSX01BR0lD
KSkKKyAgICByZXR1cm4gRUlOVkFMOworICBpZiAoaW5oZXJpdHNjaGVkICE9
IFBUSFJFQURfSU5IRVJJVF9TQ0hFRAorICAgICAgJiYgaW5oZXJpdHNjaGVk
ICE9IFBUSFJFQURfRVhQTElDSVRfU0NIRUQpCisgICAgcmV0dXJuIEVOT1RT
VVA7CisgICgqYXR0ciktPmluaGVyaXRzY2hlZCA9IGluaGVyaXRzY2hlZDsK
KyAgcmV0dXJuIDA7Cit9CisKK2ludAorX19wdGhyZWFkX2F0dHJfc2V0c2No
ZWRwYXJhbSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLAorCQkJICAgICAgY29u
c3Qgc3RydWN0IHNjaGVkX3BhcmFtICpwYXJhbSkKK3sKKyAgaWYgKCF2ZXJp
ZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVBRF9BVFRSX01B
R0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOworICBpZiAoIXZhbGlkX3NjaGVk
X3BhcmFtZXRlcnMgKHBhcmFtKSkKKyAgICByZXR1cm4gRU5PVFNVUDsKKyAg
KCphdHRyKS0+c2NoZWRwYXJhbSA9ICpwYXJhbTsKKyAgcmV0dXJuIDA7Cit9
CisKKy8qIFNlZSBfX3B0aHJlYWRfYXR0cl9nZXRzY2hlZHBvbGljeSBmb3Ig
c29tZSBub3RlcyAqLworaW50CitfX3B0aHJlYWRfYXR0cl9zZXRzY2hlZHBv
bGljeSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCBpbnQgcG9saWN5KQorewor
ICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCphdHRyLCBQVEhS
RUFEX0FUVFJfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CisgIGlmIChw
b2xpY3kgIT0gU0NIRURfRklGTykKKyAgICByZXR1cm4gRU5PVFNVUDsKKyAg
cmV0dXJuIDA7Cit9CisKK2ludAorX19wdGhyZWFkX2F0dHJfc2V0c2NvcGUg
KHB0aHJlYWRfYXR0cl90ICogYXR0ciwgaW50IGNvbnRlbnRpb25zY29wZSkK
K3sKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwg
UFRIUkVBRF9BVFRSX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOworICBp
ZiAoY29udGVudGlvbnNjb3BlICE9IFBUSFJFQURfU0NPUEVfU1lTVEVNCisg
ICAgICAmJiBjb250ZW50aW9uc2NvcGUgIT0gUFRIUkVBRF9TQ09QRV9QUk9D
RVNTKQorICAgIHJldHVybiBFSU5WQUw7CisgIC8qIEluIGZ1dHVyZSwgd2Ug
bWF5IGJlIGFibGUgdG8gc3VwcG9ydCBzeXN0ZW0gc2NvcGUgYnkgZXNjYWxh
dGluZyB0aGUgdGhyZWFkIAorICAgKiBwcmlvcml0eSB0byBleGNlZWQgdGhl
IHByaW9yaXR5IGNsYXNzLiBGb3Igbm93IHdlIG9ubHkgc3VwcG9ydCBQUk9D
RVNTIHNjb3BlLiAqLworICBpZiAoY29udGVudGlvbnNjb3BlICE9IFBUSFJF
QURfU0NPUEVfUFJPQ0VTUykKKyAgICByZXR1cm4gRU5PVFNVUDsKKyAgKCph
dHRyKS0+Y29udGVudGlvbnNjb3BlID0gY29udGVudGlvbnNjb3BlOworICBy
ZXR1cm4gMDsKK30KKworaW50CiBfX3B0aHJlYWRfYXR0cl9zZXRzdGFja3Np
emUgKHB0aHJlYWRfYXR0cl90ICogYXR0ciwgc2l6ZV90IHNpemUpCiB7CiAg
IGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKmF0dHIsIFBUSFJF
QURfQVRUUl9NQUdJQykpCkBAIC01ODIsNyArMTA3Miw3IEBAIF9fcHRocmVh
ZF9hdHRyX3NldHN0YWNrc2l6ZSAocHRocmVhZF9hdHQKIH0KIAogaW50Ci1f
X3B0aHJlYWRfYXR0cl9nZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICog
YXR0ciwgc2l6ZV90ICogc2l6ZSkKK19fcHRocmVhZF9hdHRyX2dldHN0YWNr
c2l6ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiBhdHRyLCBzaXplX3QgKiBz
aXplKQogewogICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCph
dHRyLCBQVEhSRUFEX0FUVFJfTUFHSUMpKQogICAgIHJldHVybiBFSU5WQUw7
CkBAIC02MDUsNiArMTA5NSw3IEBAIF9fcHRocmVhZF9leGl0ICh2b2lkICp2
YWx1ZV9wdHIpCiB7CiAgIGNsYXNzIHB0aHJlYWQgKnRocmVhZCA9IF9fcHRo
cmVhZF9zZWxmICgpOwogCisgIE1UX0lOVEVSRkFDRS0+ZGVzdHJ1Y3RvcnMu
SXRlcmF0ZU51bGwgKCk7CiAvLyBGSVhNRTogcnVuIHRoZSBkZXN0cnVjdG9y
cyBvZiB0aHJlYWRfa2V5IGl0ZW1zIGhlcmUKIAogICB0aHJlYWQtPnJldHVy
bl9wdHIgPSB2YWx1ZV9wdHI7CkBAIC02MTcsNyArMTEwOCw3IEBAIF9fcHRo
cmVhZF9qb2luIChwdGhyZWFkX3QgKiB0aHJlYWQsIHZvaWQKICAgaWYgKCF2
ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqdGhyZWFkLCBQVEhSRUFEX01B
R0lDKSkKICAgICByZXR1cm4gRVNSQ0g7CiAKLSAgaWYgKCgqdGhyZWFkKS0+
am9pbmFibGUgPT0gUFRIUkVBRF9DUkVBVEVfREVUQUNIRUQpCisgIGlmICgo
KnRocmVhZCktPmF0dHIuam9pbmFibGUgPT0gUFRIUkVBRF9DUkVBVEVfREVU
QUNIRUQpCiAgICAgewogICAgICAgaWYgKHJldHVybl92YWwpCiAJKnJldHVy
bl92YWwgPSBOVUxMOwpAQCAtNjI1LDcgKzExMTYsNyBAQCBfX3B0aHJlYWRf
am9pbiAocHRocmVhZF90ICogdGhyZWFkLCB2b2lkCiAgICAgfQogICBlbHNl
CiAgICAgewotICAgICAgKCp0aHJlYWQpLT5qb2luYWJsZSA9IFBUSFJFQURf
Q1JFQVRFX0RFVEFDSEVEOworICAgICAgKCp0aHJlYWQpLT5hdHRyLmpvaW5h
YmxlID0gUFRIUkVBRF9DUkVBVEVfREVUQUNIRUQ7CiAgICAgICBXYWl0Rm9y
U2luZ2xlT2JqZWN0ICgoKnRocmVhZCktPndpbjMyX29ial9pZCwgSU5GSU5J
VEUpOwogICAgICAgaWYgKHJldHVybl92YWwpCiAJKnJldHVybl92YWwgPSAo
KnRocmVhZCktPnJldHVybl9wdHI7CkBAIC02NDAsMTMgKzExMzEsMTMgQEAg
X19wdGhyZWFkX2RldGFjaCAocHRocmVhZF90ICogdGhyZWFkKQogICBpZiAo
IXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCp0aHJlYWQsIFBUSFJFQURf
TUFHSUMpKQogICAgIHJldHVybiBFU1JDSDsKIAotICBpZiAoKCp0aHJlYWQp
LT5qb2luYWJsZSA9PSBQVEhSRUFEX0NSRUFURV9ERVRBQ0hFRCkKKyAgaWYg
KCgqdGhyZWFkKS0+YXR0ci5qb2luYWJsZSA9PSBQVEhSRUFEX0NSRUFURV9E
RVRBQ0hFRCkKICAgICB7CiAgICAgICAoKnRocmVhZCktPnJldHVybl9wdHIg
PSBOVUxMOwogICAgICAgcmV0dXJuIEVJTlZBTDsKICAgICB9CiAKLSAgKCp0
aHJlYWQpLT5qb2luYWJsZSA9IFBUSFJFQURfQ1JFQVRFX0RFVEFDSEVEOwor
ICAoKnRocmVhZCktPmF0dHIuam9pbmFibGUgPSBQVEhSRUFEX0NSRUFURV9E
RVRBQ0hFRDsKICAgcmV0dXJuIDA7CiB9CiAKQEAgLTY3OSw2ICsxMTcwLDMw
IEBAIF9fcHRocmVhZF9jb250aW51ZSAocHRocmVhZF90ICogdGhyZWFkKQog
ICByZXR1cm4gMDsKIH0KIAorLyogcHJvdmlkZWQgZm9yIHNvdXJjZSBsZXZl
bCBjb21wYXRhYmlsaXR5LgorICogU2VlIGh0dHA6Ly93d3cub3Blbmdyb3Vw
Lm9yZy9vbmxpbmVwdWJzLzAwNzkwODc5OS94c2gvcHRocmVhZF9nZXRjb25j
dXJyZW5jeS5odG1sCisgKi8KK2ludAorX19wdGhyZWFkX2dldGNvbmN1cnJl
bmN5ICh2b2lkKQoreworICByZXR1cm4gTVRfSU5URVJGQUNFLT5jb25jdXJy
ZW5jeTsKK30KKworLyoga2VlcCB0aGlzIGluIHN5bmMgd2l0aCBzY2hlZC5j
YyAqLworaW50CitfX3B0aHJlYWRfZ2V0c2NoZWRwYXJhbSAocHRocmVhZF90
IHRocmVhZCwgaW50ICpwb2xpY3ksCisJCQkgc3RydWN0IHNjaGVkX3BhcmFt
ICpwYXJhbSkKK3sKKyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlk
ICh0aHJlYWQsIFBUSFJFQURfTUFHSUMpKQorICAgIHJldHVybiBFU1JDSDsK
KyAgKnBvbGljeSA9IFNDSEVEX0ZJRk87CisgIC8qIHdlIGRvbid0IHJldHVy
biB0aGUgY3VycmVudCBlZmZlY3RpdmUgcHJpb3JpdHksIHdlIHJldHVybiB0
aGUgY3VycmVudCByZXF1ZXN0ZWQKKyAgICogcHJpb3JpdHkgKi8KKyAgKnBh
cmFtID0gdGhyZWFkLT5hdHRyLnNjaGVkcGFyYW07CisgIHJldHVybiAwOwor
fQorCisKIHVuc2lnbmVkIGxvbmcKIF9fcHRocmVhZF9nZXRzZXF1ZW5jZV9u
cCAocHRocmVhZF90ICogdGhyZWFkKQogewpAQCAtNjk3LDcgKzEyMTIsNyBA
QCBfX3B0aHJlYWRfa2V5X2NyZWF0ZSAocHRocmVhZF9rZXlfdCAqIGtlCiAg
IGlmICh2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqa2V5LCBQVEhSRUFE
X0tFWV9NQUdJQykpCiAgICAgcmV0dXJuIEVCVVNZOwogCi0gICprZXkgPSBu
ZXcgcHRocmVhZF9rZXkgKCk7CisgICprZXkgPSBuZXcgcHRocmVhZF9rZXkg
KGRlc3RydWN0b3IpOwogCiAgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2
YWxpZCAoKmtleSwgUFRIUkVBRF9LRVlfTUFHSUMpKQogICAgIHsKQEAgLTcw
OSwxNyArMTIyNCw0NyBAQCBfX3B0aHJlYWRfa2V5X2NyZWF0ZSAocHRocmVh
ZF9rZXlfdCAqIGtlCiB9CiAKIGludAotX19wdGhyZWFkX2tleV9kZWxldGUg
KHB0aHJlYWRfa2V5X3QgKiBrZXkpCitfX3B0aHJlYWRfa2V5X2RlbGV0ZSAo
cHRocmVhZF9rZXlfdCBrZXkpCiB7Ci0gIGlmICghdmVyaWZ5YWJsZV9vYmpl
Y3RfaXN2YWxpZCAoKmtleSwgUFRIUkVBRF9LRVlfTUFHSUMpKQorICBpZiAo
IXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKGtleSwgUFRIUkVBRF9LRVlf
TUFHSUMpKQogICAgIHJldHVybiBFSU5WQUw7CiAKLSAgZGVsZXRlICgqa2V5
KTsKKyAgZGVsZXRlIChrZXkpOwogICByZXR1cm4gMDsKIH0KIAorLyogcHJv
dmlkZWQgZm9yIHNvdXJjZSBsZXZlbCBjb21wYXRhYmlsaXR5LiAKKyAqIFNl
ZSBodHRwOi8vd3d3Lm9wZW5ncm91cC5vcmcvb25saW5lcHVicy8wMDc5MDg3
OTkveHNoL3B0aHJlYWRfZ2V0Y29uY3VycmVuY3kuaHRtbAorICovCitpbnQK
K19fcHRocmVhZF9zZXRjb25jdXJyZW5jeSAoaW50IG5ld19sZXZlbCkKK3sK
KyAgaWYgKG5ld19sZXZlbCA8IDApCisgICAgcmV0dXJuIEVJTlZBTDsKKyAg
TVRfSU5URVJGQUNFLT5jb25jdXJyZW5jeSA9IG5ld19sZXZlbDsKKyAgcmV0
dXJuIDA7Cit9CiAKKy8qIGtlZXAgc3luY3JvbmlzZWQgd2l0aCBzY2hlZC5j
YyAqLwogaW50CitfX3B0aHJlYWRfc2V0c2NoZWRwYXJhbSAocHRocmVhZF90
IHRocmVhZCwgaW50IHBvbGljeSwKKwkJCSBjb25zdCBzdHJ1Y3Qgc2NoZWRf
cGFyYW0gKnBhcmFtKQoreworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lz
dmFsaWQgKHRocmVhZCwgUFRIUkVBRF9NQUdJQykpCisgICAgcmV0dXJuIEVT
UkNIOworICBpZiAocG9saWN5ICE9IFNDSEVEX0ZJRk8pCisgICAgcmV0dXJu
IEVOT1RTVVA7CisgIGlmICghcGFyYW0pCisgICAgcmV0dXJuIEVJTlZBTDsK
KyAgaW50IHJ2ID0KKyAgICBzY2hlZF9zZXRfdGhyZWFkX3ByaW9yaXR5ICh0
aHJlYWQtPndpbjMyX29ial9pZCwgcGFyYW0tPnNjaGVkX3ByaW9yaXR5KTsK
KyAgaWYgKCFydikKKyAgICB0aHJlYWQtPmF0dHIuc2NoZWRwYXJhbS5zY2hl
ZF9wcmlvcml0eSA9IHBhcmFtLT5zY2hlZF9wcmlvcml0eTsKKyAgcmV0dXJu
IHJ2OworfQorCisKK2ludAogX19wdGhyZWFkX3NldHNwZWNpZmljIChwdGhy
ZWFkX2tleV90IGtleSwgY29uc3Qgdm9pZCAqdmFsdWUpCiB7CiAgIGlmICgh
dmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoa2V5LCBQVEhSRUFEX0tFWV9N
QUdJQykpCkBAIC04MDYsNiArMTM1MSw4IEBAIF9fcHRocmVhZF9jb25kX3Rp
bWVkd2FpdCAocHRocmVhZF9jb25kX3QKICAgaW50IHJ2OwogICBpZiAoIWFi
c3RpbWUpCiAgICAgcmV0dXJuIEVJTlZBTDsKKyAgaWYgKCptdXRleCA9PSBQ
VEhSRUFEX01VVEVYX0lOSVRJQUxJWkVSKQorICAgIF9fcHRocmVhZF9tdXRl
eF9pbml0IChtdXRleCwgTlVMTCk7CiAgIGlmICghdmVyaWZ5YWJsZV9vYmpl
Y3RfaXN2YWxpZCAoKm11dGV4LCBQVEhSRUFEX01VVEVYX01BR0lDKSkKICAg
ICByZXR1cm4gRUlOVkFMOwogICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lz
dmFsaWQgKCpjb25kLCBQVEhSRUFEX0NPTkRfTUFHSUMpKQpAQCAtODMxLDYg
KzEzNzgsOCBAQCBpbnQKIF9fcHRocmVhZF9jb25kX3dhaXQgKHB0aHJlYWRf
Y29uZF90ICogY29uZCwgcHRocmVhZF9tdXRleF90ICogbXV0ZXgpCiB7CiAg
IGludCBydjsKKyAgaWYgKCptdXRleCA9PSBQVEhSRUFEX01VVEVYX0lOSVRJ
QUxJWkVSKQorICAgIF9fcHRocmVhZF9tdXRleF9pbml0IChtdXRleCwgTlVM
TCk7CiAgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKm11dGV4
LCBQVEhSRUFEX01VVEVYX01BR0lDKSkKICAgICByZXR1cm4gRUlOVkFMOwog
ICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCpjb25kLCBQVEhS
RUFEX0NPTkRfTUFHSUMpKQpAQCAtODk3LDE2ICsxNDQ2LDE2IEBAIF9fcHRo
cmVhZF9jb25kYXR0cl9kZXN0cm95IChwdGhyZWFkX2NvbmQKIAogLyogVGhy
ZWFkIHNpZ25hbCAqLwogaW50Ci1fX3B0aHJlYWRfa2lsbCAocHRocmVhZF90
ICogdGhyZWFkLCBpbnQgc2lnKQorX19wdGhyZWFkX2tpbGwgKHB0aHJlYWRf
dCB0aHJlYWQsIGludCBzaWcpCiB7CiAvLyBsb2NrIG15c2VsZiwgZm9yIHRo
ZSB1c2Ugb2YgdGhyZWFkMnNpZ25hbAogICAvLyB0d28gZGlmZmVyIGtpbGxz
IG1pZ2h0IGNsYXNoOiBGSVhNRQogCi0gIGlmICghdmVyaWZ5YWJsZV9vYmpl
Y3RfaXN2YWxpZCAoKnRocmVhZCwgUFRIUkVBRF9NQUdJQykpCisgIGlmICgh
dmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAodGhyZWFkLCBQVEhSRUFEX01B
R0lDKSkKICAgICByZXR1cm4gRUlOVkFMOwogCi0gIGlmICgoKnRocmVhZCkt
PnNpZ3MpCi0gICAgbXlzZWxmLT5zZXR0aHJlYWQyc2lnbmFsICgqdGhyZWFk
KTsKKyAgaWYgKHRocmVhZC0+c2lncykKKyAgICBteXNlbGYtPnNldHRocmVh
ZDJzaWduYWwgKHRocmVhZCk7CiAKICAgaW50IHJ2YWwgPSBfa2lsbCAobXlz
ZWxmLT5waWQsIHNpZyk7CiAKQEAgLTkzMyw3ICsxNDgyLDggQEAgX19wdGhy
ZWFkX3NpZ21hc2sgKGludCBvcGVyYXRpb24sIGNvbnN0IAogfQogCiAvKiAg
SUQgKi8KLXB0aHJlYWRfdCBfX3B0aHJlYWRfc2VsZiAoKQorcHRocmVhZF90
CitfX3B0aHJlYWRfc2VsZiAoKQogewogICByZXR1cm4gKHB0aHJlYWQgKikg
VGxzR2V0VmFsdWUgKE1UX0lOVEVSRkFDRS0+dGhyZWFkX3NlbGZfZHdUbHNJ
bmRleCk7CiB9CkBAIC05NDYsNiArMTQ5NiwxNSBAQCBfX3B0aHJlYWRfZXF1
YWwgKHB0aHJlYWRfdCAqIHQxLCBwdGhyZWFkCiAKIC8qIE11dGV4ZXMgICov
CiAKKy8qIEZJWE1FOiB0aGVyZSdzIGEgcG90ZW50aWFsIHJhY2Ugd2l0aCBQ
VEhSRUFEX01VVEVYX0lOSVRBTElaRVI6CisgKiB0aGUgbXV0ZXggaXMgbm90
IGFjdHVhbGx5IGluaXRlZCB1bnRpbCB0aGUgZmlyc3QgdXNlLgorICogU28g
dHdvIHRocmVhZHMgdHJ5aW5nIHRvIGxvY2svdHJ5bG9jayBtYXkgY29sbGlk
ZS4KKyAqIFNvbHV0aW9uOiB3ZSBuZWVkIGEgZ2xvYmFsIG11dGV4IG9uIG11
dGV4IGNyZWF0aW9uLCBvciBwb3NzaWJseSBzaW1wbHkKKyAqIG9uIGFsbCBj
b25zdHJ1Y3RvcnMgdGhhdCBhbGxvdyBJTklUSUFMSVpFUiBtYWNyb3MuCisg
KiB0aGUgbG9jayBzaG91bGQgYmUgdmVyeSBzbWFsbDogb25seSBhcm91bmQg
dGhlIGluaXQgcm91dGluZSwgbm90CisgKiBldmVyeSB0ZXN0LCBvciBhbGwg
bXV0ZXggYWNjZXNzIHdpbGwgYmUgc3luY2hyb25pc2VkLgorICovCisKIGlu
dAogX19wdGhyZWFkX211dGV4X2luaXQgKHB0aHJlYWRfbXV0ZXhfdCAqIG11
dGV4LAogCQkgICAgICBjb25zdCBwdGhyZWFkX211dGV4YXR0cl90ICogYXR0
cikKQEAgLTk2Nyw4ICsxNTI2LDI5IEBAIF9fcHRocmVhZF9tdXRleF9pbml0
IChwdGhyZWFkX211dGV4X3QgKiAKIH0KIAogaW50CitfX3B0aHJlYWRfbXV0
ZXhfZ2V0cHJpb2NlaWxpbmcgKGNvbnN0IHB0aHJlYWRfbXV0ZXhfdCAqIG11
dGV4LAorCQkJCWludCAqcHJpb2NlaWxpbmcpCit7CisgIGlmICgqbXV0ZXgg
PT0gUFRIUkVBRF9NVVRFWF9JTklUSUFMSVpFUikKKyAgICBfX3B0aHJlYWRf
bXV0ZXhfaW5pdCAoKHB0aHJlYWRfbXV0ZXhfdCAqKSBtdXRleCwgTlVMTCk7
CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKm11dGV4LCBQ
VEhSRUFEX01VVEVYX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOworICAv
KiBXZSBkb24ndCBkZWZpbmUgX1BPU0lYX1RIUkVBRF9QUklPX1BST1RFQ1Qg
YmVjYXVzZSB3ZSBkbyd0IGN1cnJlbnRseSBzdXBwb3J0CisgICAqIG11dGV4
IHByaW9yaXRpZXMuCisgICAqCisgICAqIFdlIGNhbiBzdXBwb3J0IG11dGV4
IHByaW9yaXRpZXMgaW4gdGhlIGZ1dHVyZSB0aG91Z2g6CisgICAqIFN0b3Jl
IGEgcHJpb3JpdHkgd2l0aCBlYWNoIG11dGV4LiAKKyAgICogV2hlbiB0aGUg
bXV0ZXggaXMgb3B0YWluZWQsIHNldCB0aGUgdGhyZWFkIHByaW9yaXR5IGFz
IGFwcHJvcHJpYXRlCisgICAqIFdoZW4gdGhlIG11dGV4IGlzIHJlbGVhc2Vk
LCByZXNldCB0aGUgdGhyZSBwcmlvcml0eS4KKyAgICovCisgIHJldHVybiBF
Tk9TWVM7Cit9CisKK2ludAogX19wdGhyZWFkX211dGV4X2xvY2sgKHB0aHJl
YWRfbXV0ZXhfdCAqIG11dGV4KQogeworICBpZiAoKm11dGV4ID09IFBUSFJF
QURfTVVURVhfSU5JVElBTElaRVIpCisgICAgX19wdGhyZWFkX211dGV4X2lu
aXQgKG11dGV4LCBOVUxMKTsKICAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9p
c3ZhbGlkICgqbXV0ZXgsIFBUSFJFQURfTVVURVhfTUFHSUMpKQogICAgIHJl
dHVybiBFSU5WQUw7CiAgICgqbXV0ZXgpLT5Mb2NrICgpOwpAQCAtOTc4LDYg
KzE1NTgsOCBAQCBfX3B0aHJlYWRfbXV0ZXhfbG9jayAocHRocmVhZF9tdXRl
eF90ICogCiBpbnQKIF9fcHRocmVhZF9tdXRleF90cnlsb2NrIChwdGhyZWFk
X211dGV4X3QgKiBtdXRleCkKIHsKKyAgaWYgKCptdXRleCA9PSBQVEhSRUFE
X01VVEVYX0lOSVRJQUxJWkVSKQorICAgIF9fcHRocmVhZF9tdXRleF9pbml0
IChtdXRleCwgTlVMTCk7CiAgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2
YWxpZCAoKm11dGV4LCBQVEhSRUFEX01VVEVYX01BR0lDKSkKICAgICByZXR1
cm4gRUlOVkFMOwogICBpZiAoKCptdXRleCktPlRyeUxvY2sgKCkgPT0gV0FJ
VF9USU1FT1VUKQpAQCAtOTg4LDYgKzE1NzAsOCBAQCBfX3B0aHJlYWRfbXV0
ZXhfdHJ5bG9jayAocHRocmVhZF9tdXRleF90CiBpbnQKIF9fcHRocmVhZF9t
dXRleF91bmxvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4KQogeworICBp
ZiAoKm11dGV4ID09IFBUSFJFQURfTVVURVhfSU5JVElBTElaRVIpCisgICAg
X19wdGhyZWFkX211dGV4X2luaXQgKG11dGV4LCBOVUxMKTsKICAgaWYgKCF2
ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqbXV0ZXgsIFBUSFJFQURfTVVU
RVhfTUFHSUMpKQogICAgIHJldHVybiBFSU5WQUw7CiAgICgqbXV0ZXgpLT5V
bkxvY2sgKCk7CkBAIC05OTcsNiArMTU4MSw4IEBAIF9fcHRocmVhZF9tdXRl
eF91bmxvY2sgKHB0aHJlYWRfbXV0ZXhfdCAKIGludAogX19wdGhyZWFkX211
dGV4X2Rlc3Ryb3kgKHB0aHJlYWRfbXV0ZXhfdCAqIG11dGV4KQogeworICBp
ZiAoKm11dGV4ID09IFBUSFJFQURfTVVURVhfSU5JVElBTElaRVIpCisgICAg
cmV0dXJuIDA7CiAgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAo
Km11dGV4LCBQVEhSRUFEX01VVEVYX01BR0lDKSkKICAgICByZXR1cm4gRUlO
VkFMOwogCkBAIC0xMDA5LDYgKzE1OTUsMTM3IEBAIF9fcHRocmVhZF9tdXRl
eF9kZXN0cm95IChwdGhyZWFkX211dGV4X3QKICAgcmV0dXJuIDA7CiB9CiAK
K2ludAorX19wdGhyZWFkX211dGV4X3NldHByaW9jZWlsaW5nIChwdGhyZWFk
X211dGV4X3QgKiBtdXRleCwgaW50IHByaW9jZWlsaW5nLAorCQkJCWludCAq
b2xkX2NlaWxpbmcpCit7CisgIGlmICgqbXV0ZXggPT0gUFRIUkVBRF9NVVRF
WF9JTklUSUFMSVpFUikKKyAgICBfX3B0aHJlYWRfbXV0ZXhfaW5pdCAobXV0
ZXgsIE5VTEwpOworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQg
KCptdXRleCwgUFRIUkVBRF9NVVRFWF9NQUdJQykpCisgICAgcmV0dXJuIEVJ
TlZBTDsKKyAgcmV0dXJuIEVOT1NZUzsKK30KKworLyogV2luMzIgZG9lc24n
dCBzdXBwb3J0IG11dGV4IHByaW9yaXRpZXMgLSBzZWUgX19wdGhyZWFkX211
dGV4X2dldHByaW9jZWlsaW5nIAorICogZm9yIG1vcmUgZGV0YWlsICovCitp
bnQKK19fcHRocmVhZF9tdXRleGF0dHJfZ2V0cHJvdG9jb2wgKGNvbnN0IHB0
aHJlYWRfbXV0ZXhhdHRyX3QgKiBhdHRyLAorCQkJCSBpbnQgKnByb3RvY29s
KQoreworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCphdHRy
LCBQVEhSRUFEX01VVEVYX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOwor
ICByZXR1cm4gRU5PU1lTOworfQorCitpbnQKK19fcHRocmVhZF9tdXRleGF0
dHJfZ2V0cHNoYXJlZCAoY29uc3QgcHRocmVhZF9tdXRleGF0dHJfdCAqIGF0
dHIsCisJCQkJaW50ICpwc2hhcmVkKQoreworICBpZiAoIXZlcmlmeWFibGVf
b2JqZWN0X2lzdmFsaWQgKCphdHRyLCBQVEhSRUFEX01VVEVYX01BR0lDKSkK
KyAgICByZXR1cm4gRUlOVkFMOworICAqcHNoYXJlZCA9ICgqYXR0ciktPnBz
aGFyZWQ7CisgIHJldHVybiAwOworfQorCisvKiBXaW4zMiBtdXRleCdzIGFy
ZSBlcXVpdmFsZW50IHRvIHBvc2l4IFJFQ1VSU0lWRSBtdXRleHMuIAorICog
V2UgbmVlZCB0byBwdXQgZ2x1ZSBpbiBwbGFjZSB0byBzdXBwb3J0IG90aGVy
IHR5cGVzIG9mIG11dGV4J3MuIFdlIG1hcCAKKyAqIFBUSFJFQURfTVVURVhf
REVGQVVMVCB0byBQVEhSRUFEX01VVEVYX1JFQ1VSU0lWRSBhbmQgcmV0dXJu
IEVJTlZBTCBmb3Igb3RoZXIgdHlwZXMuCisgKi8KK2ludAorX19wdGhyZWFk
X211dGV4YXR0cl9nZXR0eXBlIChjb25zdCBwdGhyZWFkX211dGV4YXR0cl90
ICogYXR0ciwgaW50ICp0eXBlKQoreworICBpZiAoIXZlcmlmeWFibGVfb2Jq
ZWN0X2lzdmFsaWQgKCphdHRyLCBQVEhSRUFEX01VVEVYX01BR0lDKSkKKyAg
ICByZXR1cm4gRUlOVkFMOworICAqdHlwZSA9ICgqYXR0ciktPm11dGV4dHlw
ZTsKKyAgcmV0dXJuIDA7Cit9CisKKy8qIEN1cnJlbnRseSBwdGhyZWFkX211
dGV4X2luaXQgaWdub3JlcyB0aGUgYXR0ciB2YXJpYWJsZSwgdGhpcyBpcyBi
ZWNhdXNlCisgKiBub25lIG9mIHRoZSB2YXJpYWJsZXMgaGF2ZSBhbnkgaW1w
YWN0IG9uIGl0J3MgYmVoYXZpb3VyLgorICoKKyAqIEZJWE1FOiB3cml0ZSBh
bmQgdGVzdCBwcm9jZXNzIHNoYXJlZCBtdXRleCdzLgorICovCitpbnQKK19f
cHRocmVhZF9tdXRleGF0dHJfaW5pdCAocHRocmVhZF9tdXRleGF0dHJfdCAq
IGF0dHIpCit7CisgIGlmICh2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgq
YXR0ciwgUFRIUkVBRF9NVVRFWEFUVFJfTUFHSUMpKQorICAgIHJldHVybiBF
QlVTWTsKKworICAqYXR0ciA9IG5ldyBwdGhyZWFkX211dGV4YXR0ciAoKTsK
KyAgaWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRI
UkVBRF9NVVRFWEFUVFJfTUFHSUMpKQorICAgIHsKKyAgICAgIGRlbGV0ZSAo
KmF0dHIpOworICAgICAgKmF0dHIgPSBOVUxMOworICAgICAgcmV0dXJuIEVO
T01FTTsKKyAgICB9CisgIHJldHVybiAwOworfQorCitpbnQKK19fcHRocmVh
ZF9tdXRleGF0dHJfZGVzdHJveSAocHRocmVhZF9tdXRleGF0dHJfdCAqIGF0
dHIpCit7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKmF0
dHIsIFBUSFJFQURfTVVURVhBVFRSX01BR0lDKSkKKyAgICByZXR1cm4gRUlO
VkFMOworICBkZWxldGUgKCphdHRyKTsKKyAgKmF0dHIgPSBOVUxMOworICBy
ZXR1cm4gMDsKK30KKworCisvKiBXaW4zMiBkb2Vzbid0IHN1cHBvcnQgbXV0
ZXggcHJpb3JpdGllcyAqLworaW50CitfX3B0aHJlYWRfbXV0ZXhhdHRyX3Nl
dHByb3RvY29sIChwdGhyZWFkX211dGV4YXR0cl90ICogYXR0ciwgaW50IHBy
b3RvY29sKQoreworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQg
KCphdHRyLCBQVEhSRUFEX01VVEVYQVRUUl9NQUdJQykpCisgICAgcmV0dXJu
IEVJTlZBTDsKKyAgcmV0dXJuIEVOT1NZUzsKK30KKworLyogV2luMzIgZG9l
c24ndCBzdXBwb3J0IG11dGV4IHByaW9yaXRpZXMgKi8KK2ludAorX19wdGhy
ZWFkX211dGV4YXR0cl9zZXRwcmlvY2VpbGluZyAocHRocmVhZF9tdXRleGF0
dHJfdCAqIGF0dHIsCisJCQkJICAgIGludCBwcmlvY2VpbGluZykKK3sKKyAg
aWYgKCF2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICgqYXR0ciwgUFRIUkVB
RF9NVVRFWEFUVFJfTUFHSUMpKQorICAgIHJldHVybiBFSU5WQUw7CisgIHJl
dHVybiBFTk9TWVM7Cit9CisKK2ludAorX19wdGhyZWFkX211dGV4YXR0cl9n
ZXRwcmlvY2VpbGluZyAoY29uc3QgcHRocmVhZF9tdXRleGF0dHJfdCAqIGF0
dHIsCisJCQkJICAgIGludCAqcHJpb2NlaWxpbmcpCit7CisgIGlmICghdmVy
aWZ5YWJsZV9vYmplY3RfaXN2YWxpZCAoKmF0dHIsIFBUSFJFQURfTVVURVhB
VFRSX01BR0lDKSkKKyAgICByZXR1cm4gRUlOVkFMOworICByZXR1cm4gRU5P
U1lTOworfQorCitpbnQKK19fcHRocmVhZF9tdXRleGF0dHJfc2V0cHNoYXJl
ZCAocHRocmVhZF9tdXRleGF0dHJfdCAqIGF0dHIsIGludCBwc2hhcmVkKQor
eworICBpZiAoIXZlcmlmeWFibGVfb2JqZWN0X2lzdmFsaWQgKCphdHRyLCBQ
VEhSRUFEX01VVEVYQVRUUl9NQUdJQykpCisgICAgcmV0dXJuIEVJTlZBTDsK
KyAgLyogd2UgZG9uJ3QgdXNlIHBzaGFyZWQgZm9yIGFueXRoaW5nIGFzIHll
dC4gV2UgbmVlZCB0byB0ZXN0IFBST0NFU1NfU0hBUkVEIAorICAgKiBmdW5j
dGlvbmFsaXR5IAorICAgKi8KKyAgaWYgKHBzaGFyZWQgIT0gUFRIUkVBRF9Q
Uk9DRVNTX1BSSVZBVEUpCisgICAgcmV0dXJuIEVJTlZBTDsKKyAgKCphdHRy
KS0+cHNoYXJlZCA9IHBzaGFyZWQ7CisgIHJldHVybiAwOworfQorCisvKiBz
ZWUgX19wdGhyZWFkX211dGV4X2dldHR5cGUgKi8KK2ludAorX19wdGhyZWFk
X211dGV4YXR0cl9zZXR0eXBlIChwdGhyZWFkX211dGV4YXR0cl90ICogYXR0
ciwgaW50IHR5cGUpCit7CisgIGlmICghdmVyaWZ5YWJsZV9vYmplY3RfaXN2
YWxpZCAoKmF0dHIsIFBUSFJFQURfTVVURVhBVFRSX01BR0lDKSkKKyAgICBy
ZXR1cm4gRUlOVkFMOworICBpZiAodHlwZSAhPSBQVEhSRUFEX01VVEVYX1JF
Q1VSU0lWRSkKKyAgICByZXR1cm4gRUlOVkFMOworICAoKmF0dHIpLT5tdXRl
eHR5cGUgPSB0eXBlOworICByZXR1cm4gMDsKK30KKwogLyogU2VtYXBob3Jl
cyAqLwogaW50CiBfX3NlbV9pbml0IChzZW1fdCAqIHNlbSwgaW50IHBzaGFy
ZWQsIHVuc2lnbmVkIGludCB2YWx1ZSkKQEAgLTEwNzIsMTgwICsxNzg5LDUg
QEAgX19zZW1fcG9zdCAoc2VtX3QgKiBzZW0pCiAgICgqc2VtKS0+UG9zdCAo
KTsKICAgcmV0dXJuIDA7CiB9Ci0KLQotI2Vsc2UKLQotLy8gZW1wdHkgZnVu
Y3Rpb25zIG5lZWRlZCB3aGVuIG1ha2VpbmcgdGhlIGRsbCB3aXRob3V0IG10
X3NhZmUgc3VwcG9ydAotZXh0ZXJuICJDIgotewotaW50IF9fcHRocmVhZF9j
cmVhdGUgKHB0aHJlYWRfdCAqLCBjb25zdCBwdGhyZWFkX2F0dHJfdCAqLAot
CQkgICAgICBURkQgKHN0YXJ0X3JvdXRpbmUpLCB2b2lkICphcmcpCi17Ci0g
IHJldHVybiAtMTsKLX0KLWludCBfX3B0aHJlYWRfYXR0cl9pbml0IChwdGhy
ZWFkX2F0dHJfdCAqIGF0dHIpCi17Ci0gIHJldHVybiAtMTsKLX0KLWludCBf
X3B0aHJlYWRfYXR0cl9kZXN0cm95IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIp
Ci17Ci0gIHJldHVybiAtMTsKLX0KLWludCBfX3B0aHJlYWRfYXR0cl9zZXRk
ZXRhY2hzdGF0ZSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCBpbnQgZGV0YWNo
c3RhdGUpCi17Ci0gIHJldHVybiAtMTsKLX0KLWludAotICBfX3B0aHJlYWRf
YXR0cl9nZXRkZXRhY2hzdGF0ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiBh
dHRyLAotCQkJCSBpbnQgKmRldGFjaHN0YXRlKQotewotICByZXR1cm4gLTE7
Ci19Ci1pbnQgX19wdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChwdGhyZWFk
X2F0dHJfdCAqIGF0dHIsIHNpemVfdCBzaXplKQotewotICByZXR1cm4gLTE7
Ci19Ci1pbnQgX19wdGhyZWFkX2F0dHJfZ2V0c3RhY2tzaXplIChwdGhyZWFk
X2F0dHJfdCAqIGF0dHIsIHNpemVfdCAqIHNpemUpCi17Ci0gIHJldHVybiAt
MTsKLX0KLS8qIHRoZXNlIGNhbm5vdCBiZSBzdXBwb3J0ZWQgb24gd2luMzIg
LSB0aGUgb3MgYWxsb2NhdGVzIGl0J3Mgb3duIHN0YWNrIHNwYWNlLi4KLSBf
X3B0aHJlYWRfYXR0cl9zZXRzdGFja2FkZHIgKC4uLil7IHJldHVybiAtMTsg
fTsKLSBfX3B0aHJlYWRfYXR0cl9nZXRzdGFja2FkZHIgKC4uLil7IHJldHVy
biAtMTsgfTsKLSovCi1pbnQgX19wdGhyZWFkX2V4aXQgKHZvaWQgKnZhbHVl
X3B0cikKLXsKLSAgcmV0dXJuIC0xOwotfQotCi1pbnQgX19wdGhyZWFkX2pv
aW4gKHB0aHJlYWRfdCB0aHJlYWRfaWQsIHZvaWQgKipyZXR1cm5fdmFsKQot
ewotICByZXR1cm4gLTE7Ci19Ci0KLXVuc2lnbmVkIGxvbmcgX19wdGhyZWFk
X2dldHNlcXVlbmNlX25wIChwdGhyZWFkX3QgKiB0aHJlYWQpCi17Ci0gIHJl
dHVybiAwOwotfQotaW50IF9fcHRocmVhZF9rZXlfY3JlYXRlIChwdGhyZWFk
X2tleV90ICoga2V5KQotewotICByZXR1cm4gLTE7Ci19Ci1pbnQgX19wdGhy
ZWFkX2tleV9kZWxldGUgKHB0aHJlYWRfa2V5X3QgKiBrZXkpCi17Ci0gIHJl
dHVybiAtMTsKLX0KLWludCBfX3B0aHJlYWRfc2V0c3BlY2lmaWMgKHB0aHJl
YWRfa2V5X3QgKiBrZXksIGNvbnN0IHZvaWQgKnZhbHVlKQotewotICByZXR1
cm4gLTE7Ci19Ci12b2lkICpfX3B0aHJlYWRfZ2V0c3BlY2lmaWMgKHB0aHJl
YWRfa2V5X3QgKiBrZXkpCi17Ci0gIHJldHVybiBOVUxMOwotfQotaW50IF9f
cHRocmVhZF9raWxsIChwdGhyZWFkX3QgKiB0aHJlYWQsIGludCBzaWcpCi17
Ci0gIHJldHVybiAtMTsKLX0KLWludCBfX3B0aHJlYWRfc2lnbWFzayAoaW50
IG9wZXJhdGlvbiwgY29uc3Qgc2lnc2V0X3QgKiBzZXQsCi0JCSAgICAgICBz
aWdzZXRfdCAqIG9sZF9zZXQpCi17Ci0gIHJldHVybiAtMTsKLX0KLXB0aHJl
YWRfdCBfX3B0aHJlYWRfc2VsZiAoKQotewotICByZXR1cm4gLTE7Ci19Ci1p
bnQgX19wdGhyZWFkX2VxdWFsIChwdGhyZWFkX3QgKiB0MSwgcHRocmVhZF90
ICogdDIpCi17Ci0gIHJldHVybiAtMTsKLX0KLWludCBfX3B0aHJlYWRfbXV0
ZXhfaW5pdCAocHRocmVhZF9tdXRleF90ICosIGNvbnN0IHB0aHJlYWRfbXV0
ZXhhdHRyX3QgKikKLXsKLSAgcmV0dXJuIC0xOwotfQotaW50IF9fcHRocmVh
ZF9tdXRleF9sb2NrIChwdGhyZWFkX211dGV4X3QgKikKLXsKLSAgcmV0dXJu
IC0xOwotfQotaW50IF9fcHRocmVhZF9tdXRleF90cnlsb2NrIChwdGhyZWFk
X211dGV4X3QgKikKLXsKLSAgcmV0dXJuIC0xOwotfQotaW50IF9fcHRocmVh
ZF9tdXRleF91bmxvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqKQotewotICByZXR1
cm4gLTE7Ci19Ci1pbnQgX19wdGhyZWFkX211dGV4X2Rlc3Ryb3kgKHB0aHJl
YWRfbXV0ZXhfdCAqKQotewotICByZXR1cm4gLTE7Ci19Ci1pbnQgX19wdGhy
ZWFkX2NvbmRfZGVzdHJveSAocHRocmVhZF9jb25kX3QgKikKLXsKLSAgcmV0
dXJuIC0xOwotfQotaW50IF9fcHRocmVhZF9jb25kX2luaXQgKHB0aHJlYWRf
Y29uZF90ICosIGNvbnN0IHB0aHJlYWRfY29uZGF0dHJfdCAqKQotewotICBy
ZXR1cm4gLTE7Ci19Ci1pbnQgX19wdGhyZWFkX2NvbmRfc2lnbmFsIChwdGhy
ZWFkX2NvbmRfdCAqKQotewotICByZXR1cm4gLTE7Ci19Ci1pbnQgX19wdGhy
ZWFkX2NvbmRfYnJvYWRjYXN0IChwdGhyZWFkX2NvbmRfdCAqKQotewotICBy
ZXR1cm4gLTE7Ci19Ci1pbnQgX19wdGhyZWFkX2NvbmRfdGltZWR3YWl0IChw
dGhyZWFkX2NvbmRfdCAqLCBwdGhyZWFkX211dGV4X3QgKiwKLQkJCSAgICAg
IGNvbnN0IHN0cnVjdCB0aW1lc3BlYyAqKQotewotICByZXR1cm4gLTE7Ci19
Ci1pbnQgX19wdGhyZWFkX2NvbmRfd2FpdCAocHRocmVhZF9jb25kX3QgKiwg
cHRocmVhZF9tdXRleF90ICopCi17Ci0gIHJldHVybiAtMTsKLX0KLWludCBf
X3B0aHJlYWRfY29uZGF0dHJfaW5pdCAocHRocmVhZF9jb25kYXR0cl90ICop
Ci17Ci0gIHJldHVybiAtMTsKLX0KLWludCBfX3B0aHJlYWRfY29uZGF0dHJf
ZGVzdHJveSAocHRocmVhZF9jb25kYXR0cl90ICopCi17Ci0gIHJldHVybiAt
MTsKLX0KLWludCBfX3B0aHJlYWRfY29uZGF0dHJfZ2V0cHNoYXJlZCAocHRo
cmVhZF9jb25kYXR0cl90ICosIGludCAqKQotewotICByZXR1cm4gLTE7Ci19
Ci1pbnQgX19wdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQgKHB0aHJlYWRf
Y29uZGF0dHJfdCAqLCBpbnQpCi17Ci0gIHJldHVybiAtMTsKLX0KLWludCBf
X3NlbV9pbml0IChzZW1fdCAqIHNlbSwgaW50IHBzaGFyZWQsIHVuc2lnbmVk
IGludCB2YWx1ZSkKLXsKLSAgcmV0dXJuIC0xOwotfQotaW50IF9fc2VtX2Rl
c3Ryb3kgKHNlbV90ICogc2VtKQotewotICByZXR1cm4gLTE7Ci19Ci1pbnQg
X19zZW1fd2FpdCAoc2VtX3QgKiBzZW0pCi17Ci0gIHJldHVybiAtMTsKLX0K
LWludCBfX3NlbV90cnl3YWl0IChzZW1fdCAqIHNlbSkKLXsKLSAgcmV0dXJu
IC0xOwotfQotaW50IF9fc2VtX3Bvc3QgKHNlbV90ICogc2VtKQotewotICBy
ZXR1cm4gLTE7Ci19Ci1zdHJ1Y3QgX3JlZW50ICpfcmVlbnRfY2xpYiAoKQot
ewotICByZXR1cm4gTlVMTDsKLSAgfQotfQogCi0jZW5kaWYJCQkJLy8gTVRf
U0FGRQorI2VuZGlmIC8vIE1UX1NBRkUKSW5kZXg6IHRocmVhZC5oCj09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9jdnMvc3JjL3NyYy93aW5z
dXAvY3lnd2luL3RocmVhZC5oLHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjE0
CmRpZmYgLXUgLXAgLXIxLjE0IHRocmVhZC5oCi0tLSB0aHJlYWQuaAkyMDAx
LzA0LzAyIDA0OjI3OjEyCTEuMTQKKysrIHRocmVhZC5oCTIwMDEvMDQvMTIg
MDA6MjQ6MDMKQEAgLTI2LDcgKzI2LDcgQEAgZGV0YWlscy4gKi8KIGV4dGVy
biAiQyIKIHsKICNpZiBkZWZpbmVkIChfQ1lHX1RIUkVBRF9GQUlMU0FGRSkg
JiYgZGVmaW5lZCAoX01UX1NBRkUpCi12b2lkIEFzc2VydFJlc291cmNlT3du
ZXIgKGludCwgaW50KTsKKyAgdm9pZCBBc3NlcnRSZXNvdXJjZU93bmVyIChp
bnQsIGludCk7CiAjZWxzZQogI2RlZmluZSBBc3NlcnRSZXNvdXJjZU93bmVy
KGksaWkpCiAjZW5kaWYKQEAgLTM4LDIyICszOCw4IEBAIHZvaWQgQXNzZXJ0
UmVzb3VyY2VPd25lciAoaW50LCBpbnQpOwogI2RlZmluZSBSZWxlYXNlUmVz
b3VyY2VMb2NrKGksbixjKQogCiAjZWxzZQotCi0vLyNpbmNsdWRlIDxwdGhy
ZWFkLmg+Ci0vKiBGSVhNRTogdGhlc2UgYXJlIGRlZmluZWQgaW4gcHRocmVh
ZC5oLCBidXQgcHRocmVhZC5oIGRlZmluZXMgc3ltYm9scyBpdCBzaG91bGRu
J3QgLQotICogYWxsIHRoZSB0eXBlcy4KLSAqLwotI2RlZmluZSBQVEhSRUFE
X1BST0NFU1NfUFJJVkFURSAwCi0jZGVmaW5lIFBUSFJFQURfUFJPQ0VTU19T
SEFSRUQgIDEKLSNkZWZpbmUgUFRIUkVBRF9ERVNUUlVDVE9SX0lURVJBVElP
TlMgMQotLyogVGxzIGhhcyA2NCBpdGVtcyBmb3IgcHJlIHdpbjIwMDAgLSBh
bmQgd2UgZG9uJ3Qgd2FudCB0byB1c2UgdGhlbSBhbGwgOl0KLSAqIEJlZm9y
ZSBjb21taXR0aW5nIGRpc2N1c3MgdGhpcyB3aXRoIHRoZSBsaXN0Ci0gKi8K
LSNkZWZpbmUgUFRIUkVBRF9LRVlTX01BWCAzMgotI2RlZmluZSBQVEhSRUFE
X0NSRUFURV9ERVRBQ0hFRCAxCi0vKiB0aGUgZGVmYXVsdCA6IGpvaW5hYmxl
ICovCi0jZGVmaW5lIFBUSFJFQURfQ1JFQVRFX0pPSU5BQkxFIDAKIAorI2lu
Y2x1ZGUgPHB0aHJlYWQuaD4KICNpbmNsdWRlIDxzaWduYWwuaD4KICNpbmNs
dWRlIDxwd2QuaD4KICNpbmNsdWRlIDxncnAuaD4KQEAgLTY2LDggKzUyLDgg
QEAgZXh0ZXJuICJDIgogc3RydWN0IF93aW5zdXBfdAogewogICAvKgotICBO
ZWVkZWQgZm9yIHRoZSBncm91cCBmdW5jdGlvbnMKLSAgKi8KKyAgICAgTmVl
ZGVkIGZvciB0aGUgZ3JvdXAgZnVuY3Rpb25zCisgICAqLwogICBzdHJ1Y3Qg
Z3JvdXAgX2dycDsKICAgY2hhciAqX25hbWVhcnJheVsyXTsKICAgaW50IF9n
cnBfcG9zOwpAQCAtMTM2LDcgKzEyMiw5IEBAIGNsYXNzIHBpbmZvOwogY2xh
c3MgUmVzb3VyY2VMb2NrcwogewogcHVibGljOgotICBSZXNvdXJjZUxvY2tz
ICgpIHt9CisgIFJlc291cmNlTG9ja3MgKCkKKyAgeworICB9CiAgIExQQ1JJ
VElDQUxfU0VDVElPTiBMb2NrIChpbnQpOwogICB2b2lkIEluaXQgKCk7CiAg
IHZvaWQgRGVsZXRlICgpOwpAQCAtMTU3LDI2ICsxNDUsNzQgQEAgcHJpdmF0
ZToKICNkZWZpbmUgUFRIUkVBRF9DT05EX01BR0lDIFBUSFJFQURfTUFHSUMr
NQogI2RlZmluZSBQVEhSRUFEX0NPTkRBVFRSX01BR0lDIFBUSFJFQURfTUFH
SUMrNgogI2RlZmluZSBTRU1fTUFHSUMgUFRIUkVBRF9NQUdJQys3CisjZGVm
aW5lIFBUSFJFQURfT05DRV9NQUdJQyBQVEhSRUFEX01BR0lDKzg7CiAKKy8q
IHZlcmlmeWFibGVfb2JqZWN0IHNob3VsZCBub3QgYmUgZGVmaW5lZCBoZXJl
IC0gaXQncyBhIGdlbmVyYWwgcHVycG9zZSBjbGFzcyAqLworCiBjbGFzcyB2
ZXJpZnlhYmxlX29iamVjdAogewogcHVibGljOgogICBsb25nIG1hZ2ljOwog
Ci0gIHZlcmlmeWFibGVfb2JqZWN0IChsb25nKTsKLSAgfnZlcmlmeWFibGVf
b2JqZWN0ICgpOworICAgIHZlcmlmeWFibGVfb2JqZWN0IChsb25nKTsKKyAg
IH52ZXJpZnlhYmxlX29iamVjdCAoKTsKIH07CiAKIGludCB2ZXJpZnlhYmxl
X29iamVjdF9pc3ZhbGlkICh2ZXJpZnlhYmxlX29iamVjdCAqLCBsb25nKTsK
IAorY2xhc3MgcHRocmVhZF9rZXk6cHVibGljIHZlcmlmeWFibGVfb2JqZWN0
Cit7CitwdWJsaWM6CisKKyAgRFdPUkQgZHdUbHNJbmRleDsKKyAgaW50IHNl
dCAoY29uc3Qgdm9pZCAqKTsKKyAgdm9pZCAqZ2V0ICgpOworCisgICAgcHRo
cmVhZF9rZXkgKHZvaWQgKCopKHZvaWQgKikpOworICAgfnB0aHJlYWRfa2V5
ICgpOworfTsKKworLyogRklYTUU6IHRlc3QgdXNpbmcgbXVsdGlwbGUgaW5o
ZXJpdGFuY2UgYW5kIG1lcmdpbmcga2V5X2Rlc3RydWN0b3IgaW50byBwdGhy
ZWFkX2tleQorICogZm9yIGVmZmljaWVuY3kgKi8KK2NsYXNzIHB0aHJlYWRf
a2V5X2Rlc3RydWN0b3IKK3sKK3B1YmxpYzoKKyAgdm9pZCAoKmRlc3RydWN0
b3IpICh2b2lkICopOworICBwdGhyZWFkX2tleV9kZXN0cnVjdG9yICpJbnNl
cnRBZnRlciAocHRocmVhZF9rZXlfZGVzdHJ1Y3RvciAqIG5vZGUpOworICBw
dGhyZWFkX2tleV9kZXN0cnVjdG9yICpVbmxpbmtOZXh0ICgpOworICBwdGhy
ZWFkX2tleV9kZXN0cnVjdG9yICpOZXh0ICgpOworCisgICAgcHRocmVhZF9r
ZXlfZGVzdHJ1Y3RvciAodm9pZCAoKnRoZWRlc3RydWN0b3IpICh2b2lkICop
LCBwdGhyZWFkX2tleSAqIGtleSk7CisgIHB0aHJlYWRfa2V5X2Rlc3RydWN0
b3IgKm5leHQ7CisgIHB0aHJlYWRfa2V5ICprZXk7Cit9OworCitjbGFzcyBw
dGhyZWFkX2tleV9kZXN0cnVjdG9yX2xpc3QKK3sKK3B1YmxpYzoKKyAgdm9p
ZCBJbnNlcnQgKHB0aHJlYWRfa2V5X2Rlc3RydWN0b3IgKiBub2RlKTsKKy8q
IHJlbW92ZSBhIGdpdmVuIGRhdGFpdGVtLCB3aGVyZXZlciBpbiB0aGUgbGlz
dCBpdCBpcyAqLworICBwdGhyZWFkX2tleV9kZXN0cnVjdG9yICpSZW1vdmUg
KHB0aHJlYWRfa2V5X2Rlc3RydWN0b3IgKiBpdGVtKTsKKy8qIGdldCB0aGUg
Zmlyc3QgaXRlbSBhbmQgcmVtb3ZlIGF0IHRoZSBzYW1lIHRpbWUgKi8KKyAg
cHRocmVhZF9rZXlfZGVzdHJ1Y3RvciAqUG9wICgpOworICBwdGhyZWFkX2tl
eV9kZXN0cnVjdG9yICpSZW1vdmUgKHB0aHJlYWRfa2V5ICoga2V5KTsKKyAg
dm9pZCBJdGVyYXRlTnVsbCAoKTsKK3ByaXZhdGU6CisgICAgcHRocmVhZF9r
ZXlfZGVzdHJ1Y3RvciAqIGhlYWQ7Cit9OworCisKIGNsYXNzIHB0aHJlYWRf
YXR0cjpwdWJsaWMgdmVyaWZ5YWJsZV9vYmplY3QKIHsKIHB1YmxpYzoKICAg
aW50IGpvaW5hYmxlOworICBpbnQgY29udGVudGlvbnNjb3BlOworICBpbnQg
aW5oZXJpdHNjaGVkOworICBzdHJ1Y3Qgc2NoZWRfcGFyYW0gc2NoZWRwYXJh
bTsKICAgc2l6ZV90IHN0YWNrc2l6ZTsKIAotICBwdGhyZWFkX2F0dHIgKCk7
Ci0gIH5wdGhyZWFkX2F0dHIgKCk7CisgICAgcHRocmVhZF9hdHRyICgpOwor
ICAgfnB0aHJlYWRfYXR0ciAoKTsKIH07CiAKIGNsYXNzIHB0aHJlYWQ6cHVi
bGljIHZlcmlmeWFibGVfb2JqZWN0CkBAIC0xODgsNyArMjI0LDkgQEAgcHVi
bGljOgogICB2b2lkICphcmc7CiAgIHZvaWQgKnJldHVybl9wdHI7CiAgIGJv
b2wgc3VzcGVuZGVkOwotICBpbnQgam9pbmFibGU7CisgIGludCBjYW5jZWxz
dGF0ZSwgY2FuY2VsdHlwZTsKKyAgLy8gaW50IGpvaW5hYmxlOworCiAgIERX
T1JEIEdldFRocmVhZElkICgpCiAgIHsKICAgICByZXR1cm4gdGhyZWFkX2lk
OwpAQCAtMjA0LDE4ICsyNDIsMjAgQEAgcHVibGljOgogICBMT05HICpzaWd0
b2RvOwogICB2b2lkIGNyZWF0ZSAodm9pZCAqKCopKHZvaWQgKiksIHB0aHJl
YWRfYXR0ciAqLCB2b2lkICopOwogCi0gIHB0aHJlYWQgKCk7Ci0gIH5wdGhy
ZWFkICgpOworICAgIHB0aHJlYWQgKCk7CisgICB+cHRocmVhZCAoKTsKIAog
cHJpdmF0ZToKLSAgRFdPUkQgdGhyZWFkX2lkOworICAgIERXT1JEIHRocmVh
ZF9pZDsKIH07CiAKIGNsYXNzIHB0aHJlYWRfbXV0ZXhhdHRyOnB1YmxpYyB2
ZXJpZnlhYmxlX29iamVjdAogewogcHVibGljOgotICBwdGhyZWFkX211dGV4
YXR0ciAoKTsKLSAgfnB0aHJlYWRfbXV0ZXhhdHRyICgpOworICBpbnQgcHNo
YXJlZDsKKyAgaW50IG11dGV4dHlwZTsKKyAgICBwdGhyZWFkX211dGV4YXR0
ciAoKTsKKyAgIH5wdGhyZWFkX211dGV4YXR0ciAoKTsKIH07CiAKIGNsYXNz
IHB0aHJlYWRfbXV0ZXg6cHVibGljIHZlcmlmeWFibGVfb2JqZWN0CkBAIC0y
MjcsMjEgKzI2Nyw5IEBAIHB1YmxpYzoKICAgaW50IExvY2sgKCk7CiAgIGlu
dCBUcnlMb2NrICgpOwogICBpbnQgVW5Mb2NrICgpOwotCi0gIHB0aHJlYWRf
bXV0ZXggKHB0aHJlYWRfbXV0ZXhhdHRyICopOwotICB+cHRocmVhZF9tdXRl
eCAoKTsKLX07Ci0KLWNsYXNzIHB0aHJlYWRfa2V5OnB1YmxpYyB2ZXJpZnlh
YmxlX29iamVjdAotewotcHVibGljOgotCi0gIERXT1JEIGR3VGxzSW5kZXg7
Ci0gIGludCBzZXQgKGNvbnN0IHZvaWQgKik7Ci0gIHZvaWQgKmdldCAoKTsK
IAotICBwdGhyZWFkX2tleSAoKTsKLSAgfnB0aHJlYWRfa2V5ICgpOworICAg
IHB0aHJlYWRfbXV0ZXggKHB0aHJlYWRfbXV0ZXhhdHRyICopOworICAgfnB0
aHJlYWRfbXV0ZXggKCk7CiB9OwogCiBjbGFzcyBwdGhyZWFkX2NvbmRhdHRy
OnB1YmxpYyB2ZXJpZnlhYmxlX29iamVjdApAQCAtMjQ5LDggKzI3Nyw4IEBA
IGNsYXNzIHB0aHJlYWRfY29uZGF0dHI6cHVibGljIHZlcmlmeWFibGUKIHB1
YmxpYzoKICAgaW50IHNoYXJlZDsKIAotICBwdGhyZWFkX2NvbmRhdHRyICgp
OwotICB+cHRocmVhZF9jb25kYXR0ciAoKTsKKyAgICBwdGhyZWFkX2NvbmRh
dHRyICgpOworICAgfnB0aHJlYWRfY29uZGF0dHIgKCk7CiB9OwogCiBjbGFz
cyBwdGhyZWFkX2NvbmQ6cHVibGljIHZlcmlmeWFibGVfb2JqZWN0CkBAIC0y
NjMsOSArMjkxLDE2IEBAIHB1YmxpYzoKICAgaW50IFRpbWVkV2FpdCAoRFdP
UkQgZHdNaWxsaXNlY29uZHMpOwogICB2b2lkIEJyb2FkQ2FzdCAoKTsKICAg
dm9pZCBTaWduYWwgKCk7CisKKyAgICBwdGhyZWFkX2NvbmQgKHB0aHJlYWRf
Y29uZGF0dHIgKik7CisgICB+cHRocmVhZF9jb25kICgpOworfTsKIAotICBw
dGhyZWFkX2NvbmQgKHB0aHJlYWRfY29uZGF0dHIgKik7Ci0gIH5wdGhyZWFk
X2NvbmQgKCk7CitjbGFzcyBwdGhyZWFkX29uY2UKK3sKK3B1YmxpYzoKKyAg
cHRocmVhZF9tdXRleF90IG11dGV4OworICBpbnQgc3RhdGU7CiB9OwogCiAv
KiBzaG91bGRuJ3QgYmUgaGVyZSAqLwpAQCAtMjc4LDIxICszMTMsMTAgQEAg
cHVibGljOgogICB2b2lkIFBvc3QgKCk7CiAgIGludCBUcnlXYWl0ICgpOwog
Ci0gIHNlbWFwaG9yZSAoaW50LCB1bnNpZ25lZCBpbnQpOwotICB+c2VtYXBo
b3JlICgpOworICAgIHNlbWFwaG9yZSAoaW50LCB1bnNpZ25lZCBpbnQpOwor
ICAgfnNlbWFwaG9yZSAoKTsKIH07CiAKLXR5cGVkZWYgY2xhc3MgcHRocmVh
ZCAqcHRocmVhZF90OwotdHlwZWRlZiBjbGFzcyBwdGhyZWFkX211dGV4ICpw
dGhyZWFkX211dGV4X3Q7Ci0vKiBzZW0gcm91dGluZXMgYmVsb25nIGluIHNl
bWFwaG9yZS5jYyAqLwotdHlwZWRlZiBjbGFzcyBzZW1hcGhvcmUgKnNlbV90
OwotCi10eXBlZGVmIGNsYXNzIHB0aHJlYWRfa2V5ICpwdGhyZWFkX2tleV90
OwotdHlwZWRlZiBjbGFzcyBwdGhyZWFkX2F0dHIgKnB0aHJlYWRfYXR0cl90
OwotdHlwZWRlZiBjbGFzcyBwdGhyZWFkX211dGV4YXR0ciAqcHRocmVhZF9t
dXRleGF0dHJfdDsKLXR5cGVkZWYgY2xhc3MgcHRocmVhZF9jb25kYXR0ciAq
cHRocmVhZF9jb25kYXR0cl90OwotdHlwZWRlZiBjbGFzcyBwdGhyZWFkX2Nv
bmQgKnB0aHJlYWRfY29uZF90OwotCiBjbGFzcyBNVGludGVyZmFjZQogewog
cHVibGljOgpAQCAtMzAxLDk0ICszMjUsMTQzIEBAIHB1YmxpYzoKICAgRFdP
UkQgdGhyZWFkX3NlbGZfZHdUbHNJbmRleDsKICAgLyogd2UgbWF5IGdldCAw
IGZvciB0aGUgVGxzIGluZGV4Li4gZ3JyciAqLwogICBpbnQgaW5kZXhhbGxv
Y2F0ZWQ7CisgIGludCBjb25jdXJyZW5jeTsKIAogICAvLyBVc2VkIGZvciBt
YWluIHRocmVhZCBkYXRhLCBhbmQgc2lncHJvYyB0aHJlYWQKICAgc3RydWN0
IF9fcmVlbnRfdCByZWVudHM7CiAgIHN0cnVjdCBfd2luc3VwX3Qgd2luc3Vw
X3JlZW50OwogICBwdGhyZWFkIG1haW50aHJlYWQ7CiAKKyAgcHRocmVhZF9r
ZXlfZGVzdHJ1Y3Rvcl9saXN0IGRlc3RydWN0b3JzOworCiAgIHZvaWQgSW5p
dCAoaW50KTsKIAotICBNVGludGVyZmFjZSAoKTpyZWVudF9pbmRleCAoMCks
IGluZGV4YWxsb2NhdGVkICgwKQotICB7fQorICAgIE1UaW50ZXJmYWNlICgp
OnJlZW50X2luZGV4ICgwKSwgaW5kZXhhbGxvY2F0ZWQgKDApCisgIHsKKyAg
fQogfTsKIAogCiBleHRlcm4gIkMiCiB7Ci0gIHZvaWQgKnRocmVhZF9pbml0
X3dyYXBwZXIgKHZvaWQgKik7Cit2b2lkICp0aHJlYWRfaW5pdF93cmFwcGVy
ICh2b2lkICopOwogCiAvKiAgVGhyZWFkQ3JlYXRpb24gKi8KLSAgaW50IF9f
cHRocmVhZF9jcmVhdGUgKHB0aHJlYWRfdCAqIHRocmVhZCwgY29uc3QgcHRo
cmVhZF9hdHRyX3QgKiBhdHRyLAotCQkJdm9pZCAqKCpzdGFydF9yb3V0aW5l
KSAodm9pZCAqKSwgdm9pZCAqYXJnKTsKLSAgaW50IF9fcHRocmVhZF9hdHRy
X2luaXQgKHB0aHJlYWRfYXR0cl90ICogYXR0cik7Ci0gIGludCBfX3B0aHJl
YWRfYXR0cl9kZXN0cm95IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIpOwotICBp
bnQgX19wdGhyZWFkX2F0dHJfc2V0ZGV0YWNoc3RhdGUgKHB0aHJlYWRfYXR0
cl90ICosIGludCk7Ci0gIGludCBfX3B0aHJlYWRfYXR0cl9nZXRkZXRhY2hz
dGF0ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiwgaW50ICopOwotICBpbnQg
X19wdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChwdGhyZWFkX2F0dHJfdCAq
IGF0dHIsIHNpemVfdCBzaXplKTsKLSAgaW50IF9fcHRocmVhZF9hdHRyX2dl
dHN0YWNrc2l6ZSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCBzaXplX3QgKiBz
aXplKTsKLS8qCi1fX3B0aHJlYWRfYXR0cl9zZXRzdGFja2FkZHIoLi4uKTsK
LV9fcHRocmVhZF9hdHRyX2dldHN0YWNrYWRkciguLi4pOwotKi8KK2ludCBf
X3B0aHJlYWRfY3JlYXRlIChwdGhyZWFkX3QgKiB0aHJlYWQsIGNvbnN0IHB0
aHJlYWRfYXR0cl90ICogYXR0ciwKKwkJICAgICAgdm9pZCAqKCpzdGFydF9y
b3V0aW5lKSAodm9pZCAqKSwgdm9pZCAqYXJnKTsKK2ludCBfX3B0aHJlYWRf
b25jZSAocHRocmVhZF9vbmNlX3QgKiwgdm9pZCAoKikodm9pZCkpOworCitp
bnQgX19wdGhyZWFkX2F0dHJfaW5pdCAocHRocmVhZF9hdHRyX3QgKiBhdHRy
KTsKK2ludCBfX3B0aHJlYWRfYXR0cl9kZXN0cm95IChwdGhyZWFkX2F0dHJf
dCAqIGF0dHIpOworaW50IF9fcHRocmVhZF9hdHRyX3NldGRldGFjaHN0YXRl
IChwdGhyZWFkX2F0dHJfdCAqLCBpbnQpOworaW50IF9fcHRocmVhZF9hdHRy
X2dldGRldGFjaHN0YXRlIChjb25zdCBwdGhyZWFkX2F0dHJfdCAqLCBpbnQg
Kik7CitpbnQgX19wdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChwdGhyZWFk
X2F0dHJfdCAqIGF0dHIsIHNpemVfdCBzaXplKTsKK2ludCBfX3B0aHJlYWRf
YXR0cl9nZXRzdGFja3NpemUgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0
ciwgc2l6ZV90ICogc2l6ZSk7CisKK2ludCBfX3B0aHJlYWRfYXR0cl9nZXRp
bmhlcml0c2NoZWQgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICosIGludCAqKTsK
K2ludCBfX3B0aHJlYWRfYXR0cl9nZXRzY2hlZHBhcmFtIChjb25zdCBwdGhy
ZWFkX2F0dHJfdCAqLAorCQkJCSAgc3RydWN0IHNjaGVkX3BhcmFtICopOwor
aW50IF9fcHRocmVhZF9hdHRyX2dldHNjaGVkcG9saWN5IChjb25zdCBwdGhy
ZWFkX2F0dHJfdCAqLCBpbnQgKik7CitpbnQgX19wdGhyZWFkX2F0dHJfZ2V0
c2NvcGUgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICosIGludCAqKTsKK2ludCBf
X3B0aHJlYWRfYXR0cl9nZXRzdGFja2FkZHIgKGNvbnN0IHB0aHJlYWRfYXR0
cl90ICosIHZvaWQgKiopOworaW50IF9fcHRocmVhZF9hdHRyX3NldGluaGVy
aXRzY2hlZCAocHRocmVhZF9hdHRyX3QgKiwgaW50KTsKK2ludCBfX3B0aHJl
YWRfYXR0cl9zZXRzY2hlZHBhcmFtIChwdGhyZWFkX2F0dHJfdCAqLAorCQkJ
CSAgY29uc3Qgc3RydWN0IHNjaGVkX3BhcmFtICopOworaW50IF9fcHRocmVh
ZF9hdHRyX3NldHNjaGVkcG9saWN5IChwdGhyZWFkX2F0dHJfdCAqLCBpbnQp
OworaW50IF9fcHRocmVhZF9hdHRyX3NldHNjb3BlIChwdGhyZWFkX2F0dHJf
dCAqLCBpbnQpOworaW50IF9fcHRocmVhZF9hdHRyX3NldHN0YWNrYWRkciAo
cHRocmVhZF9hdHRyX3QgKiwgdm9pZCAqKTsKIAorCisKIC8qIFRocmVhZCBF
eGl0ICovCi0gIHZvaWQgX19wdGhyZWFkX2V4aXQgKHZvaWQgKnZhbHVlX3B0
cik7Ci0gIGludCBfX3B0aHJlYWRfam9pbiAocHRocmVhZF90ICogdGhyZWFk
LCB2b2lkICoqcmV0dXJuX3ZhbCk7Ci0gIGludCBfX3B0aHJlYWRfZGV0YWNo
IChwdGhyZWFkX3QgKiB0aHJlYWQpOwordm9pZCBfX3B0aHJlYWRfZXhpdCAo
dm9pZCAqdmFsdWVfcHRyKTsKK2ludCBfX3B0aHJlYWRfam9pbiAocHRocmVh
ZF90ICogdGhyZWFkLCB2b2lkICoqcmV0dXJuX3ZhbCk7CitpbnQgX19wdGhy
ZWFkX2RldGFjaCAocHRocmVhZF90ICogdGhyZWFkKTsKIAogLyogVGhyZWFk
IHN1c3BlbmQgKi8KIAotICBpbnQgX19wdGhyZWFkX3N1c3BlbmQgKHB0aHJl
YWRfdCAqIHRocmVhZCk7Ci0gIGludCBfX3B0aHJlYWRfY29udGludWUgKHB0
aHJlYWRfdCAqIHRocmVhZCk7CitpbnQgX19wdGhyZWFkX3N1c3BlbmQgKHB0
aHJlYWRfdCAqIHRocmVhZCk7CitpbnQgX19wdGhyZWFkX2NvbnRpbnVlIChw
dGhyZWFkX3QgKiB0aHJlYWQpOwogCi0gIHVuc2lnbmVkIGxvbmcgX19wdGhy
ZWFkX2dldHNlcXVlbmNlX25wIChwdGhyZWFkX3QgKiB0aHJlYWQpOwordW5z
aWduZWQgbG9uZyBfX3B0aHJlYWRfZ2V0c2VxdWVuY2VfbnAgKHB0aHJlYWRf
dCAqIHRocmVhZCk7CiAKIC8qIFRocmVhZCBTcGVjaWZpY0RhdGEgKi8KLSAg
aW50IF9fcHRocmVhZF9rZXlfY3JlYXRlIChwdGhyZWFkX2tleV90ICoga2V5
LCB2b2lkICgqZGVzdHJ1Y3RvcikgKHZvaWQgKikpOwotICBpbnQgX19wdGhy
ZWFkX2tleV9kZWxldGUgKHB0aHJlYWRfa2V5X3QgKiBrZXkpOwotICBpbnQg
X19wdGhyZWFkX3NldHNwZWNpZmljIChwdGhyZWFkX2tleV90IGtleSwgY29u
c3Qgdm9pZCAqdmFsdWUpOwotICB2b2lkICpfX3B0aHJlYWRfZ2V0c3BlY2lm
aWMgKHB0aHJlYWRfa2V5X3Qga2V5KTsKK2ludCBfX3B0aHJlYWRfa2V5X2Ny
ZWF0ZSAocHRocmVhZF9rZXlfdCAqIGtleSwgdm9pZCAoKmRlc3RydWN0b3Ip
ICh2b2lkICopKTsKK2ludCBfX3B0aHJlYWRfa2V5X2RlbGV0ZSAocHRocmVh
ZF9rZXlfdCBrZXkpOworaW50IF9fcHRocmVhZF9zZXRzcGVjaWZpYyAocHRo
cmVhZF9rZXlfdCBrZXksIGNvbnN0IHZvaWQgKnZhbHVlKTsKK3ZvaWQgKl9f
cHRocmVhZF9nZXRzcGVjaWZpYyAocHRocmVhZF9rZXlfdCBrZXkpOwogCiAv
KiBUaGVhZCBzeW5jaHJvbmlhdGlvbiAqLwotICBpbnQgX19wdGhyZWFkX2Nv
bmRfZGVzdHJveSAocHRocmVhZF9jb25kX3QgKiBjb25kKTsKLSAgaW50IF9f
cHRocmVhZF9jb25kX2luaXQgKHB0aHJlYWRfY29uZF90ICogY29uZCwKLQkJ
CSAgIGNvbnN0IHB0aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIpOwotICBpbnQg
X19wdGhyZWFkX2NvbmRfc2lnbmFsIChwdGhyZWFkX2NvbmRfdCAqIGNvbmQp
OwotICBpbnQgX19wdGhyZWFkX2NvbmRfYnJvYWRjYXN0IChwdGhyZWFkX2Nv
bmRfdCAqIGNvbmQpOwotICBpbnQgX19wdGhyZWFkX2NvbmRfdGltZWR3YWl0
IChwdGhyZWFkX2NvbmRfdCAqIGNvbmQsCi0JCQkJcHRocmVhZF9tdXRleF90
ICogbXV0ZXgsCi0JCQkJY29uc3Qgc3RydWN0IHRpbWVzcGVjICphYnN0aW1l
KTsKLSAgaW50IF9fcHRocmVhZF9jb25kX3dhaXQgKHB0aHJlYWRfY29uZF90
ICogY29uZCwgcHRocmVhZF9tdXRleF90ICogbXV0ZXgpOwotICBpbnQgX19w
dGhyZWFkX2NvbmRhdHRyX2luaXQgKHB0aHJlYWRfY29uZGF0dHJfdCAqIGNv
bmRhdHRyKTsKLSAgaW50IF9fcHRocmVhZF9jb25kYXR0cl9kZXN0cm95IChw
dGhyZWFkX2NvbmRhdHRyX3QgKiBjb25kYXR0cik7Ci0gIGludCBfX3B0aHJl
YWRfY29uZGF0dHJfZ2V0cHNoYXJlZCAoY29uc3QgcHRocmVhZF9jb25kYXR0
cl90ICogYXR0ciwKLQkJCQkgICAgIGludCAqcHNoYXJlZCk7Ci0gIGludCBf
X3B0aHJlYWRfY29uZGF0dHJfc2V0cHNoYXJlZCAocHRocmVhZF9jb25kYXR0
cl90ICogYXR0ciwgaW50IHBzaGFyZWQpOworaW50IF9fcHRocmVhZF9jb25k
X2Rlc3Ryb3kgKHB0aHJlYWRfY29uZF90ICogY29uZCk7CitpbnQgX19wdGhy
ZWFkX2NvbmRfaW5pdCAocHRocmVhZF9jb25kX3QgKiBjb25kLAorCQkJIGNv
bnN0IHB0aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIpOworaW50IF9fcHRocmVh
ZF9jb25kX3NpZ25hbCAocHRocmVhZF9jb25kX3QgKiBjb25kKTsKK2ludCBf
X3B0aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0aHJlYWRfY29uZF90ICogY29u
ZCk7CitpbnQgX19wdGhyZWFkX2NvbmRfdGltZWR3YWl0IChwdGhyZWFkX2Nv
bmRfdCAqIGNvbmQsCisJCQkgICAgICBwdGhyZWFkX211dGV4X3QgKiBtdXRl
eCwKKwkJCSAgICAgIGNvbnN0IHN0cnVjdCB0aW1lc3BlYyAqYWJzdGltZSk7
CitpbnQgX19wdGhyZWFkX2NvbmRfd2FpdCAocHRocmVhZF9jb25kX3QgKiBj
b25kLCBwdGhyZWFkX211dGV4X3QgKiBtdXRleCk7CitpbnQgX19wdGhyZWFk
X2NvbmRhdHRyX2luaXQgKHB0aHJlYWRfY29uZGF0dHJfdCAqIGNvbmRhdHRy
KTsKK2ludCBfX3B0aHJlYWRfY29uZGF0dHJfZGVzdHJveSAocHRocmVhZF9j
b25kYXR0cl90ICogY29uZGF0dHIpOworaW50IF9fcHRocmVhZF9jb25kYXR0
cl9nZXRwc2hhcmVkIChjb25zdCBwdGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRy
LAorCQkJCSAgIGludCAqcHNoYXJlZCk7CitpbnQgX19wdGhyZWFkX2NvbmRh
dHRyX3NldHBzaGFyZWQgKHB0aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIsIGlu
dCBwc2hhcmVkKTsKIAogLyogVGhyZWFkIHNpZ25hbCAqLwotICBpbnQgX19w
dGhyZWFkX2tpbGwgKHB0aHJlYWRfdCAqIHRocmVhZCwgaW50IHNpZyk7Ci0g
IGludCBfX3B0aHJlYWRfc2lnbWFzayAoaW50IG9wZXJhdGlvbiwgY29uc3Qg
c2lnc2V0X3QgKiBzZXQsCi0JCQkgc2lnc2V0X3QgKiBvbGRfc2V0KTsKK2lu
dCBfX3B0aHJlYWRfa2lsbCAocHRocmVhZF90IHRocmVhZCwgaW50IHNpZyk7
CitpbnQgX19wdGhyZWFkX3NpZ21hc2sgKGludCBvcGVyYXRpb24sIGNvbnN0
IHNpZ3NldF90ICogc2V0LAorCQkgICAgICAgc2lnc2V0X3QgKiBvbGRfc2V0
KTsKIAogLyogIElEICovCi0gIHB0aHJlYWRfdCBfX3B0aHJlYWRfc2VsZiAo
KTsKLSAgaW50IF9fcHRocmVhZF9lcXVhbCAocHRocmVhZF90ICogdDEsIHB0
aHJlYWRfdCAqIHQyKTsKK3B0aHJlYWRfdCBfX3B0aHJlYWRfc2VsZiAoKTsK
K2ludCBfX3B0aHJlYWRfZXF1YWwgKHB0aHJlYWRfdCAqIHQxLCBwdGhyZWFk
X3QgKiB0Mik7CiAKIAogLyogTXV0ZXhlcyAgKi8KLSAgaW50IF9fcHRocmVh
ZF9tdXRleF9pbml0IChwdGhyZWFkX211dGV4X3QgKiwgY29uc3QgcHRocmVh
ZF9tdXRleGF0dHJfdCAqKTsKLSAgaW50IF9fcHRocmVhZF9tdXRleF9sb2Nr
IChwdGhyZWFkX211dGV4X3QgKik7Ci0gIGludCBfX3B0aHJlYWRfbXV0ZXhf
dHJ5bG9jayAocHRocmVhZF9tdXRleF90ICopOwotICBpbnQgX19wdGhyZWFk
X211dGV4X3VubG9jayAocHRocmVhZF9tdXRleF90ICopOwotICBpbnQgX19w
dGhyZWFkX211dGV4X2Rlc3Ryb3kgKHB0aHJlYWRfbXV0ZXhfdCAqKTsKK2lu
dCBfX3B0aHJlYWRfbXV0ZXhfaW5pdCAocHRocmVhZF9tdXRleF90ICosIGNv
bnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKik7CitpbnQgX19wdGhyZWFkX211
dGV4X2xvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqKTsKK2ludCBfX3B0aHJlYWRf
bXV0ZXhfdHJ5bG9jayAocHRocmVhZF9tdXRleF90ICopOworaW50IF9fcHRo
cmVhZF9tdXRleF91bmxvY2sgKHB0aHJlYWRfbXV0ZXhfdCAqKTsKK2ludCBf
X3B0aHJlYWRfbXV0ZXhfZGVzdHJveSAocHRocmVhZF9tdXRleF90ICopOwor
aW50IF9fcHRocmVhZF9tdXRleF9zZXRwcmlvY2VpbGluZyAocHRocmVhZF9t
dXRleF90ICogbXV0ZXgsCisJCQkJICAgIGludCBwcmlvY2VpbGluZywgaW50
ICpvbGRfY2VpbGluZyk7CitpbnQgX19wdGhyZWFkX211dGV4X2dldHByaW9j
ZWlsaW5nIChjb25zdCBwdGhyZWFkX211dGV4X3QgKiBtdXRleCwKKwkJCQkg
ICAgaW50ICpwcmlvY2VpbGluZyk7CisKKworaW50IF9fcHRocmVhZF9tdXRl
eGF0dHJfZGVzdHJveSAocHRocmVhZF9tdXRleGF0dHJfdCAqKTsKK2ludCBf
X3B0aHJlYWRfbXV0ZXhhdHRyX2dldHByaW9jZWlsaW5nIChjb25zdCBwdGhy
ZWFkX211dGV4YXR0cl90ICosIGludCAqKTsKK2ludCBfX3B0aHJlYWRfbXV0
ZXhhdHRyX2dldHByb3RvY29sIChjb25zdCBwdGhyZWFkX211dGV4YXR0cl90
ICosIGludCAqKTsKK2ludCBfX3B0aHJlYWRfbXV0ZXhhdHRyX2dldHBzaGFy
ZWQgKGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKiwgaW50ICopOworaW50
IF9fcHRocmVhZF9tdXRleGF0dHJfZ2V0dHlwZSAoY29uc3QgcHRocmVhZF9t
dXRleGF0dHJfdCAqLCBpbnQgKik7CitpbnQgX19wdGhyZWFkX211dGV4YXR0
cl9pbml0IChwdGhyZWFkX211dGV4YXR0cl90ICopOworaW50IF9fcHRocmVh
ZF9tdXRleGF0dHJfc2V0cHJpb2NlaWxpbmcgKHB0aHJlYWRfbXV0ZXhhdHRy
X3QgKiwgaW50KTsKK2ludCBfX3B0aHJlYWRfbXV0ZXhhdHRyX3NldHByb3Rv
Y29sIChwdGhyZWFkX211dGV4YXR0cl90ICosIGludCk7CitpbnQgX19wdGhy
ZWFkX211dGV4YXR0cl9zZXRwc2hhcmVkIChwdGhyZWFkX211dGV4YXR0cl90
ICosIGludCk7CitpbnQgX19wdGhyZWFkX211dGV4YXR0cl9zZXR0eXBlIChw
dGhyZWFkX211dGV4YXR0cl90ICosIGludCk7CisKKworLyogU2NoZWR1bGlu
ZyAqLworaW50IF9fcHRocmVhZF9nZXRjb25jdXJyZW5jeSAodm9pZCk7Citp
bnQgX19wdGhyZWFkX3NldGNvbmN1cnJlbmN5IChpbnQgbmV3X2xldmVsKTsK
K2ludCBfX3B0aHJlYWRfZ2V0c2NoZWRwYXJhbSAocHRocmVhZF90IHRocmVh
ZCwgaW50ICpwb2xpY3ksCisJCQkgICAgIHN0cnVjdCBzY2hlZF9wYXJhbSAq
cGFyYW0pOworaW50IF9fcHRocmVhZF9zZXRzY2hlZHBhcmFtIChwdGhyZWFk
X3QgdGhyZWFkLCBpbnQgcG9saWN5LAorCQkJICAgICBjb25zdCBzdHJ1Y3Qg
c2NoZWRfcGFyYW0gKnBhcmFtKTsKKworLyogY2FuY2VsYWJpbGl0eSBzdGF0
ZXMgKi8KK2ludCBfX3B0aHJlYWRfY2FuY2VsIChwdGhyZWFkX3QgdGhyZWFk
KTsKK2ludCBfX3B0aHJlYWRfc2V0Y2FuY2Vsc3RhdGUgKGludCBzdGF0ZSwg
aW50ICpvbGRzdGF0ZSk7CitpbnQgX19wdGhyZWFkX3NldGNhbmNlbHR5cGUg
KGludCB0eXBlLCBpbnQgKm9sZHR5cGUpOwordm9pZCBfX3B0aHJlYWRfdGVz
dGNhbmNlbCAodm9pZCk7CisKIAogLyogU2VtYXBob3JlcyAqLwotICBpbnQg
X19zZW1faW5pdCAoc2VtX3QgKiBzZW0sIGludCBwc2hhcmVkLCB1bnNpZ25l
ZCBpbnQgdmFsdWUpOwotICBpbnQgX19zZW1fZGVzdHJveSAoc2VtX3QgKiBz
ZW0pOwotICBpbnQgX19zZW1fd2FpdCAoc2VtX3QgKiBzZW0pOwotICBpbnQg
X19zZW1fdHJ5d2FpdCAoc2VtX3QgKiBzZW0pOwotICBpbnQgX19zZW1fcG9z
dCAoc2VtX3QgKiBzZW0pOworaW50IF9fc2VtX2luaXQgKHNlbV90ICogc2Vt
LCBpbnQgcHNoYXJlZCwgdW5zaWduZWQgaW50IHZhbHVlKTsKK2ludCBfX3Nl
bV9kZXN0cm95IChzZW1fdCAqIHNlbSk7CitpbnQgX19zZW1fd2FpdCAoc2Vt
X3QgKiBzZW0pOworaW50IF9fc2VtX3RyeXdhaXQgKHNlbV90ICogc2VtKTsK
K2ludCBfX3NlbV9wb3N0IChzZW1fdCAqIHNlbSk7CiB9OwogCiAjZW5kaWYg
Ly8gTVRfU0FGRQpJbmRleDogaW5jbHVkZS9wdGhyZWFkLmgKPT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PQpSQ1MgZmlsZTogL2N2cy9zcmMvc3JjL3dpbnN1cC9j
eWd3aW4vaW5jbHVkZS9wdGhyZWFkLmgsdgpyZXRyaWV2aW5nIHJldmlzaW9u
IDEuNApkaWZmIC11IC1wIC1yMS40IHB0aHJlYWQuaAotLS0gcHRocmVhZC5o
CTIwMDEvMDMvMjEgMDI6MTc6NTgJMS40CisrKyBwdGhyZWFkLmgJMjAwMS8w
NC8xMiAwMDoyNDowNApAQCAtMTIsNiArMTIsNyBAQAogCiAjaW5jbHVkZSA8
c3lzL3R5cGVzLmg+CiAjaW5jbHVkZSA8c2lnbmFsLmg+CisjaW5jbHVkZSA8
c2NoZWQuaD4KIAogI2lmbmRlZiBfUFRIUkVBRF9ICiAjZGVmaW5lIF9QVEhS
RUFEX0gKQEAgLTI5LDg3ICszMCwxNDggQEAgZXh0ZXJuICJDIgogIHdvdWxk
IG5vcm1hbGx5IGJlIHdyaXR0ZW4gdG8gdGhlIHBhc3NlZCBwYXJhbWV0ZXIg
b2YgcHRocmVhZF9jb25kX2luaXQobHZhbHVlLCBOVUxMKTsgKi8KIC8vICNk
ZWZpbmUgUFRIUkVBRF9DT05EX0lOSVRJQUxJWkVSIDAKIAotI2RlZmluZSBQ
VEhSRUFEX1BST0NFU1NfUFJJVkFURSAwCi0jZGVmaW5lIFBUSFJFQURfUFJP
Q0VTU19TSEFSRUQgIDEKICNkZWZpbmUgUFRIUkVBRF9ERVNUUlVDVE9SX0lU
RVJBVElPTlMgMQogLyogVGxzIGhhcyA2NCBpdGVtcyBmb3IgcHJlIHdpbjIw
MDAgLSBhbmQgd2UgZG9uJ3Qgd2FudCB0byB1c2UgdGhlbSBhbGwgOl0KICAq
IEJlZm9yZSBjb21taXR0aW5nIGRpc2N1c3MgdGhpcyB3aXRoIHRoZSBsaXN0
CiAgKi8KICNkZWZpbmUgUFRIUkVBRF9LRVlTX01BWCAzMgorLyogdGhlIGRl
ZmF1bHQgOiBqb2luYWJsZSAqLworCisjZGVmaW5lIFBUSFJFQURfQ0FOQ0VM
X0FTWU5DSFJPTk9VUyAxCisvKiBkZWZhdWx0cyBhcmUgZW5hYmxlLCBkZWZl
cnJlZCAqLworI2RlZmluZSBQVEhSRUFEX0NBTkNFTF9FTkFCTEUgMAorI2Rl
ZmluZSBQVEhSRUFEX0NBTkNFTF9ERUZFUlJFRCAwCisjZGVmaW5lIFBUSFJF
QURfQ0FOQ0VMX0RJU0FCTEUgMQorI2RlZmluZSBQVEhSRUFEX0NBTkNFTEVE
CisjZGVmaW5lIFBUSFJFQURfQ09ORF9JTklUSUFMSVpFUgogI2RlZmluZSBQ
VEhSRUFEX0NSRUFURV9ERVRBQ0hFRCAxCiAvKiB0aGUgZGVmYXVsdCA6IGpv
aW5hYmxlICovCiAjZGVmaW5lIFBUSFJFQURfQ1JFQVRFX0pPSU5BQkxFIDAK
LQotCi0vKiB0aGVzZSBzaG91bGRuJ3QgYmUgZGVmaW5lZCBoZXJlIGJ1dCBp
biBzeXMvdHlwZXMuCi0gKiBkZWZpbmluZyBpbiBzeXMvdHlwZXMgbXVnaHQg
YWxzbyBhbGxvdyB1cyB0byBvdmVycmlkZSB0aGVtIGZvciB0aGUgaW50ZXJu
YWwgZnVuY3Rpb25zCi0gKiBtb3JlIGVhc2lseSAoaW50ZXJuYWwgc3lzL3R5
cGVzIHZzIGV4dGVybmFsIHN5cy90eXBlIC0gZGV2IHRob3VnaHRzIG9uIHRo
aXM/IAorI2RlZmluZSBQVEhSRUFEX0VYUExJQ0lUX1NDSEVEIDEKKyNkZWZp
bmUgUFRIUkVBRF9JTkhFUklUX1NDSEVEIDAKKyNkZWZpbmUgUFRIUkVBRF9N
VVRFWF9ERUZBVUxUIDAKKyNkZWZpbmUgUFRIUkVBRF9NVVRFWF9FUlJPUkNI
RUNLIDEKKyNkZWZpbmUgUFRIUkVBRF9NVVRFWF9OT1JNQUwgMgorLyogdGhp
cyBzaG91bGQgYmUgdG9vIGxvdyB0byBldmVyIGJlIGEgdmFsaWQgYWRkcmVz
cyAqLworI2RlZmluZSBQVEhSRUFEX01VVEVYX0lOSVRJQUxJWkVSICh2b2lk
ICopMjAKKyNkZWZpbmUgUFRIUkVBRF9NVVRFWF9SRUNVUlNJVkUgMAorI2Rl
ZmluZSBQVEhSRUFEX09OQ0VfSU5JVCB7IFBUSFJFQURfTVVURVhfSU5JVElB
TElaRVIsIDAgfQorI2RlZmluZSBQVEhSRUFEX1BSSU9fSU5IRVJJVAorI2Rl
ZmluZSBQVEhSRUFEX1BSSU9fTk9ORQorI2RlZmluZSBQVEhSRUFEX1BSSU9f
UFJPVEVDVAorI2RlZmluZSBQVEhSRUFEX1BST0NFU1NfU0hBUkVEIDEKKyNk
ZWZpbmUgUFRIUkVBRF9QUk9DRVNTX1BSSVZBVEUgMAorI2RlZmluZSBQVEhS
RUFEX1JXTE9DS19JTklUSUFMSVpFUgorLyogcHJvY2VzcyBpcyB0aGUgZGVm
YXVsdCAqLworI2RlZmluZSBQVEhSRUFEX1NDT1BFX1BST0NFU1MgMAorI2Rl
ZmluZSBQVEhSRUFEX1NDT1BFX1NZU1RFTSAxCisKKworLyogQXR0cmlidXRl
cyAqLworaW50IHB0aHJlYWRfYXR0cl9kZXN0cm95IChwdGhyZWFkX2F0dHJf
dCAqKTsKK2ludCBwdGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUgKGNvbnN0
IHB0aHJlYWRfYXR0cl90ICosIGludCAqKTsKK2ludCBwdGhyZWFkX2F0dHJf
Z2V0aW5oZXJpdHNjaGVkIChjb25zdCBwdGhyZWFkX2F0dHJfdCAqLCBpbnQg
Kik7CitpbnQgcHRocmVhZF9hdHRyX2dldHNjaGVkcGFyYW0gKGNvbnN0IHB0
aHJlYWRfYXR0cl90ICosIHN0cnVjdCBzY2hlZF9wYXJhbSAqKTsKK2ludCBw
dGhyZWFkX2F0dHJfZ2V0c2NoZWRwb2xpY3kgKGNvbnN0IHB0aHJlYWRfYXR0
cl90ICosIGludCAqKTsKK2ludCBwdGhyZWFkX2F0dHJfZ2V0c2NvcGUgKGNv
bnN0IHB0aHJlYWRfYXR0cl90ICosIGludCAqKTsKK2ludCBwdGhyZWFkX2F0
dHJfaW5pdCAocHRocmVhZF9hdHRyX3QgKik7CitpbnQgcHRocmVhZF9hdHRy
X3NldGRldGFjaHN0YXRlIChwdGhyZWFkX2F0dHJfdCAqLCBpbnQpOworaW50
IHB0aHJlYWRfYXR0cl9zZXRpbmhlcml0c2NoZWQgKHB0aHJlYWRfYXR0cl90
ICosIGludCk7CitpbnQgcHRocmVhZF9hdHRyX3NldHNjaGVkcGFyYW0gKHB0
aHJlYWRfYXR0cl90ICosIGNvbnN0IHN0cnVjdCBzY2hlZF9wYXJhbSAqKTsK
K2ludCBwdGhyZWFkX2F0dHJfc2V0c2NoZWRwb2xpY3kgKHB0aHJlYWRfYXR0
cl90ICosIGludCk7CitpbnQgcHRocmVhZF9hdHRyX3NldHNjb3BlIChwdGhy
ZWFkX2F0dHJfdCAqLCBpbnQpOworCisjaWZkZWYgX1BPU0lYX1RIUkVBRF9B
VFRSX1NUQUNLQUREUgorLyogVGhlc2UgZnVuY3Rpb25zIG1heSBiZSBpbXBs
ZW1lbnRhYmxlIHZpYSBzb21lIGxvdyBsZXZlbCB0cmlja2VyeS4gRm9yIG5v
dyB0aGV5IGFyZQorICogTm90IHN1cHBvcnRlZCBvciBpbXBsZW1lbnRlZC4g
VGhlIHByb3RvdHlwZXMgYXJlIGhlcmUgc28gaWYgc29tZW9uZSBncmVwcyB0
aGUgCisgKiBzb3VyY2UgdGhleSB3aWxsIHNlZSB0aGVzZSBjb21tZW50cwog
ICovCi0gIHR5cGVkZWYgdm9pZCAqcHRocmVhZF90OwotICB0eXBlZGVmIHZv
aWQgKnB0aHJlYWRfbXV0ZXhfdDsKK2ludCBwdGhyZWFkX2F0dHJfZ2V0c3Rh
Y2thZGRyIChjb25zdCBwdGhyZWFkX2F0dHJfdCAqLCB2b2lkICoqKTsKK2lu
dCBwdGhyZWFkX2F0dHJfc2V0c3RhY2thZGRyIChwdGhyZWFkX2F0dHJfdCAq
LCB2b2lkICopOworI2VuZGlmCisKKyNpZmRlZiBfUE9TSVhfVEhSRUFEX0FU
VFJfU1RBQ0tTSVpFCitpbnQgcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZSAo
Y29uc3QgcHRocmVhZF9hdHRyX3QgKiwgc2l6ZV90ICopOworaW50IHB0aHJl
YWRfYXR0cl9zZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICosIHNpemVf
dCk7CisjZW5kaWYKIAotICB0eXBlZGVmIHZvaWQgKnB0aHJlYWRfa2V5X3Q7
Ci0gIHR5cGVkZWYgdm9pZCAqcHRocmVhZF9hdHRyX3Q7Ci0gIHR5cGVkZWYg
dm9pZCAqcHRocmVhZF9tdXRleGF0dHJfdDsKLSAgdHlwZWRlZiB2b2lkICpw
dGhyZWFkX2NvbmRhdHRyX3Q7Ci0gIHR5cGVkZWYgdm9pZCAqcHRocmVhZF9j
b25kX3Q7Ci0KLS8qICBUaHJlYWRDcmVhdGlvbiAqLwotICBpbnQgcHRocmVh
ZF9jcmVhdGUgKHB0aHJlYWRfdCAqIHRocmVhZCwgY29uc3QgcHRocmVhZF9h
dHRyX3QgKiBhdHRyLAotCQkgICAgICB2b2lkICooKikodm9pZCAqKSwgdm9p
ZCAqYXJnKTsKLSAgaW50IHB0aHJlYWRfYXR0cl9pbml0IChwdGhyZWFkX2F0
dHJfdCAqIGF0dHIpOwotICBpbnQgcHRocmVhZF9hdHRyX2Rlc3Ryb3kgKHB0
aHJlYWRfYXR0cl90ICogYXR0cik7Ci0gIGludCBwdGhyZWFkX2F0dHJfc2V0
ZGV0YWNoc3RhdGUgKHB0aHJlYWRfYXR0cl90ICosIGludCk7Ci0gIGludCBw
dGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUgKGNvbnN0IHB0aHJlYWRfYXR0
cl90ICosIGludCAqKTsKLSAgaW50IHB0aHJlYWRfYXR0cl9zZXRzdGFja3Np
emUgKHB0aHJlYWRfYXR0cl90ICogYXR0ciwgc2l6ZV90IHNpemUpOwotICBp
bnQgcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZSAocHRocmVhZF9hdHRyX3Qg
KiBhdHRyLCBzaXplX3QgKiBzaXplKTsKK2ludCBwdGhyZWFkX2NhbmNlbCAo
cHRocmVhZF90KTsKKy8qIE1hY3JvcyBmb3IgY2xlYW51cF9wdXNoIGFuZCBw
b3A7IAorICogVGhlIGZ1bmN0aW9uIGRlZmluaXRpb25zIGFyZQordm9pZCBw
dGhyZWFkX2NsZWFudXBfcHVzaCh2b2lkICgqcm91dGluZSkodm9pZCopLCB2
b2lkICphcmcpOwordm9pZCBwdGhyZWFkX2NsZWFudXBfcG9wKGludCBleGVj
dXRlKTsKKyovCit0eXBlZGVmIHZvaWQgX19jbGVhbnVwX3JvdXRpbmVfdHlw
ZSAodm9pZCAqKTsKKworI2RlZmluZSBwdGhyZWFkX2NsZWFudXBfcHVzaCAo
Zm4sIGFyZykgeyBfX2NsZWFudXBfcm91dGluZV90eXBlIF9fY2xlYW51cF9y
b3V0aW5lPWZuOyBcCit2b2lkICpfX2NsZWFudXBfcGFyYW09YXJnOworI2Rl
ZmluZSBwdGhyZWFkX2NsZWFudXBfcG9wIChleGVjdXRlKSBpZiAoZXhlY3V0
ZSkgX19jbGVhbnVwX3JvdXRpbmUoX19jbGVhbnVwX3BhcmFtKTsgfQogCiAv
KiBDb25kaXRpb24gdmFyaWFibGVzICovCi0gIGludCBwdGhyZWFkX2NvbmRf
YnJvYWRjYXN0IChwdGhyZWFkX2NvbmRfdCAqKTsKLSAgaW50IHB0aHJlYWRf
Y29uZF9kZXN0cm95IChwdGhyZWFkX2NvbmRfdCAqKTsKLSAgaW50IHB0aHJl
YWRfY29uZF9pbml0IChwdGhyZWFkX2NvbmRfdCAqLCBjb25zdCBwdGhyZWFk
X2NvbmRhdHRyX3QgKik7Ci0gIGludCBwdGhyZWFkX2NvbmRfc2lnbmFsIChw
dGhyZWFkX2NvbmRfdCAqKTsKLSAgaW50IHB0aHJlYWRfY29uZF90aW1lZHdh
aXQgKHB0aHJlYWRfY29uZF90ICosCi0JCQkgICAgICBwdGhyZWFkX211dGV4
X3QgKiwgY29uc3Qgc3RydWN0IHRpbWVzcGVjICopOwotICBpbnQgcHRocmVh
ZF9jb25kX3dhaXQgKHB0aHJlYWRfY29uZF90ICosIHB0aHJlYWRfbXV0ZXhf
dCAqKTsKLSAgaW50IHB0aHJlYWRfY29uZGF0dHJfZGVzdHJveSAocHRocmVh
ZF9jb25kYXR0cl90ICopOwotICBpbnQgcHRocmVhZF9jb25kYXR0cl9nZXRw
c2hhcmVkIChjb25zdCBwdGhyZWFkX2NvbmRhdHRyX3QgKiwgaW50ICopOwot
ICBpbnQgcHRocmVhZF9jb25kYXR0cl9pbml0IChwdGhyZWFkX2NvbmRhdHRy
X3QgKik7Ci0gIGludCBwdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQgKHB0
aHJlYWRfY29uZGF0dHJfdCAqLCBpbnQpOwotCi0KLS8qIFRocmVhZCBDb250
cm9sICovCi0gIGludCBwdGhyZWFkX2RldGFjaCAocHRocmVhZF90IHRocmVh
ZCk7Ci0gIGludCBwdGhyZWFkX2pvaW4gKHB0aHJlYWRfdCB0aHJlYWQsIHZv
aWQgKip2YWx1ZV9wdHIpOwotCi0vKiBUaHJlYWQgRXhpdCAqLwotICB2b2lk
IHB0aHJlYWRfZXhpdCAodm9pZCAqdmFsdWVfcHRyKTsKLQotLyogVGhyZWFk
IFNwZWNpZmljRGF0YSAqLwotICBpbnQgcHRocmVhZF9rZXlfY3JlYXRlIChw
dGhyZWFkX2tleV90ICosIHZvaWQgKCopKHZvaWQgKikpOwotICBpbnQgcHRo
cmVhZF9rZXlfZGVsZXRlIChwdGhyZWFkX2tleV90ICoga2V5KTsKLSAgaW50
IHB0aHJlYWRfc2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5LCBjb25z
dCB2b2lkICp2YWx1ZSk7Ci0gIHZvaWQgKnB0aHJlYWRfZ2V0c3BlY2lmaWMg
KHB0aHJlYWRfa2V5X3Qga2V5KTsKLQotLyogVGhyZWFkIHNpZ25hbCAoc2hv
dWxkIGJlIGluIHNpZ25hbC5oKSAqLwotICBpbnQgcHRocmVhZF9raWxsIChw
dGhyZWFkX3QgKiB0aHJlYWQsIGludCBzaWcpOwotICBpbnQgcHRocmVhZF9z
aWdtYXNrIChpbnQgb3BlcmF0aW9uLCBjb25zdCBzaWdzZXRfdCAqIHNldCwK
LQkJICAgICAgIHNpZ3NldF90ICogb2xkX3NldCk7Ci0KLS8qICBJRCAqLwot
ICBwdGhyZWFkX3QgcHRocmVhZF9zZWxmICgpOwotICBpbnQgcHRocmVhZF9l
cXVhbCAocHRocmVhZF90IHQxLCBwdGhyZWFkX3QgdDIpOwotCi0vKiBNdXRl
eGVzICAqLwotICBpbnQgcHRocmVhZF9tdXRleF9pbml0IChwdGhyZWFkX211
dGV4X3QgKiBtdXRleCwKLQkJCSAgY29uc3QgcHRocmVhZF9tdXRleGF0dHJf
dCAqKTsKLSAgaW50IHB0aHJlYWRfbXV0ZXhfbG9jayAocHRocmVhZF9tdXRl
eF90ICogbXV0ZXh0KTsKLSAgaW50IHB0aHJlYWRfbXV0ZXhfdHJ5bG9jayAo
cHRocmVhZF9tdXRleF90ICogbXV0ZXh0KTsKLSAgaW50IHB0aHJlYWRfbXV0
ZXhfdW5sb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleHQpOwotICBpbnQg
cHRocmVhZF9tdXRleF9kZXN0cm95IChwdGhyZWFkX211dGV4X3QgKiBtdXRl
eHQpOworaW50IHB0aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0aHJlYWRfY29u
ZF90ICopOworaW50IHB0aHJlYWRfY29uZF9kZXN0cm95IChwdGhyZWFkX2Nv
bmRfdCAqKTsKK2ludCBwdGhyZWFkX2NvbmRfaW5pdCAocHRocmVhZF9jb25k
X3QgKiwgY29uc3QgcHRocmVhZF9jb25kYXR0cl90ICopOworaW50IHB0aHJl
YWRfY29uZF9zaWduYWwgKHB0aHJlYWRfY29uZF90ICopOworaW50IHB0aHJl
YWRfY29uZF90aW1lZHdhaXQgKHB0aHJlYWRfY29uZF90ICosCisJCQkgICAg
cHRocmVhZF9tdXRleF90ICosIGNvbnN0IHN0cnVjdCB0aW1lc3BlYyAqKTsK
K2ludCBwdGhyZWFkX2NvbmRfd2FpdCAocHRocmVhZF9jb25kX3QgKiwgcHRo
cmVhZF9tdXRleF90ICopOworaW50IHB0aHJlYWRfY29uZGF0dHJfZGVzdHJv
eSAocHRocmVhZF9jb25kYXR0cl90ICopOworaW50IHB0aHJlYWRfY29uZGF0
dHJfZ2V0cHNoYXJlZCAoY29uc3QgcHRocmVhZF9jb25kYXR0cl90ICosIGlu
dCAqKTsKK2ludCBwdGhyZWFkX2NvbmRhdHRyX2luaXQgKHB0aHJlYWRfY29u
ZGF0dHJfdCAqKTsKK2ludCBwdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQg
KHB0aHJlYWRfY29uZGF0dHJfdCAqLCBpbnQpOworCitpbnQgcHRocmVhZF9j
cmVhdGUgKHB0aHJlYWRfdCAqLCBjb25zdCBwdGhyZWFkX2F0dHJfdCAqLAor
CQkgICAgdm9pZCAqKCopKHZvaWQgKiksIHZvaWQgKik7CitpbnQgcHRocmVh
ZF9kZXRhY2ggKHB0aHJlYWRfdCk7CitpbnQgcHRocmVhZF9lcXVhbCAocHRo
cmVhZF90LCBwdGhyZWFkX3QpOwordm9pZCBwdGhyZWFkX2V4aXQgKHZvaWQg
Kik7CitpbnQgcHRocmVhZF9nZXRzY2hlZHBhcmFtIChwdGhyZWFkX3QsIGlu
dCAqLCBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKik7Cit2b2lkICpwdGhyZWFkX2dl
dHNwZWNpZmljIChwdGhyZWFkX2tleV90KTsKK2ludCBwdGhyZWFkX2pvaW4g
KHB0aHJlYWRfdCwgdm9pZCAqKik7CitpbnQgcHRocmVhZF9rZXlfY3JlYXRl
IChwdGhyZWFkX2tleV90ICosIHZvaWQgKCopKHZvaWQgKikpOworaW50IHB0
aHJlYWRfa2V5X2RlbGV0ZSAocHRocmVhZF9rZXlfdCk7CisKKy8qIE11dGV4
J3MgKi8KK2ludCBwdGhyZWFkX211dGV4X2Rlc3Ryb3kgKHB0aHJlYWRfbXV0
ZXhfdCAqKTsKK2ludCBwdGhyZWFkX211dGV4X2dldHByaW9jZWlsaW5nIChj
b25zdCBwdGhyZWFkX211dGV4X3QgKiwgaW50ICopOworaW50IHB0aHJlYWRf
bXV0ZXhfaW5pdCAocHRocmVhZF9tdXRleF90ICosIGNvbnN0IHB0aHJlYWRf
bXV0ZXhhdHRyX3QgKik7CitpbnQgcHRocmVhZF9tdXRleF9sb2NrIChwdGhy
ZWFkX211dGV4X3QgKik7CitpbnQgcHRocmVhZF9tdXRleF9zZXRwcmlvY2Vp
bGluZyAocHRocmVhZF9tdXRleF90ICosIGludCwgaW50ICopOworaW50IHB0
aHJlYWRfbXV0ZXhfdHJ5bG9jayAocHRocmVhZF9tdXRleF90ICopOworaW50
IHB0aHJlYWRfbXV0ZXhfdW5sb2NrIChwdGhyZWFkX211dGV4X3QgKik7Citp
bnQgcHRocmVhZF9tdXRleGF0dHJfZGVzdHJveSAocHRocmVhZF9tdXRleGF0
dHJfdCAqKTsKK2ludCBwdGhyZWFkX211dGV4YXR0cl9nZXRwcmlvY2VpbGlu
ZyAoY29uc3QgcHRocmVhZF9tdXRleGF0dHJfdCAqLCBpbnQgKik7CitpbnQg
cHRocmVhZF9tdXRleGF0dHJfZ2V0cHJvdG9jb2wgKGNvbnN0IHB0aHJlYWRf
bXV0ZXhhdHRyX3QgKiwgaW50ICopOworaW50IHB0aHJlYWRfbXV0ZXhhdHRy
X2dldHBzaGFyZWQgKGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKiwgaW50
ICopOworaW50IHB0aHJlYWRfbXV0ZXhhdHRyX2dldHR5cGUgKGNvbnN0IHB0
aHJlYWRfbXV0ZXhhdHRyX3QgKiwgaW50ICopOworaW50IHB0aHJlYWRfbXV0
ZXhhdHRyX2luaXQgKHB0aHJlYWRfbXV0ZXhhdHRyX3QgKik7CitpbnQgcHRo
cmVhZF9tdXRleGF0dHJfc2V0cHJpb2NlaWxpbmcgKHB0aHJlYWRfbXV0ZXhh
dHRyX3QgKiwgaW50KTsKK2ludCBwdGhyZWFkX211dGV4YXR0cl9zZXRwcm90
b2NvbCAocHRocmVhZF9tdXRleGF0dHJfdCAqLCBpbnQpOworaW50IHB0aHJl
YWRfbXV0ZXhhdHRyX3NldHBzaGFyZWQgKHB0aHJlYWRfbXV0ZXhhdHRyX3Qg
KiwgaW50KTsKK2ludCBwdGhyZWFkX211dGV4YXR0cl9zZXR0eXBlIChwdGhy
ZWFkX211dGV4YXR0cl90ICosIGludCk7CisKK2ludCBwdGhyZWFkX29uY2Ug
KHB0aHJlYWRfb25jZV90ICosIHZvaWQgKCopKHZvaWQpKTsKKworLyogQ29u
Y3VycmVuY3kgbGV2ZWxzIC0gWC9PcGVuIGludGVyZmFjZSAqLworaW50IHB0
aHJlYWRfZ2V0Y29uY3VycmVuY3kgKHZvaWQpOworaW50IHB0aHJlYWRfc2V0
Y29uY3VycmVuY3kgKGludCk7CisKKworcHRocmVhZF90IHB0aHJlYWRfc2Vs
ZiAodm9pZCk7CitpbnQgcHRocmVhZF9zZXRjYW5jZWxzdGF0ZSAoaW50LCBp
bnQgKik7CitpbnQgcHRocmVhZF9zZXRjYW5jZWx0eXBlIChpbnQsIGludCAq
KTsKK2ludCBwdGhyZWFkX3NldHNjaGVkcGFyYW0gKHB0aHJlYWRfdCwgaW50
LCBjb25zdCBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKik7CitpbnQgcHRocmVhZF9z
ZXRzcGVjaWZpYyAocHRocmVhZF9rZXlfdCwgY29uc3Qgdm9pZCAqKTsKK3Zv
aWQgcHRocmVhZF90ZXN0Y2FuY2VsICh2b2lkKTsKKworLyogTm9uIHBvc2l4
IGNhbGxzICovCisKK2ludCBwdGhyZWFkX3N1c3BlbmQgKHB0aHJlYWRfdCk7
CitpbnQgcHRocmVhZF9jb250aW51ZSAocHRocmVhZF90KTsKKwogCiAjaWZk
ZWYgX19jcGx1c3BsdXMKIH0KICNlbmRpZgogCi0jZW5kaWYJCQkJLyogX1BU
SFJFQURfSCAqLworI2VuZGlmIC8qIF9QVEhSRUFEX0ggKi8KSW5kZXg6IGlu
Y2x1ZGUvc2NoZWQuaAo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ClJDUyBmaWxl
OiAvY3ZzL3NyYy9zcmMvd2luc3VwL2N5Z3dpbi9pbmNsdWRlL3NjaGVkLmgs
dgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMQpkaWZmIC11IC1wIC1yMS4xIHNj
aGVkLmgKLS0tIHNjaGVkLmgJMjAwMS8wMy8yMSAxNDowMDoyOQkxLjEKKysr
IHNjaGVkLmgJMjAwMS8wNC8xMiAwMDoyNDowNApAQCAtMzEsMjEgKzMxLDMy
IEBAIGV4dGVybiAiQyIgewogI2VuZGlmCiAKIC8qIG1heCBwcmlvcml0eSBm
b3IgcG9saWN5ICovCi0gIGludCBzY2hlZF9nZXRfcHJpb3JpdHlfbWF4IChp
bnQpOworaW50IHNjaGVkX2dldF9wcmlvcml0eV9tYXggKGludCk7CiAvKiBt
aW4gcHJpb3JpdHkgZm9yIHBvbGljeSAqLwotICBpbnQgc2NoZWRfZ2V0X3By
aW9yaXR5X21pbiAoaW50KTsKK2ludCBzY2hlZF9nZXRfcHJpb3JpdHlfbWlu
IChpbnQpOwogLyogZ2V0IHNjaGVkIHBhcmFtcyBmb3IgcHJvY2VzcyAqLwot
ICBpbnQgc2NoZWRfZ2V0cGFyYW0gKHBpZF90LCBzdHJ1Y3Qgc2NoZWRfcGFy
YW0gKik7CitpbnQgc2NoZWRfZ2V0cGFyYW0gKHBpZF90LCBzdHJ1Y3Qgc2No
ZWRfcGFyYW0gKik7CiAvKiBnZXQgdGhlIHNjaGVkdWxlciBmb3IgcGlkICov
Ci0gIGludCBzY2hlZF9nZXRzY2hlZHVsZXIgKHBpZF90KTsKK2ludCBzY2hl
ZF9nZXRzY2hlZHVsZXIgKHBpZF90KTsKIC8qIGdldCB0aGUgdGltZSBxdWFu
dHVtIGZvciBwaWQgKi8KLSAgaW50IHNjaGVkX3JyX2dldF9pbnRlcnZhbCAo
cGlkX3QsIHN0cnVjdCB0aW1lc3BlYyAqKTsKK2ludCBzY2hlZF9ycl9nZXRf
aW50ZXJ2YWwgKHBpZF90LCBzdHJ1Y3QgdGltZXNwZWMgKik7CiAvKiBzZXQg
dGhlIHNjaGVkdWxpbmcgcGFyYW1ldGVycyAqLwotICBpbnQgc2NoZWRfc2V0
cGFyYW0gKHBpZF90LCBjb25zdCBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKik7Citp
bnQgc2NoZWRfc2V0cGFyYW0gKHBpZF90LCBjb25zdCBzdHJ1Y3Qgc2NoZWRf
cGFyYW0gKik7CiAvKiBzZXQgdGhlIHNjaGVkdWxlciAqLwotICBpbnQgc2No
ZWRfc2V0c2NoZWR1bGVyIChwaWRfdCwgaW50LCBjb25zdCBzdHJ1Y3Qgc2No
ZWRfcGFyYW0gKik7CitpbnQgc2NoZWRfc2V0c2NoZWR1bGVyIChwaWRfdCwg
aW50LCBjb25zdCBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKik7CiAvKiB5aWVsZCB0
aGUgY3B1ICovCi0gIGludCBzY2hlZF95aWVsZCAodm9pZCk7CitpbnQgc2No
ZWRfeWllbGQgKHZvaWQpOworCisjaWYgZGVmaW5lZChfX0lOU0lERV9DWUdX
SU5fXykKKy8qIFRoZXNlIGFyZSBwcml2YXRlIGhlbHBlciBmdW5jdGlvbnMg
dXNlZCB0byBjYWxjdWxhdGUgc2NoZWR1bGVyIHNldHRpbmdzIGFuZAorICog
dmFsaWRhdGUgcGFyYW1ldGVycyAqLworCisvKiBjaGVjayBwYXJhbWV0ZXJz
IGZvciB2YWxpZGl0eSAqLworaW50IHZhbGlkX3NjaGVkX3BhcmFtZXRlcnMo
Y29uc3Qgc3RydWN0IHNjaGVkX3BhcmFtICopOworLyogc2V0IGEgc2luZ2xl
IHRocmVhZCdzIHByaW9yaXR5ICovCitpbnQgc2NoZWRfc2V0X3RocmVhZF9w
cmlvcml0eShIQU5ETEUgdGhyZWFkLCBpbnQgcHJpb3JpdHkpOworCisjZW5k
aWYgLyogSU5TSURFX0NZR1dJTiAqLwogCiAjaWZkZWYgX19jcGx1c3BsdXMK
IH0KSW5kZXg6IGluY2x1ZGUvY3lnd2luL3R5cGVzLmgKPT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PQpSQ1MgZmlsZTogL2N2cy9zcmMvc3JjL3dpbnN1cC9jeWd3
aW4vaW5jbHVkZS9jeWd3aW4vdHlwZXMuaCx2CnJldHJpZXZpbmcgcmV2aXNp
b24gMS4xLjEuMQpkaWZmIC11IC1wIC1yMS4xLjEuMSB0eXBlcy5oCi0tLSB0
eXBlcy5oCTIwMDAvMDIvMTcgMTk6Mzg6MzEJMS4xLjEuMQorKysgdHlwZXMu
aAkyMDAxLzA0LzEyIDAwOjI0OjA0CkBAIC0xICsxLDYzIEBACi0vKiB0eXBl
cy5oICovCisvKiB0eXBlcy5oCisKKyAgIENvcHlyaWdodCAyMDAxIFJlZCBI
YXQgSW5jLiAKKyAgIFdyaXR0ZW4gYnkgUm9iZXJ0IENvbGxpbnMgPHJidGNv
bGxpbnNAaG90bWFpbC5jb20+CisKK1RoaXMgZmlsZSBpcyBwYXJ0IG9mIEN5
Z3dpbi4KKworVGhpcyBzb2Z0d2FyZSBpcyBhIGNvcHlyaWdodGVkIHdvcmsg
bGljZW5zZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZQorQ3lnd2luIGxpY2Vu
c2UuICBQbGVhc2UgY29uc3VsdCB0aGUgZmlsZSAiQ1lHV0lOX0xJQ0VOU0Ui
IGZvcgorZGV0YWlscy4gKi8KKworI2lmZGVmIF9fY3BsdXNwbHVzCitleHRl
cm4gIkMiCit7CisjZW5kaWYKKworI2lmbmRlZiBfQ1lHV0lOX1RZUEVTX0gK
KyNkZWZpbmUgX0NZR1dJTl9UWVBFU19ICisKKyNpZiAhZGVmaW5lZChfX0lO
U0lERV9DWUdXSU5fXykgfHwgIWRlZmluZWQoX19jcGx1c3BsdXMpCisKK3R5
cGVkZWYgdm9pZCAqcHRocmVhZF90OwordHlwZWRlZiB2b2lkICpwdGhyZWFk
X211dGV4X3Q7CisKK3R5cGVkZWYgdm9pZCAqcHRocmVhZF9rZXlfdDsKK3R5
cGVkZWYgdm9pZCAqcHRocmVhZF9hdHRyX3Q7Cit0eXBlZGVmIHZvaWQgKnB0
aHJlYWRfbXV0ZXhhdHRyX3Q7Cit0eXBlZGVmIHZvaWQgKnB0aHJlYWRfY29u
ZGF0dHJfdDsKK3R5cGVkZWYgdm9pZCAqcHRocmVhZF9jb25kX3Q7CisKKyAg
LyogVGhlc2UgdmFyaWFibGVzIGFyZSBub3QgdXNlciBhbHRlcmFibGUuIFRo
aXMgbWVhbnMgeW91IS4gKi8KK3R5cGVkZWYgc3RydWN0Cit7CisgIHB0aHJl
YWRfbXV0ZXhfdCBtdXRleDsKKyAgaW50IHN0YXRlOworfQorcHRocmVhZF9v
bmNlX3Q7Cit0eXBlZGVmIHZvaWQgKnB0aHJlYWRfcndsb2NrX3Q7Cit0eXBl
ZGVmIHZvaWQgKnB0aHJlYWRfcndsb2NrYXR0cl90OworCisjZWxzZQorCisv
KiBwdGhyZWFkcyB0eXBlcyAqLworCit0eXBlZGVmIGNsYXNzIHB0aHJlYWQg
KnB0aHJlYWRfdDsKK3R5cGVkZWYgY2xhc3MgcHRocmVhZF9tdXRleCAqcHRo
cmVhZF9tdXRleF90OwordHlwZWRlZiBjbGFzcyBwdGhyZWFkX2tleSAqcHRo
cmVhZF9rZXlfdDsKK3R5cGVkZWYgY2xhc3MgcHRocmVhZF9hdHRyICpwdGhy
ZWFkX2F0dHJfdDsKK3R5cGVkZWYgY2xhc3MgcHRocmVhZF9tdXRleGF0dHIg
KnB0aHJlYWRfbXV0ZXhhdHRyX3Q7Cit0eXBlZGVmIGNsYXNzIHB0aHJlYWRf
Y29uZGF0dHIgKnB0aHJlYWRfY29uZGF0dHJfdDsKK3R5cGVkZWYgY2xhc3Mg
cHRocmVhZF9jb25kICpwdGhyZWFkX2NvbmRfdDsKK3R5cGVkZWYgY2xhc3Mg
cHRocmVhZF9vbmNlIHB0aHJlYWRfb25jZV90OwordHlwZWRlZiBjbGFzcyBw
dGhyZWFkX3J3bG9jayAqcHRocmVhZF9yd2xvY2tfdDsKK3R5cGVkZWYgY2xh
c3MgcHRocmVhZF9yd2xvY2thdHRyICpwdGhyZWFkX3J3bG9ja2F0dHJfdDsK
KworLyogc2VtYXBob3JlcyB0eXBlcyAqLwordHlwZWRlZiBjbGFzcyBzZW1h
cGhvcmUgKnNlbV90OworI2VuZGlmIC8qIF9fSU5TSURFX0NZR1dJTl9fICov
CisjZW5kaWYgLyogX0NZR1dJTl9UWVBFU19IICovCisKKyNpZmRlZiBfX2Nw
bHVzcGx1cworfQorI2VuZGlmCg==

------------=_1583532847-65438-40--
