Return-Path: <corinna@sourceware.org>
Received: by sourceware.org (Postfix, from userid 2155)
	id 2AF31385743A; Thu, 31 Oct 2024 17:09:18 +0000 (GMT)
DKIM-Filter: OpenDKIM Filter v2.11.0 sourceware.org 2AF31385743A
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cygwin.com;
	s=default; t=1730394558;
	bh=y24jDBmV5BQ7TzYZZhIO1C3T5NXXL9LqjxSgzOogP+0=;
	h=Date:From:To:Subject:Reply-To:References:In-Reply-To:From;
	b=t+RNUSyvPFQoQ1dumyl6Nn/q15zCi0OgYwWX8g/9kNFvarp7XGiT6g2uXVlMb0lIJ
	 2Jl9fYeOkdZfxj8s2zyezwA3m9djXDAngcnHdFlyAIaNGqyYn+wMAMZ7DKd/mzwO0V
	 k2yiv4by5r2v4g5xoas3RM+9vPBL3gvdZSHzYfcg=
Received: by calimero.vinschen.de (Postfix, from userid 500)
	id 2ADF9A80BC2; Thu, 31 Oct 2024 18:07:48 +0100 (CET)
Date: Thu, 31 Oct 2024 18:07:48 +0100
From: Corinna Vinschen <corinna-cygwin@cygwin.com>
To: cygwin-patches@cygwin.com
Subject: Re: [PATCH v8] Cygwin: pipe: Switch pipe mode to blocking mode by
 default
Message-ID: <ZyO5ZP5YLhZ7CEIC@calimero.vinschen.de>
Reply-To: cygwin-patches@cygwin.com
Mail-Followup-To: cygwin-patches@cygwin.com
References: <20241024175845.74efaa1eb6ca067d88d28b51@nifty.ne.jp>
 <ZxofkPUww7LOZ9ZB@calimero.vinschen.de>
 <20241027175722.827ae77c67c88a112862e07e@nifty.ne.jp>
 <Zx9fk6yQ1etCVwek@calimero.vinschen.de>
 <20241028202301.7499a9f04335f362c72310db@nifty.ne.jp>
 <20241028202516.0dd4c86cb2efa9f7db8c856d@nifty.ne.jp>
 <Zx98ETE7E1DMGirF@calimero.vinschen.de>
 <20241031173642.34cf4980cea2276e7402c4d2@nifty.ne.jp>
 <ZyNY36rwRtAVglBP@calimero.vinschen.de>
 <20241101012506.e7279dbbace0480badd394b4@nifty.ne.jp>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20241101012506.e7279dbbace0480badd394b4@nifty.ne.jp>
List-Id: <cygwin-patches.cygwin.com>

On Nov  1 01:25, Takashi Yano wrote:
> Hi Corinna,
> 
> On Thu, 31 Oct 2024 11:15:59 +0100
> Corinna Vinschen wrote:
> > Hi Takashi,
> > [...]
> > Yes, I will, but this is still puzzeling. While negative shift values
> > are undefined in C, there's this:
> > 
> >   The Intel Pentium SAL instruction (generated by both gcc and Microsoft
> >   C++ to evaluate left-shifts) only uses the bottom five bits of the
> >   shift amount
> > 
> > The last 5 bits of 63 - 54 =   9 are 01001,
> > the last 5 bits of 31 - 54 = -23 are 01001 as well.
> > [...]
> > I get the same result, with and without -O2 (but then again, with -O2
> > the sall instructions are folded into a single instruction again).
> > 
> > Do you get a different result?  Do you run this on an AMD CPU perhaps,
> > and the AMDs implement the SAL instruction differently?
> 
> Please try this:
> 
> #include <stdio.h>
> #include <stdlib.h>
> 
> #define PIPE_BUF 4096
> int
> main (int argc, char **argv)
> {
>   ssize_t avail = atol (argv[1]);
>   unsigned long len1;
> 
>   if (avail < 1)
>     return 0;
>   if (avail == 1)
>     len1 >>= 1;
>   else if (avail >= PIPE_BUF)
>     len1 = avail & ~(PIPE_BUF -1);
>   else
>     len1 = 1 << (31 - __builtin_clzl (avail));
> 
>   printf ("%ld %lu\n", avail, len1);
>   return 0;
> }
> 
> If the test case is compiled without optimization option,
> $ ./a.exe 960
> 960 512
> 
> however, with -O2 option
> $ ./a.exe 960
> 960 0
> 
> I am using gcc (GCC) 12.4.0 of cygwin gcc package.
> 
> It seems that the calcualtion of
>     len1 = 1 << (31 - __builtin_clzl (avail));
> is completely omitted.
> 
> In this case, avail == 1 or 1 < avail < 4096 for the last "else".
> Therefore __builtin_clzl (avail) is always larger thatn 31.
> 
> I guess the compiler ommitted the undefined calculation.

This makes a lot of sense.


Corinna
