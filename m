Return-Path: <cygwin-patches-return-3038-listarch-cygwin-patches=sourceware.cygnus.com@cygwin.com>
Received: (qmail 18799 invoked by alias); 24 Sep 2002 10:44:56 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sources.redhat.com/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sources.redhat.com/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Received: (qmail 18774 invoked from network); 24 Sep 2002 10:44:55 -0000
X-Authentication-Warning: atacama.four-d.de: mail set sender to <tpfaff@gmx.net> using -f
Date: Tue, 24 Sep 2002 03:44:00 -0000
From: Thomas Pfaff <tpfaff@gmx.net>
To: cygwin-patches@cygwin.com
Subject: [PATCH] MTinterface patch part 2
Message-ID: <Pine.WNT.4.44.0209241207290.327-200000@algeria.intern.net>
X-X-Sender: pfaff@antarctica.intern.net
MIME-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="3811956-4108-1032863698=:327"
Content-ID: <Pine.WNT.4.44.0209241244270.327@algeria.intern.net>
X-SW-Source: 2002-q3/txt/msg00486.txt.bz2

  This message is in MIME format.  The first part should be readable text,
  while the remaining parts are likely unreadable without MIME-aware tools.
  Send mail to mime@docserver.cac.washington.edu for more info.

--3811956-4108-1032863698=:327
Content-Type: TEXT/PLAIN; CHARSET=US-ASCII
Content-ID: <Pine.WNT.4.44.0209241244271.327@algeria.intern.net>
Content-length: 1278


This is patch 2 of 3 for MTinterface.

It will convert the TLS handling for reents and thread self pointer to use
the fork save pthread keys. This is important for forks from threads other
than the main thread.

2002-09-24  Thomas Pfaff  <tpfaff@gmx.net>

	* init.cc (dll_entry): Change reents initialization.
	* thread.cc (MT_INTERFACE): Move to "thread.h".
	(_reent_clib): Use new reents handling.
	(_reent_winsup): Ditto.
	(MTinterface::Init): Remove member variables initialization.
	They are now initialized via constructor. Initialize TLS only
	when process is not forked.
	(MTinterface::doInit): Implement. Initialize TLS for reents and
	thread self pointer.
	(MTinterface::fixup_after_fork); Reset threadcount to 1.
	Initialize thread self pointer.
	(pthread::self): Rename temp to thread. Initialize thread self
	pointer if uninitialized.
	(pthread::setTlsSelfPointer): Use new thread self handling.
	(pthread::thread_init_wrapper): Use new reents handling.
	* thread.h (MTinterface::reent_index): Remove.
	(MTinterface::thread_self_dwTlsIndex): Ditto.
	(MTinterface::indexallocated): Ditto.
	(MTinterface::reent_key): New member.
	(MTinterface::thread_self_key): Ditto.
	(MTinterface::MTinterface): Initialize all members.
	(MT_INTERFACE): Move from "thread.cc".





--3811956-4108-1032863698=:327
Content-Type: TEXT/PLAIN; NAME="mtinterface2.patch"
Content-Transfer-Encoding: BASE64
Content-ID: <Pine.WNT.4.44.0209241234580.327@algeria.intern.net>
Content-Description: 
Content-Disposition: ATTACHMENT; FILENAME="mtinterface2.patch"
Content-length: 8963

ZGlmZiAtdXJwIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi9pbml0LmNjIHNyYy93
aW5zdXAvY3lnd2luL2luaXQuY2MKLS0tIHNyYy5vbGQvd2luc3VwL2N5Z3dp
bi9pbml0LmNjCVN1biBTZXAgMjIgMjE6MTE6MzggMjAwMgorKysgc3JjL3dp
bnN1cC9jeWd3aW4vaW5pdC5jYwlUdWUgU2VwIDI0IDExOjEyOjU5IDIwMDIK
QEAgLTI1LDEyICsyNSw4IEBAIFdJTkFQSSBkbGxfZW50cnkgKEhBTkRMRSBo
LCBEV09SRCByZWFzb24KICAgICAgIGR5bmFtaWNhbGx5X2xvYWRlZCA9IChz
dGF0aWNfbG9hZCA9PSBOVUxMKTsKICAgICAgIGJyZWFrOwogICAgIGNhc2Ug
RExMX1RIUkVBRF9BVFRBQ0g6Ci0gICAgICBpZiAodXNlcl9kYXRhLT50aHJl
YWRpbnRlcmZhY2UpCi0JewotCSAgaWYgKCFUbHNTZXRWYWx1ZSAodXNlcl9k
YXRhLT50aHJlYWRpbnRlcmZhY2UtPnJlZW50X2luZGV4LAotCQkJICAgICZ1
c2VyX2RhdGEtPnRocmVhZGludGVyZmFjZS0+cmVlbnRzKSkKLQkgICAgYXBp
X2ZhdGFsICgiU2lnIHByb2MgTVQgaW5pdCBmYWlsZWRcbiIpOwotCX0KKyAg
ICAgIGlmIChNVF9JTlRFUkZBQ0UtPnJlZW50X2tleS5zZXQgKCZNVF9JTlRF
UkZBQ0UtPnJlZW50cykpCisgICAgICAgIGFwaV9mYXRhbCgiU2lnIHByb2Mg
TVQgaW5pdCBmYWlsZWRcbiIpOwogICAgICAgYnJlYWs7CiAgICAgY2FzZSBE
TExfUFJPQ0VTU19ERVRBQ0g6CiAgICAgICBicmVhazsKZGlmZiAtdXJwIHNy
Yy5vbGQvd2luc3VwL2N5Z3dpbi90aHJlYWQuY2Mgc3JjL3dpbnN1cC9jeWd3
aW4vdGhyZWFkLmNjCi0tLSBzcmMub2xkL3dpbnN1cC9jeWd3aW4vdGhyZWFk
LmNjCVR1ZSBTZXAgMjQgMTA6NTc6MzEgMjAwMgorKysgc3JjL3dpbnN1cC9j
eWd3aW4vdGhyZWFkLmNjCVR1ZSBTZXAgMjQgMTA6NTg6MDMgMjAwMgpAQCAt
NDYsMzUgKzQ2LDI5IEBAIGRldGFpbHMuICovCiAKIGV4dGVybiBpbnQgdGhy
ZWFkc2FmZTsKIAotI2RlZmluZSBNVF9JTlRFUkZBQ0UgdXNlcl9kYXRhLT50
aHJlYWRpbnRlcmZhY2UKLQogc3RydWN0IF9yZWVudCAqCiBfcmVlbnRfY2xp
YiAoKQogewotICBpbnQgdG1wID0gR2V0TGFzdEVycm9yICgpOwogICBzdHJ1
Y3QgX19yZWVudF90ICpfciA9Ci0gICAgKHN0cnVjdCBfX3JlZW50X3QgKikg
VGxzR2V0VmFsdWUgKE1UX0lOVEVSRkFDRS0+cmVlbnRfaW5kZXgpOworICAg
IChzdHJ1Y3QgX19yZWVudF90ICopIE1UX0lOVEVSRkFDRS0+cmVlbnRfa2V5
LmdldCAoKTsKIAogI2lmZGVmIF9DWUdfVEhSRUFEX0ZBSUxTQUZFCiAgIGlm
IChfciA9PSAwKQogICAgIHN5c3RlbV9wcmludGYgKCJsb2NhbCB0aHJlYWQg
c3RvcmFnZSBub3QgaW5pdGVkIik7CiAjZW5kaWYKLQotICBTZXRMYXN0RXJy
b3IgKHRtcCk7CiAgIHJldHVybiBfci0+X2NsaWI7CiB9CiAKIHN0cnVjdCBf
d2luc3VwX3QgKgogX3JlZW50X3dpbnN1cCAoKQogewotICBpbnQgdG1wID0g
R2V0TGFzdEVycm9yICgpOwotICBzdHJ1Y3QgX19yZWVudF90ICpfcjsKLSAg
X3IgPSAoc3RydWN0IF9fcmVlbnRfdCAqKSBUbHNHZXRWYWx1ZSAoTVRfSU5U
RVJGQUNFLT5yZWVudF9pbmRleCk7CisgIHN0cnVjdCBfX3JlZW50X3QgKl9y
ID0KKyAgICAoc3RydWN0IF9fcmVlbnRfdCAqKSBNVF9JTlRFUkZBQ0UtPnJl
ZW50X2tleS5nZXQgKCk7CisKICNpZmRlZiBfQ1lHX1RIUkVBRF9GQUlMU0FG
RQogICBpZiAoX3IgPT0gMCkKICAgICBzeXN0ZW1fcHJpbnRmICgibG9jYWwg
dGhyZWFkIHN0b3JhZ2Ugbm90IGluaXRlZCIpOwogI2VuZGlmCi0gIFNldExh
c3RFcnJvciAodG1wKTsKICAgcmV0dXJuIF9yLT5fd2luc3VwOwogfQogCkBA
IC0xNjYsMzggKzE2MCwyMiBAQCBSZXNvdXJjZUxvY2tzOjpEZWxldGUgKCkK
IHZvaWQKIE1UaW50ZXJmYWNlOjpJbml0IChpbnQgZm9ya2VkKQogeworICBp
ZiAoIWZvcmtlZCkKKyAgICB7CisgICAgICBkb0luaXQgKCk7CisgICAgfQor
ICAvLyBlbHNlOiBJbml0aWFsaXppdGlvbiBpcyBkb25lIGluIGZpeHVwX2Fm
dGVyX2ZvcmsKK30KIAotICByZWVudF9pbmRleCA9IFRsc0FsbG9jICgpOwor
dm9pZAorTVRpbnRlcmZhY2U6OmRvSW5pdCAodm9pZCkKK3sKICAgcmVlbnRz
Ll9jbGliID0gX2ltcHVyZV9wdHI7CiAgIHJlZW50cy5fd2luc3VwID0gJndp
bnN1cF9yZWVudDsKLQogICB3aW5zdXBfcmVlbnQuX3Byb2Nlc3NfbG9nbWFz
ayA9IExPR19VUFRPIChMT0dfREVCVUcpOwotCi0gIFRsc1NldFZhbHVlIChy
ZWVudF9pbmRleCwgJnJlZW50cyk7Ci0gIC8vIHRoZSBzdGF0aWMgcmVlbnRf
ZGF0YSB3aWxsIGJlIHVzZWQgaW4gdGhlIG1haW4gdGhyZWFkCi0KLSAgaWYg
KCFpbmRleGFsbG9jYXRlZCkKLSAgICB7Ci0gICAgICB0aHJlYWRfc2VsZl9k
d1Rsc0luZGV4ID0gVGxzQWxsb2MgKCk7Ci0gICAgICBpZiAodGhyZWFkX3Nl
bGZfZHdUbHNJbmRleCA9PSBUTFNfT1VUX09GX0lOREVYRVMpCi0Jc3lzdGVt
X3ByaW50ZgotCSAgKCJsb2NhbCBzdG9yYWdlIGZvciB0aHJlYWQgY291bGRu
J3QgYmUgc2V0XG5UaGlzIG1lYW5zIHRoYXQgd2UgYXJlIG5vdCB0aHJlYWQg
c2FmZSEiKTsKLSAgICAgIGVsc2UKLQlpbmRleGFsbG9jYXRlZCA9ICgtMSk7
Ci0gICAgfQotCi0gIGNvbmN1cnJlbmN5ID0gMDsKLSAgdGhyZWFkY291bnQg
PSAxOyAvKjEgY3VycmVudCB0aHJlYWQgd2hlbiBJbml0IG9jY3Vycy4qLwor
ICByZWVudF9rZXkuc2V0ICgmcmVlbnRzKTsKIAogICBtYWludGhyZWFkLmlu
aXRNYWluVGhyZWFkICgpOwotCi0gIGlmIChmb3JrZWQpCi0gICAgcmV0dXJu
OwotCi0gIG11dGV4cyA9IE5VTEw7Ci0gIGNvbmRzICA9IE5VTEw7Ci0gIHNl
bWFwaG9yZXMgPSBOVUxMOwotCiB9CiAKIHZvaWQKQEAgLTIxMCw3ICsxODgs
MTAgQEAgTVRpbnRlcmZhY2U6OmZpeHVwX2JlZm9yZV9mb3JrICh2b2lkKQog
dm9pZAogTVRpbnRlcmZhY2U6OmZpeHVwX2FmdGVyX2ZvcmsgKHZvaWQpCiB7
CisgIHRocmVhZGNvdW50ID0gMTsKKwogICBwdGhyZWFkX2tleTo6Zml4dXBf
YWZ0ZXJfZm9yayAoKTsKKwogICBwdGhyZWFkX211dGV4ICptdXRleCA9IG11
dGV4czsKICAgZGVidWdfcHJpbnRmICgibXV0ZXhzIGlzICV4IixtdXRleHMp
OwogICB3aGlsZSAobXV0ZXgpCkBAIC0yMzIsMzYgKzIxMyw0MCBAQCBNVGlu
dGVyZmFjZTo6Zml4dXBfYWZ0ZXJfZm9yayAodm9pZCkKICAgICAgIHNlbS0+
Zml4dXBfYWZ0ZXJfZm9yayAoKTsKICAgICAgIHNlbSA9IHNlbS0+bmV4dDsK
ICAgICB9CisKKyAgcHRocmVhZCAqdGhyZWFkID0gcHRocmVhZDo6c2VsZiAo
ZmFsc2UpOworICBpZiAodGhyZWFkKQorICAgIHRocmVhZC0+aW5pdFRocmVh
ZCAoKTsKKyAgZWxzZQorICAgIGRvSW5pdCAoKTsKIH0KIAogLyogcHRocmVh
ZCBjYWxscyAqLwogCiAvKiBzdGF0aWMgbWV0aG9kcyAqLwogcHRocmVhZCAq
Ci1wdGhyZWFkOjpzZWxmICgpCitwdGhyZWFkOjpzZWxmIChjb25zdCBib29s
IGF1dG9faW5pdCkKIHsKLSAgcHRocmVhZCAqdGVtcCA9IChwdGhyZWFkICop
IFRsc0dldFZhbHVlIChNVF9JTlRFUkZBQ0UtPnRocmVhZF9zZWxmX2R3VGxz
SW5kZXgpOwotICBpZiAodGVtcCkKLSAgICAgIHJldHVybiB0ZW1wOwotICB0
ZW1wID0gbmV3IHB0aHJlYWQgKCk7Ci0gIHRlbXAtPnByZWNyZWF0ZSAoTlVM
TCk7Ci0gIGlmICghdGVtcC0+bWFnaWMpIHsKLSAgICAgIGRlbGV0ZSB0ZW1w
OworICBwdGhyZWFkICp0aHJlYWQgPSAocHRocmVhZCAqKSBNVF9JTlRFUkZB
Q0UtPnRocmVhZF9zZWxmX2tleS5nZXQgKCk7CisgIGlmICh0aHJlYWQgfHwg
IWF1dG9faW5pdCkKKyAgICAgIHJldHVybiB0aHJlYWQ7CisgIHRocmVhZCA9
IG5ldyBwdGhyZWFkICgpOworICB0aHJlYWQtPnByZWNyZWF0ZSAoTlVMTCk7
CisgIGlmICghdGhyZWFkLT5tYWdpYykgeworICAgICAgZGVsZXRlIHRocmVh
ZDsKICAgICAgIHJldHVybiBwdGhyZWFkTnVsbDo6Z2V0TnVsbHB0aHJlYWQg
KCk7CiAgIH0KLSAgdGVtcC0+aW5pdFRocmVhZCAoKTsKLSAgdGVtcC0+YXR0
ci5qb2luYWJsZSA9IFBUSFJFQURfQ1JFQVRFX0RFVEFDSEVEOwotICB0ZW1w
LT5qb2luZXIgPSB0ZW1wOwotICB0ZW1wLT5wb3N0Y3JlYXRlICgpOworICB0
aHJlYWQtPmluaXRUaHJlYWQgKCk7CisgIHRocmVhZC0+YXR0ci5qb2luYWJs
ZSA9IFBUSFJFQURfQ1JFQVRFX0RFVEFDSEVEOworICB0aHJlYWQtPmpvaW5l
ciA9IHRocmVhZDsKIAotICByZXR1cm4gdGVtcDsKKyAgcmV0dXJuIHRocmVh
ZDsKIH0KIAogdm9pZAogcHRocmVhZDo6c2V0VGxzU2VsZlBvaW50ZXIgKHB0
aHJlYWQgKnRoaXNUaHJlYWQpCiB7Ci0gIC8qdGhlIE9TIGRvZXNuJ3QgY2hl
Y2sgdGhpcyBmb3IgPD0gNjQgVGxzIGVudHJpZXMgKHByZSB3aW4yaykgKi8K
LSAgVGxzU2V0VmFsdWUgKE1UX0lOVEVSRkFDRS0+dGhyZWFkX3NlbGZfZHdU
bHNJbmRleCwgdGhpc1RocmVhZCk7CisgIE1UX0lOVEVSRkFDRS0+dGhyZWFk
X3NlbGZfa2V5LnNldCAodGhpc1RocmVhZCk7CiB9CiAKIApAQCAtMTQwNiw5
ICsxMzkxLDcgQEAgcHRocmVhZDo6dGhyZWFkX2luaXRfd3JhcHBlciAodm9p
ZCAqX2FyZwogCiAgIGxvY2FsX3dpbnN1cC5fcHJvY2Vzc19sb2dtYXNrID0g
TE9HX1VQVE8gKExPR19ERUJVRyk7CiAKLSAgLypUaGlzIGlzIG5vdCBjaGVj
a2VkIGJ5IHRoZSBPUyAhISAqLwotICBpZiAoIVRsc1NldFZhbHVlIChNVF9J
TlRFUkZBQ0UtPnJlZW50X2luZGV4LCAmbG9jYWxfcmVlbnQpKQotICAgIHN5
c3RlbV9wcmludGYgKCJsb2NhbCBzdG9yYWdlIGZvciB0aHJlYWQgY291bGRu
J3QgYmUgc2V0Iik7CisgIE1UX0lOVEVSRkFDRS0+cmVlbnRfa2V5LnNldCAo
JmxvY2FsX3JlZW50KTsKIAogICB0aHJlYWQtPnNldFRocmVhZElkdG9DdXJy
ZW50ICgpOwogICBzZXRUbHNTZWxmUG9pbnRlciAodGhyZWFkKTsKZGlmZiAt
dXJwIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi90aHJlYWQuaCBzcmMvd2luc3Vw
L2N5Z3dpbi90aHJlYWQuaAotLS0gc3JjLm9sZC93aW5zdXAvY3lnd2luL3Ro
cmVhZC5oCVR1ZSBTZXAgMjQgMTA6NTc6MzEgMjAwMgorKysgc3JjL3dpbnN1
cC9jeWd3aW4vdGhyZWFkLmgJVHVlIFNlcCAyNCAxMTowNjo1NSAyMDAyCkBA
IC0zNjcsNyArMzY3LDcgQEAgcHVibGljOgogICAgdmlydHVhbCB2b2lkIHB1
c2hfY2xlYW51cF9oYW5kbGVyIChfX3B0aHJlYWRfY2xlYW51cF9oYW5kbGVy
ICpoYW5kbGVyKTsKICAgIHZpcnR1YWwgdm9pZCBwb3BfY2xlYW51cF9oYW5k
bGVyIChpbnQgY29uc3QgZXhlY3V0ZSk7CiAKLSAgIHN0YXRpYyBwdGhyZWFk
KiBzZWxmICgpOworICAgc3RhdGljIHB0aHJlYWQqIHNlbGYgKGNvbnN0IGJv
b2wgYXV0b19pbml0ID0gdHJ1ZSk7CiAgICBzdGF0aWMgdm9pZCAqdGhyZWFk
X2luaXRfd3JhcHBlciAodm9pZCAqKTsKIAogICAgdmlydHVhbCB1bnNpZ25l
ZCBsb25nIGdldHNlcXVlbmNlX25wKCk7CkBAIC00ODksMTcgKzQ4OSwxMiBA
QCBjbGFzcyBNVGludGVyZmFjZQogewogcHVibGljOgogICAvLyBHZW5lcmFs
Ci0gIERXT1JEIHJlZW50X2luZGV4OwotICBEV09SRCB0aHJlYWRfc2VsZl9k
d1Rsc0luZGV4OwotICAvKiB3ZSBtYXkgZ2V0IDAgZm9yIHRoZSBUbHMgaW5k
ZXguLiBncnJyICovCi0gIGludCBpbmRleGFsbG9jYXRlZDsKICAgaW50IGNv
bmN1cnJlbmN5OwogICBsb25nIGludCB0aHJlYWRjb3VudDsKIAogICAvLyBV
c2VkIGZvciBtYWluIHRocmVhZCBkYXRhLCBhbmQgc2lncHJvYyB0aHJlYWQK
ICAgc3RydWN0IF9fcmVlbnRfdCByZWVudHM7CiAgIHN0cnVjdCBfd2luc3Vw
X3Qgd2luc3VwX3JlZW50OwotICBwdGhyZWFkIG1haW50aHJlYWQ7CiAKICAg
Y2FsbGJhY2sgKnB0aHJlYWRfcHJlcGFyZTsKICAgY2FsbGJhY2sgKnB0aHJl
YWRfY2hpbGQ7CkBAIC01MTAsMTcgKzUwNSwyNiBAQCBwdWJsaWM6CiAgIGNs
YXNzIHB0aHJlYWRfY29uZCAgKiBjb25kczsKICAgY2xhc3Mgc2VtYXBob3Jl
ICAgICAqIHNlbWFwaG9yZXM7CiAKKyAgcHRocmVhZCBtYWludGhyZWFkOwor
ICBwdGhyZWFkX2tleSByZWVudF9rZXk7CisgIHB0aHJlYWRfa2V5IHRocmVh
ZF9zZWxmX2tleTsKKwogICB2b2lkIEluaXQgKGludCk7CisgIHZvaWQgZG9J
bml0ICh2b2lkKTsKKwogICB2b2lkIGZpeHVwX2JlZm9yZV9mb3JrICh2b2lk
KTsKICAgdm9pZCBmaXh1cF9hZnRlcl9mb3JrICh2b2lkKTsKIAotICBNVGlu
dGVyZmFjZSAoKTpyZWVudF9pbmRleCAoMCksIGluZGV4YWxsb2NhdGVkICgw
KSwgdGhyZWFkY291bnQgKDEpCisgIE1UaW50ZXJmYWNlICgpIDoKKyAgICBj
b25jdXJyZW5jeSAoMCksIHRocmVhZGNvdW50ICgxKSwKKyAgICBwdGhyZWFk
X3ByZXBhcmUgKE5VTEwpLCBwdGhyZWFkX2NoaWxkIChOVUxMKSwgcHRocmVh
ZF9wYXJlbnQgKE5VTEwpLAorICAgIG11dGV4cyAoTlVMTCksIGNvbmRzIChO
VUxMKSwgc2VtYXBob3JlcyAoTlVMTCksCisgICAgbWFpbnRocmVhZCAoKSwg
cmVlbnRfa2V5IChOVUxMKSwgdGhyZWFkX3NlbGZfa2V5IChOVUxMKQogICAg
IHsKLSAgICAgIHB0aHJlYWRfcHJlcGFyZSA9IE5VTEw7Ci0gICAgICBwdGhy
ZWFkX2NoaWxkICAgPSBOVUxMOwotICAgICAgcHRocmVhZF9wYXJlbnQgID0g
TlVMTDsKICAgICB9CiB9OworCisjZGVmaW5lIE1UX0lOVEVSRkFDRSB1c2Vy
X2RhdGEtPnRocmVhZGludGVyZmFjZQogCiBleHRlcm4gIkMiCiB7Cg==

--3811956-4108-1032863698=:327--
