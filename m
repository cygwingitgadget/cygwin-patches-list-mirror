Return-Path: <cygwin-patches-return-3652-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 17437 invoked by alias); 28 Feb 2003 11:10:47 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sources.redhat.com/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sources.redhat.com/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Received: (qmail 17426 invoked from network); 28 Feb 2003 11:10:46 -0000
X-Authentication-Warning: atacama.four-d.de: mail set sender to <tpfaff@gmx.net> using -f
Date: Fri, 28 Feb 2003 11:10:00 -0000
From: Thomas Pfaff <tpfaff@gmx.net>
To: cygwin-patches@cygwin.com
Subject: [PATCH] reorganize list handling of fixable pthread objects
Message-ID: <Pine.WNT.4.44.0302281144520.371-200000@algeria.intern.net>
X-X-Sender: pfaff@antarctica.intern.net
MIME-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="1546139-24044-1046430628=:371"
X-SW-Source: 2003-q1/txt/msg00301.txt.bz2

  This message is in MIME format.  The first part should be readable text,
  while the remaining parts are likely unreadable without MIME-aware tools.
  Send mail to mime@docserver.cac.washington.edu for more info.

--1546139-24044-1046430628=:371
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-length: 2735


Reorganize the list handling of the pthreads objects by using the List
template class and remove a lot of duplicate code.


2002-02-28  Thomas Pfaff  <tpfaff@gmx.net>

	* thread.h (class List): Move inline code inside of class
	declaration.
	(pthread_mutex::fixup_after_fork): Declare as static method.
	(pthread_mutex::FixupAfterFork(pthread_mutex*): New static method.
	(pthread_mutex::FixupAfterFork(void): New method.
	(pthread_mutex::mutexes): New static member.
	(pthread_cond::fixup_after_fork): Declare as static method.
	(pthread_cond::FixupAfterFork(pthread_cond*): New static method.
	(pthread_cond::FixupAfterFork(void): New method.
	(pthread_cond::conds): New static member.
	(pthread_rwlock::fixup_after_fork): Declare as static method.
	(pthread_rwlock::FixupAfterFork(pthread_rwlock*): New static
	method.
	(pthread_rwlock::FixupAfterFork(void): New method.
	(pthread_rwlock::rwlocks): New static member.
	(semaphore::fixup_after_fork): Declare as static method.
	(semaphore::FixupAfterFork(semaphore*): New static method.
	(semaphore::FixupAfterFork(void): New method.
	(semaphore::semaphores): New static member.
	(MTinterface::mutexs): Remove.
	(MTinterface::conds): Ditto.
	(MTinterface::rwlocks): Ditto.
	(MTinterface::semaphores): Ditto.
	(MTinterface::MTinterface): Remove initialization of removed
	member variables.
	* thread.cc (MTinterface::fixup_after_fork): Change
	fixup_after_fork for pthread objects.
	(pthread_cond::conds): Instantiate.
	(pthread_cond::pthread_cond): Use List::Insert rather than custom
	list code.
	(pthread_cond::~pthread_cond): Use List::Remove rather than custom
	list code.
	(pthread_cond::fixup:after_fork): Implement.
	(pthread_cond::FixupAfterFork): Rename old fixup_after_fork
	to FixupAfterFork.
	(pthread_rwlock::rwlocks): Instantiate.
	(pthread_rwlock::pthread_crwlock): Use List::Insert rather than
	custom list code.
	(pthread_rwlock::~pthread_rwlock): Use List::Remove rather than
	custom list code.
	(pthread_rwlock::fixup:after_fork): Implement.
	(pthread_rwlock::FixupAfterFork): Rename old fixup_after_fork
	to FixupAfterFork.
	(pthread_mutex::mutexes): Instantiate.
	(pthread_mutex::pthread_mutex): Use List::Insert rather than
	custom list code.
	(pthread_mutex::~pthread_mutex): Use List::Remove rather than
	custom list code.
	(pthread_mutex::fixup:after_fork): Implement.
	(pthread_mutex::FixupAfterFork): Rename old fixup_after_fork
	to FixupAfterFork.
	(semaphore::conds): Instantiate.
	(semaphore::semaphore): Use List::Insert rather than custom list
	code.
	(semaphores::~semaphore): Use List::Remove rather than custom list
	code.
	(semaphore::fixup:after_fork): Implement.
	(semaphore::FixupAfterFork): Rename old fixup_after_fork to
	FixupAfterFork.




--1546139-24044-1046430628=:371
Content-Type: TEXT/plain; name="pthread_fixups.patch"
Content-Transfer-Encoding: BASE64
Content-ID: <Pine.WNT.4.44.0302281210280.371@algeria.intern.net>
Content-Description: 
Content-Disposition: attachment; filename="pthread_fixups.patch"
Content-length: 19626

ZGlmZiAtdXJwIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi90aHJlYWQuY2Mgc3Jj
L3dpbnN1cC9jeWd3aW4vdGhyZWFkLmNjCi0tLSBzcmMub2xkL3dpbnN1cC9j
eWd3aW4vdGhyZWFkLmNjCTIwMDMtMDItMjggMTE6MzM6MTAuMDAwMDAwMDAw
ICswMTAwCisrKyBzcmMvd2luc3VwL2N5Z3dpbi90aHJlYWQuY2MJMjAwMy0w
Mi0yOCAxMDo1NDoxNy4wMDAwMDAwMDAgKzAxMDAKQEAgLTIxNywzNCArMjE3
LDEwIEBAIE1UaW50ZXJmYWNlOjpmaXh1cF9hZnRlcl9mb3JrICh2b2lkKQog
ICB0aHJlYWRjb3VudCA9IDE7CiAgIHB0aHJlYWQ6OmluaXRNYWluVGhyZWFk
ICh0cnVlKTsKIAotICBwdGhyZWFkX211dGV4ICptdXRleCA9IG11dGV4czsK
LSAgZGVidWdfcHJpbnRmICgibXV0ZXhzIGlzICV4IixtdXRleHMpOwotICB3
aGlsZSAobXV0ZXgpCi0gICAgewotICAgICAgbXV0ZXgtPmZpeHVwX2FmdGVy
X2ZvcmsgKCk7Ci0gICAgICBtdXRleCA9IG11dGV4LT5uZXh0OwotICAgIH0K
LSAgcHRocmVhZF9jb25kICpjb25kID0gY29uZHM7Ci0gIGRlYnVnX3ByaW50
ZiAoImNvbmRzIGlzICV4Iixjb25kcyk7Ci0gIHdoaWxlIChjb25kKQotICAg
IHsKLSAgICAgIGNvbmQtPmZpeHVwX2FmdGVyX2ZvcmsgKCk7Ci0gICAgICBj
b25kID0gY29uZC0+bmV4dDsKLSAgICB9Ci0gIHB0aHJlYWRfcndsb2NrICpy
d2xvY2sgPSByd2xvY2tzOwotICBkZWJ1Z19wcmludGYgKCJyd2xvY2tzIGlz
ICV4Iixyd2xvY2tzKTsKLSAgd2hpbGUgKHJ3bG9jaykKLSAgICB7Ci0gICAg
ICByd2xvY2stPmZpeHVwX2FmdGVyX2ZvcmsgKCk7Ci0gICAgICByd2xvY2sg
PSByd2xvY2stPm5leHQ7Ci0gICAgfQotICBzZW1hcGhvcmUgKnNlbSA9IHNl
bWFwaG9yZXM7Ci0gIGRlYnVnX3ByaW50ZiAoInNlbWFwaG9yZXMgaXMgJXgi
LHNlbWFwaG9yZXMpOwotICB3aGlsZSAoc2VtKQotICAgIHsKLSAgICAgIHNl
bS0+Zml4dXBfYWZ0ZXJfZm9yayAoKTsKLSAgICAgIHNlbSA9IHNlbS0+bmV4
dDsKLSAgICB9CisgIHB0aHJlYWRfbXV0ZXg6OmZpeHVwX2FmdGVyX2Zvcmsg
KCk7CisgIHB0aHJlYWRfY29uZDo6Zml4dXBfYWZ0ZXJfZm9yayAoKTsKKyAg
cHRocmVhZF9yd2xvY2s6OmZpeHVwX2FmdGVyX2ZvcmsgKCk7CisgIHNlbWFw
aG9yZTo6Zml4dXBfYWZ0ZXJfZm9yayAoKTsKIH0KIAogLyogcHRocmVhZCBj
YWxscyAqLwpAQCAtODA3LDYgKzc4Myw4IEBAIHB0aHJlYWRfY29uZGF0dHI6
On5wdGhyZWFkX2NvbmRhdHRyICgpCiB7CiB9CiAKK0xpc3Q8cHRocmVhZF9j
b25kPiBwdGhyZWFkX2NvbmQ6OmNvbmRzOworCiAvKiBUaGlzIGlzIHVzZWQg
Zm9yIGNvbmQgY3JlYXRpb24gcHJvdGVjdGlvbiB3aXRoaW4gYSBzaW5nbGUg
cHJvY2VzcyBvbmx5ICovCiBuYXRpdmVNdXRleCBOT19DT1BZIHB0aHJlYWRf
Y29uZDo6Y29uZEluaXRpYWxpemF0aW9uTG9jazsKIApAQCAtODYyLDggKzg0
MCw3IEBAIHB0aHJlYWRfY29uZDo6cHRocmVhZF9jb25kIChwdGhyZWFkX2Nv
bmQKICAgICAgIHJldHVybjsKICAgICB9CiAKLSAgLyogdGhyZWFkc2FmZSBh
ZGRpdGlvbiBpcyBlYXN5ICovCi0gIG5leHQgPSAocHRocmVhZF9jb25kICop
IEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgmTVRfSU5URVJGQUNFLT5j
b25kcywgdGhpcyk7CisgIGNvbmRzLkluc2VydCAodGhpcyk7CiB9CiAKIHB0
aHJlYWRfY29uZDo6fnB0aHJlYWRfY29uZCAoKQpAQCAtODcxLDE3ICs4NDgs
NyBAQCBwdGhyZWFkX2NvbmQ6On5wdGhyZWFkX2NvbmQgKCkKICAgaWYgKHNl
bVdhaXQpCiAgICAgQ2xvc2VIYW5kbGUgKHNlbVdhaXQpOwogCi0gIC8qIEkn
bSBub3QgMTAwJSBzdXJlIHRoZSBuZXh0IGJpdCBpcyB0aHJlYWRzYWZlLiBJ
IHRoaW5rIGl0IGlzLi4uICovCi0gIGlmIChNVF9JTlRFUkZBQ0UtPmNvbmRz
ID09IHRoaXMpCi0gICAgSW50ZXJsb2NrZWRFeGNoYW5nZVBvaW50ZXIgKCZN
VF9JTlRFUkZBQ0UtPmNvbmRzLCB0aGlzLT5uZXh0KTsKLSAgZWxzZQotICAg
IHsKLSAgICAgIHB0aHJlYWRfY29uZCAqdGVtcGNvbmQgPSBNVF9JTlRFUkZB
Q0UtPmNvbmRzOwotICAgICAgd2hpbGUgKHRlbXBjb25kLT5uZXh0ICYmIHRl
bXBjb25kLT5uZXh0ICE9IHRoaXMpCi0JdGVtcGNvbmQgPSB0ZW1wY29uZC0+
bmV4dDsKLSAgICAgIC8qIGJ1dCB0aGVyZSBtYXkgYmUgYSByYWNlIGJldHdl
ZW4gdGhlIGxvb3AgYWJvdmUgYW5kIHRoaXMgc3RhdGVtZW50ICovCi0gICAg
ICBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJnRlbXBjb25kLT5uZXh0
LCB0aGlzLT5uZXh0KTsKLSAgICB9CisgIGNvbmRzLlJlbW92ZSAodGhpcyk7
CiB9CiAKIHZvaWQKQEAgLTk5NCw2ICs5NjEsMTIgQEAgcHRocmVhZF9jb25k
OjpXYWl0IChwdGhyZWFkX211dGV4X3QgbXV0ZQogdm9pZAogcHRocmVhZF9j
b25kOjpmaXh1cF9hZnRlcl9mb3JrICgpCiB7CisgIGNvbmRzLmZvckVhY2gg
KEZpeHVwQWZ0ZXJGb3JrKTsKK30KKwordm9pZAorcHRocmVhZF9jb25kOjpG
aXh1cEFmdGVyRm9yayAoKQorewogICB3YWl0aW5nID0gcGVuZGluZyA9IDA7
CiAgIG10eENvbmQgPSBOVUxMOwogCkBAIC0xMDAzLDcgKzk3Niw3IEBAIHB0
aHJlYWRfY29uZDo6Zml4dXBfYWZ0ZXJfZm9yayAoKQogCiAgIHNlbVdhaXQg
PSA6OkNyZWF0ZVNlbWFwaG9yZSAoJnNlY19ub25lX25paCwgMCwgTE9OR19N
QVgsIE5VTEwpOwogICBpZiAoIXNlbVdhaXQpCi0gICAgYXBpX2ZhdGFsICgi
cHRocmVhZF9jb25kOjpmaXh1cF9hZnRlcl9mb3JrICgpIGZhaWxlZCB0byBy
ZWNyZWF0ZSB3aW4zMiBzZW1hcGhvcmUiKTsKKyAgICBhcGlfZmF0YWwgKCJw
dGhyZWFkX2NvbmQ6OkZpeHVwQWZ0ZXJGb3JrICgpIGZhaWxlZCB0byByZWNy
ZWF0ZSB3aW4zMiBzZW1hcGhvcmUiKTsKIH0KIAogYm9vbApAQCAtMTAyMyw2
ICs5OTYsOCBAQCBwdGhyZWFkX3J3bG9ja2F0dHI6On5wdGhyZWFkX3J3bG9j
a2F0dHIgCiB7CiB9CiAKK0xpc3Q8cHRocmVhZF9yd2xvY2s+IHB0aHJlYWRf
cndsb2NrOjpyd2xvY2tzOworCiAvKiBUaGlzIGlzIHVzZWQgZm9yIHJ3bG9j
ayBjcmVhdGlvbiBwcm90ZWN0aW9uIHdpdGhpbiBhIHNpbmdsZSBwcm9jZXNz
IG9ubHkgKi8KIG5hdGl2ZU11dGV4IE5PX0NPUFkgcHRocmVhZF9yd2xvY2s6
OnJ3bG9ja0luaXRpYWxpemF0aW9uTG9jazsKIApAQCAtMTA3OCwyMyArMTA1
MywxMiBAQCBwdGhyZWFkX3J3bG9jazo6cHRocmVhZF9yd2xvY2sgKHB0aHJl
YWRfCiAgICAgfQogCiAKLSAgLyogdGhyZWFkc2FmZSBhZGRpdGlvbiBpcyBl
YXN5ICovCi0gIG5leHQgPSAocHRocmVhZF9yd2xvY2sgKikgSW50ZXJsb2Nr
ZWRFeGNoYW5nZVBvaW50ZXIgKCZNVF9JTlRFUkZBQ0UtPnJ3bG9ja3MsIHRo
aXMpOworICByd2xvY2tzLkluc2VydCAodGhpcyk7CiB9CiAKIHB0aHJlYWRf
cndsb2NrOjp+cHRocmVhZF9yd2xvY2sgKCkKIHsKLSAgLyogSSdtIG5vdCAx
MDAlIHN1cmUgdGhlIG5leHQgYml0IGlzIHRocmVhZHNhZmUuIEkgdGhpbmsg
aXQgaXMuLi4gKi8KLSAgaWYgKE1UX0lOVEVSRkFDRS0+cndsb2NrcyA9PSB0
aGlzKQotICAgIEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgmTVRfSU5U
RVJGQUNFLT5yd2xvY2tzLCB0aGlzLT5uZXh0KTsKLSAgZWxzZQotICAgIHsK
LSAgICAgIHB0aHJlYWRfcndsb2NrICp0ZW1wcndsb2NrID0gTVRfSU5URVJG
QUNFLT5yd2xvY2tzOwotICAgICAgd2hpbGUgKHRlbXByd2xvY2stPm5leHQg
JiYgdGVtcHJ3bG9jay0+bmV4dCAhPSB0aGlzKQotCXRlbXByd2xvY2sgPSB0
ZW1wcndsb2NrLT5uZXh0OwotICAgICAgLyogYnV0IHRoZXJlIG1heSBiZSBh
IHJhY2UgYmV0d2VlbiB0aGUgbG9vcCBhYm92ZSBhbmQgdGhpcyBzdGF0ZW1l
bnQgKi8KLSAgICAgIEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgmdGVt
cHJ3bG9jay0+bmV4dCwgdGhpcy0+bmV4dCk7Ci0gICAgfQorICByd2xvY2tz
LlJlbW92ZSAodGhpcyk7CiB9CiAKIGludApAQCAtMTMxNyw2ICsxMjgxLDEy
IEBAIHB0aHJlYWRfcndsb2NrOjpXckxvY2tDbGVhbnVwICh2b2lkICphcmcK
IHZvaWQKIHB0aHJlYWRfcndsb2NrOjpmaXh1cF9hZnRlcl9mb3JrICgpCiB7
CisgIHJ3bG9ja3MuZm9yRWFjaCAoRml4dXBBZnRlckZvcmspOworfQorCit2
b2lkCitwdGhyZWFkX3J3bG9jazo6Rml4dXBBZnRlckZvcmsgKCkKK3sKICAg
cHRocmVhZF90IHNlbGYgPSBwdGhyZWFkOjpzZWxmICgpOwogICBzdHJ1Y3Qg
UldMT0NLX1JFQURFUiAqKnRlbXAgPSAmcmVhZGVyczsKIApAQCAtMTUyOCw2
ICsxNDk4LDggQEAgcHRocmVhZF9tdXRleDo6Y2FuQmVVbmxvY2tlZCAocHRo
cmVhZF9tdQogICByZXR1cm4gKF9fcHRocmVhZF9lcXVhbCAoJigqbXV0ZXgp
LT5vd25lciwgJnNlbGYpKSAmJiAxID09ICgqbXV0ZXgpLT5yZWN1cnNpb25f
Y291bnRlcjsKIH0KIAorTGlzdDxwdGhyZWFkX211dGV4PiBwdGhyZWFkX211
dGV4OjptdXRleGVzOworCiAvKiBUaGlzIGlzIHVzZWQgZm9yIG11dGV4IGNy
ZWF0aW9uIHByb3RlY3Rpb24gd2l0aGluIGEgc2luZ2xlIHByb2Nlc3Mgb25s
eSAqLwogbmF0aXZlTXV0ZXggTk9fQ09QWSBwdGhyZWFkX211dGV4OjptdXRl
eEluaXRpYWxpemF0aW9uTG9jazsKIApAQCAtMTU2Nyw4ICsxNTM5LDcgQEAg
cHRocmVhZF9tdXRleDo6cHRocmVhZF9tdXRleCAocHRocmVhZF9tdQogICAg
ICAgdHlwZSA9IGF0dHItPm11dGV4dHlwZTsKICAgICB9CiAKLSAgLyogdGhy
ZWFkc2FmZSBhZGRpdGlvbiBpcyBlYXN5ICovCi0gIG5leHQgPSAocHRocmVh
ZF9tdXRleCAqKSBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJk1UX0lO
VEVSRkFDRS0+bXV0ZXhzLCB0aGlzKTsKKyAgbXV0ZXhlcy5JbnNlcnQgKHRo
aXMpOwogfQogCiBwdGhyZWFkX211dGV4Ojp+cHRocmVhZF9tdXRleCAoKQpA
QCAtMTU3NiwxOSArMTU0Nyw3IEBAIHB0aHJlYWRfbXV0ZXg6On5wdGhyZWFk
X211dGV4ICgpCiAgIGlmICh3aW4zMl9vYmpfaWQpCiAgICAgQ2xvc2VIYW5k
bGUgKHdpbjMyX29ial9pZCk7CiAKLSAgLyogSSdtIG5vdCAxMDAlIHN1cmUg
dGhlIG5leHQgYml0IGlzIHRocmVhZHNhZmUuIEkgdGhpbmsgaXQgaXMuLi4g
Ki8KLSAgaWYgKE1UX0lOVEVSRkFDRS0+bXV0ZXhzID09IHRoaXMpCi0gICAg
LyogVE9ETzogcHJpbnRmIGFuIGVycm9yIGlmIHRoZSByZXR1cm4gdmFsdWUg
IT0gdGhpcyAqLwotICAgIEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgm
TVRfSU5URVJGQUNFLT5tdXRleHMsIG5leHQpOwotICBlbHNlCi0gICAgewot
ICAgICAgcHRocmVhZF9tdXRleCAqdGVtcG11dGV4ID0gTVRfSU5URVJGQUNF
LT5tdXRleHM7Ci0gICAgICB3aGlsZSAodGVtcG11dGV4LT5uZXh0ICYmIHRl
bXBtdXRleC0+bmV4dCAhPSB0aGlzKQotCXRlbXBtdXRleCA9IHRlbXBtdXRl
eC0+bmV4dDsKLSAgICAgIC8qIGJ1dCB0aGVyZSBtYXkgYmUgYSByYWNlIGJl
dHdlZW4gdGhlIGxvb3AgYWJvdmUgYW5kIHRoaXMgc3RhdGVtZW50ICovCi0g
ICAgICAvKiBUT0RPOiBwcmludGYgYW4gZXJyb3IgaWYgdGhlIHJldHVybiB2
YWx1ZSAhPSB0aGlzICovCi0gICAgICBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9p
bnRlciAoJnRlbXBtdXRleC0+bmV4dCwgdGhpcy0+bmV4dCk7Ci0gICAgfQor
ICBtdXRleGVzLlJlbW92ZSAodGhpcyk7CiB9CiAKIGludApAQCAtMTY2Nyw5
ICsxNjI2LDE1IEBAIHB0aHJlYWRfbXV0ZXg6Ol9EZXN0cm95IChwdGhyZWFk
X3Qgc2VsZikKIHZvaWQKIHB0aHJlYWRfbXV0ZXg6OmZpeHVwX2FmdGVyX2Zv
cmsgKCkKIHsKLSAgZGVidWdfcHJpbnRmICgibXV0ZXggJXggaW4gZml4dXBf
YWZ0ZXJfZm9yayIsIHRoaXMpOworICBtdXRleGVzLmZvckVhY2ggKEZpeHVw
QWZ0ZXJGb3JrKTsKK30KKwordm9pZAorcHRocmVhZF9tdXRleDo6Rml4dXBB
ZnRlckZvcmsgKCkKK3sKKyAgZGVidWdfcHJpbnRmICgibXV0ZXggJXggaW4g
Rml4dXBBZnRlckZvcmsiLCB0aGlzKTsKICAgaWYgKHBzaGFyZWQgIT0gUFRI
UkVBRF9QUk9DRVNTX1BSSVZBVEUpCi0gICAgYXBpX2ZhdGFsICgicHRocmVh
ZF9tdXRleDo6Zml4dXBfYWZ0ZXJfZm9yayAoKSBkb2Vzbid0dW5kZXJzdGFu
ZCBQUk9DRVNTX1NIQVJFRCBtdXRleCdzIik7CisgICAgYXBpX2ZhdGFsICgi
cHRocmVhZF9tdXRleDo6Rml4dXBBZnRlckZvcmsgKCkgZG9lc24ndHVuZGVy
c3RhbmQgUFJPQ0VTU19TSEFSRUQgbXV0ZXgncyIpOwogCiAgIGlmIChOVUxM
ID09IG93bmVyKQogICAgIC8qIG11dGV4IGhhcyBubyBvd25lciwgcmVzZXQg
dG8gaW5pdGlhbCAqLwpAQCAtMTY4MCw3ICsxNjQ1LDcgQEAgcHRocmVhZF9t
dXRleDo6Zml4dXBfYWZ0ZXJfZm9yayAoKQogCiAgIHdpbjMyX29ial9pZCA9
IDo6Q3JlYXRlU2VtYXBob3JlICgmc2VjX25vbmVfbmloLCAwLCBMT05HX01B
WCwgTlVMTCk7CiAgIGlmICghd2luMzJfb2JqX2lkKQotICAgIGFwaV9mYXRh
bCAoInB0aHJlYWRfbXV0ZXg6OmZpeHVwX2FmdGVyX2ZvcmsgKCkgZmFpbGVk
IHRvIHJlY3JlYXRlIHdpbjMyIHNlbWFwaG9yZSBmb3IgbXV0ZXgiKTsKKyAg
ICBhcGlfZmF0YWwgKCJwdGhyZWFkX211dGV4OjpGaXh1cEFmdGVyRm9yayAo
KSBmYWlsZWQgdG8gcmVjcmVhdGUgd2luMzIgc2VtYXBob3JlIGZvciBtdXRl
eCIpOwogCiAgIGNvbmR3YWl0cyA9IDA7CiB9CkBAIC0xNzAyLDYgKzE2Njcs
OCBAQCBwdGhyZWFkX211dGV4YXR0cjo6fnB0aHJlYWRfbXV0ZXhhdHRyICgp
CiB7CiB9CiAKK0xpc3Q8c2VtYXBob3JlPiBzZW1hcGhvcmU6OnNlbWFwaG9y
ZXM7CisKIHNlbWFwaG9yZTo6c2VtYXBob3JlIChpbnQgcHNoYXJlZCwgdW5z
aWduZWQgaW50IHZhbHVlKTp2ZXJpZnlhYmxlX29iamVjdCAoU0VNX01BR0lD
KQogewogICB0aGlzLT53aW4zMl9vYmpfaWQgPSA6OkNyZWF0ZVNlbWFwaG9y
ZSAoJnNlY19ub25lX25paCwgdmFsdWUsIExPTkdfTUFYLApAQCAtMTcxMCwy
NSArMTY3NywxNiBAQCBzZW1hcGhvcmU6OnNlbWFwaG9yZSAoaW50IHBzaGFy
ZWQsIHVuc2lnCiAgICAgbWFnaWMgPSAwOwogICB0aGlzLT5zaGFyZWQgPSBw
c2hhcmVkOwogICBjdXJyZW50dmFsdWUgPSB2YWx1ZTsKLSAgLyogdGhyZWFk
c2FmZSBhZGRpdGlvbiBpcyBlYXN5ICovCi0gIG5leHQgPSAoc2VtYXBob3Jl
ICopIEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgmTVRfSU5URVJGQUNF
LT5zZW1hcGhvcmVzLCB0aGlzKTsKKworICBzZW1hcGhvcmVzLkluc2VydCAo
dGhpcyk7CiB9CiAKIHNlbWFwaG9yZTo6fnNlbWFwaG9yZSAoKQogewogICBp
ZiAod2luMzJfb2JqX2lkKQogICAgIENsb3NlSGFuZGxlICh3aW4zMl9vYmpf
aWQpOwotICAvKiBJJ20gbm90IDEwMCUgc3VyZSB0aGUgbmV4dCBiaXQgaXMg
dGhyZWFkc2FmZS4gSSB0aGluayBpdCBpcy4uLiAqLwotICBpZiAoTVRfSU5U
RVJGQUNFLT5zZW1hcGhvcmVzID09IHRoaXMpCi0gICAgSW50ZXJsb2NrZWRF
eGNoYW5nZVBvaW50ZXIgKCZNVF9JTlRFUkZBQ0UtPnNlbWFwaG9yZXMsIHRo
aXMtPm5leHQpOwotICBlbHNlCi0gICAgewotICAgICAgc2VtYXBob3JlICp0
ZW1wc2VtID0gTVRfSU5URVJGQUNFLT5zZW1hcGhvcmVzOwotICAgICAgd2hp
bGUgKHRlbXBzZW0tPm5leHQgJiYgdGVtcHNlbS0+bmV4dCAhPSB0aGlzKQot
CXRlbXBzZW0gPSB0ZW1wc2VtLT5uZXh0OwotICAgICAgLyogYnV0IHRoZXJl
IG1heSBiZSBhIHJhY2UgYmV0d2VlbiB0aGUgbG9vcCBhYm92ZSBhbmQgdGhp
cyBzdGF0ZW1lbnQgKi8KLSAgICAgIEludGVybG9ja2VkRXhjaGFuZ2VQb2lu
dGVyICgmdGVtcHNlbS0+bmV4dCwgdGhpcy0+bmV4dCk7Ci0gICAgfQorCisg
IHNlbWFwaG9yZXMuUmVtb3ZlICh0aGlzKTsKIH0KIAogdm9pZApAQCAtMTc3
MSw3ICsxNzI5LDEzIEBAIHNlbWFwaG9yZTo6V2FpdCAoKQogdm9pZAogc2Vt
YXBob3JlOjpmaXh1cF9hZnRlcl9mb3JrICgpCiB7Ci0gIGRlYnVnX3ByaW50
ZiAoInNlbSAleCBpbiBmaXh1cF9hZnRlcl9mb3JrIiwgdGhpcyk7CisgIHNl
bWFwaG9yZXMuZm9yRWFjaCAoRml4dXBBZnRlckZvcmspOworfQorCit2b2lk
CitzZW1hcGhvcmU6OkZpeHVwQWZ0ZXJGb3JrICgpCit7CisgIGRlYnVnX3By
aW50ZiAoInNlbSAleCBpbiBGaXh1cEFmdGVyRm9yayIsIHRoaXMpOwogICBp
ZiAoc2hhcmVkICE9IFBUSFJFQURfUFJPQ0VTU19QUklWQVRFKQogICAgIGFw
aV9mYXRhbCAoImRvZXNuJ3QgdW5kZXJzdGFuZCBQUk9DRVNTX1NIQVJFRCBz
ZW1hcGhvcmVzIHZhcmlhYmxlcyIpOwogICAvKiBGSVhNRTogZHVwbGljYXRl
IGNvZGUgaGVyZSBhbmQgaW4gdGhlIGNvbnN0cnVjdG9yLiAqLwpkaWZmIC11
cnAgc3JjLm9sZC93aW5zdXAvY3lnd2luL3RocmVhZC5oIHNyYy93aW5zdXAv
Y3lnd2luL3RocmVhZC5oCi0tLSBzcmMub2xkL3dpbnN1cC9jeWd3aW4vdGhy
ZWFkLmgJMjAwMy0wMi0yOCAxMTozMzoxMC4wMDAwMDAwMDAgKzAxMDAKKysr
IHNyYy93aW5zdXAvY3lnd2luL3RocmVhZC5oCTIwMDMtMDItMjggMTE6MzQ6
MjMuMDAwMDAwMDAwICswMTAwCkBAIC0xODksMTQgKzE4OSw1MCBAQCB0eXBl
ZGVmIGVudW0KIHZlcmlmeWFibGVfb2JqZWN0X3N0YXRlIHZlcmlmeWFibGVf
b2JqZWN0X2lzdmFsaWQgKHZvaWQgY29uc3QgKiwgbG9uZyk7CiB2ZXJpZnlh
YmxlX29iamVjdF9zdGF0ZSB2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICh2
b2lkIGNvbnN0ICosIGxvbmcsIHZvaWQgKik7CiAKLS8qIGludGVyZmFjZSAq
LwogdGVtcGxhdGUgPGNsYXNzIExpc3ROb2RlPiBjbGFzcyBMaXN0IHsKIHB1
YmxpYzoKLSAgTGlzdCgpOwotICB2b2lkIEluc2VydCAoTGlzdE5vZGUgKmFO
b2RlKTsKLSAgTGlzdE5vZGUgKlJlbW92ZSAoIExpc3ROb2RlICphTm9kZSk7
Ci0gIExpc3ROb2RlICpQb3AgKCk7Ci0gIHZvaWQgZm9yRWFjaCAodm9pZCAo
KikoTGlzdE5vZGUgKmFOb2RlKSk7CisgIExpc3QoKSA6IGhlYWQoTlVMTCkK
KyAgICB7CisgICAgfQorCisgIHZvaWQgSW5zZXJ0IChMaXN0Tm9kZSAqYU5v
ZGUpCisgICAgeworICAgICAgaWYgKCFhTm9kZSkKKyAgICAgICAgcmV0dXJu
OworICAgICAgYU5vZGUtPm5leHQgPSAoTGlzdE5vZGUgKikgSW50ZXJsb2Nr
ZWRFeGNoYW5nZVBvaW50ZXIgKCZoZWFkLCBhTm9kZSk7CisgICAgfQorCisg
IExpc3ROb2RlICpSZW1vdmUgKCBMaXN0Tm9kZSAqYU5vZGUpCisgICAgewor
ICAgICAgaWYgKCFhTm9kZSB8fCAhaGVhZCkKKyAgICAgICAgcmV0dXJuIE5V
TEw7CisgICAgICBpZiAoYU5vZGUgPT0gaGVhZCkKKyAgICAgICAgcmV0dXJu
IFBvcCAoKTsKKworICAgICAgTGlzdE5vZGUgKnJlc3VsdFByZXYgPSBoZWFk
OworICAgICAgd2hpbGUgKHJlc3VsdFByZXYgJiYgcmVzdWx0UHJldi0+bmV4
dCAmJiAhKGFOb2RlID09IHJlc3VsdFByZXYtPm5leHQpKQorICAgICAgICBy
ZXN1bHRQcmV2ID0gcmVzdWx0UHJldi0+bmV4dDsKKyAgICAgIGlmIChyZXN1
bHRQcmV2KQorICAgICAgICByZXR1cm4gKExpc3ROb2RlICopSW50ZXJsb2Nr
ZWRFeGNoYW5nZVBvaW50ZXIgKCZyZXN1bHRQcmV2LT5uZXh0LCByZXN1bHRQ
cmV2LT5uZXh0LT5uZXh0KTsKKyAgICAgIHJldHVybiBOVUxMOworICAgIH0K
KworICBMaXN0Tm9kZSAqUG9wICgpCisgICAgeworICAgICAgcmV0dXJuIChM
aXN0Tm9kZSAqKSBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJmhlYWQs
IGhlYWQtPm5leHQpOworICAgIH0KKworICAvKiBwb29yIG1hbnMgZ2VuZXJp
YyBwcm9ncmFtbWluZy4gKi8KKyAgdm9pZCBmb3JFYWNoICh2b2lkICgqY2Fs
bGJhY2spKExpc3ROb2RlICphTm9kZSkpCisgICAgeworICAgICAgTGlzdE5v
ZGUgKmFOb2RlID0gaGVhZDsKKyAgICAgIHdoaWxlIChhTm9kZSkKKyAgICAg
ICAgeworICAgICAgICAgIGNhbGxiYWNrIChhTm9kZSk7CisgICAgICAgICAg
YU5vZGUgPSBhTm9kZS0+bmV4dDsKKyAgICAgICAgfQorICAgIH0KKwogcHJv
dGVjdGVkOgogICBMaXN0Tm9kZSAqaGVhZDsKIH07CkBAIC0yMjAsNyArMjU2
LDYgQEAgcHVibGljOgogICAvKiBMaXN0IHN1cHBvcnQgY2FsbHMgKi8KICAg
Y2xhc3MgcHRocmVhZF9rZXkgKm5leHQ7CiBwcml2YXRlOgotICAvLyBsaXN0
cyBvZiBvYmplY3RzLiBVU0UgVEhSRUFEU0FGRSBJTlNFUlRTIEFORCBERUxF
VEVTLgogICBzdGF0aWMgTGlzdDxwdGhyZWFkX2tleT4ga2V5czsKICAgc3Rh
dGljIHZvaWQgc2F2ZUFLZXkgKHB0aHJlYWRfa2V5ICopOwogICBzdGF0aWMg
dm9pZCByZXN0b3JlQUtleSAocHRocmVhZF9rZXkgKik7CkBAIC0yMzIsNTEg
KzI2Nyw2IEBAIHByaXZhdGU6CiAgIHZvaWQgKmZvcmtfYnVmOwogfTsKIAot
LyogaW1wbGVtZW50YXRpb24gKi8KLXRlbXBsYXRlIDxjbGFzcyBMaXN0Tm9k
ZT4KLUxpc3Q8TGlzdE5vZGU+OjpMaXN0PExpc3ROb2RlPiAoKSA6IGhlYWQo
TlVMTCkKLXsKLX0KLXRlbXBsYXRlIDxjbGFzcyBMaXN0Tm9kZT4gdm9pZAot
TGlzdDxMaXN0Tm9kZT46Okluc2VydCAoTGlzdE5vZGUgKmFOb2RlKQotewot
ICBpZiAoIWFOb2RlKQotICByZXR1cm47Ci0gIGFOb2RlLT5uZXh0ID0gKExp
c3ROb2RlICopIEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgmaGVhZCwg
YU5vZGUpOwotfQotdGVtcGxhdGUgPGNsYXNzIExpc3ROb2RlPiBMaXN0Tm9k
ZSAqCi1MaXN0PExpc3ROb2RlPjo6UmVtb3ZlICggTGlzdE5vZGUgKmFOb2Rl
KQotewotICBpZiAoIWFOb2RlKQotICByZXR1cm4gTlVMTDsKLSAgaWYgKCFo
ZWFkKQotICByZXR1cm4gTlVMTDsKLSAgaWYgKGFOb2RlID09IGhlYWQpCi0g
IHJldHVybiBQb3AgKCk7Ci0gIExpc3ROb2RlICpyZXN1bHRQcmV2ID0gaGVh
ZDsKLSAgd2hpbGUgKHJlc3VsdFByZXYgJiYgcmVzdWx0UHJldi0+bmV4dCAm
JiAhKGFOb2RlID09IHJlc3VsdFByZXYtPm5leHQpKQotICByZXN1bHRQcmV2
ID0gcmVzdWx0UHJldi0+bmV4dDsKLSAgaWYgKHJlc3VsdFByZXYpCi0gIHJl
dHVybiAoTGlzdE5vZGUgKilJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAo
JnJlc3VsdFByZXYtPm5leHQsIHJlc3VsdFByZXYtPm5leHQtPm5leHQpOwot
ICByZXR1cm4gTlVMTDsKLX0KLXRlbXBsYXRlIDxjbGFzcyBMaXN0Tm9kZT4g
TGlzdE5vZGUgKgotTGlzdDxMaXN0Tm9kZT46OlBvcCAoKQotewotICByZXR1
cm4gKExpc3ROb2RlICopIEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgm
aGVhZCwgaGVhZC0+bmV4dCk7Ci19Ci0vKiBwb29yIG1hbnMgZ2VuZXJpYyBw
cm9ncmFtbWluZy4gKi8KLXRlbXBsYXRlIDxjbGFzcyBMaXN0Tm9kZT4gdm9p
ZAotTGlzdDxMaXN0Tm9kZT46OmZvckVhY2ggKHZvaWQgKCpjYWxsYmFjayko
TGlzdE5vZGUgKikpCi17Ci0gIExpc3ROb2RlICphTm9kZSA9IGhlYWQ7Ci0g
IHdoaWxlIChhTm9kZSkKLSAgewotICAgIGNhbGxiYWNrIChhTm9kZSk7Ci0g
ICAgYU5vZGUgPSBhTm9kZS0+bmV4dDsKLSAgfQotfQotCiBjbGFzcyBwdGhy
ZWFkX2F0dHI6cHVibGljIHZlcmlmeWFibGVfb2JqZWN0CiB7CiBwdWJsaWM6
CkBAIC0zMTksNyArMzA5LDYgQEAgcHVibGljOgogICBwdGhyZWFkX3Qgb3du
ZXI7CiAgIGludCB0eXBlOwogICBpbnQgcHNoYXJlZDsKLSAgY2xhc3MgcHRo
cmVhZF9tdXRleCAqIG5leHQ7CiAKICAgaW50IF9Mb2NrIChwdGhyZWFkX3Qg
c2VsZik7CiAgIGludCBfVHJ5TG9jayAocHRocmVhZF90IHNlbGYpOwpAQCAt
MzYzLDEzICszNTIsMjEgQEAgcHVibGljOgogICAgICAgcmV0dXJuIDA7CiAg
ICAgfQogCi0gIHZvaWQgZml4dXBfYWZ0ZXJfZm9yayAoKTsKLQogICBwdGhy
ZWFkX211dGV4IChwdGhyZWFkX211dGV4YXR0ciAqID0gTlVMTCk7CiAgIHB0
aHJlYWRfbXV0ZXggKHB0aHJlYWRfbXV0ZXhfdCAqLCBwdGhyZWFkX211dGV4
YXR0ciAqKTsKICAgfnB0aHJlYWRfbXV0ZXggKCk7CiAKKyAgY2xhc3MgcHRo
cmVhZF9tdXRleCAqIG5leHQ7CisgIHN0YXRpYyB2b2lkIGZpeHVwX2FmdGVy
X2ZvcmsgKCk7CisKKyAgdm9pZCBGaXh1cEFmdGVyRm9yayAoKTsKKyAgc3Rh
dGljIHZvaWQgRml4dXBBZnRlckZvcmsgKHB0aHJlYWRfbXV0ZXggKm11dGV4
KQorICAgIHsKKyAgICAgIG11dGV4LT5GaXh1cEFmdGVyRm9yayAoKTsKKyAg
ICB9CisKIHByaXZhdGU6CisgIHN0YXRpYyBMaXN0PHB0aHJlYWRfbXV0ZXg+
IG11dGV4ZXM7CiAgIHN0YXRpYyBuYXRpdmVNdXRleCBtdXRleEluaXRpYWxp
emF0aW9uTG9jazsKIH07CiAKQEAgLTUwNiwxNiArNTAzLDIzIEBAIHB1Ymxp
YzoKIAogICBwdGhyZWFkX211dGV4X3QgbXR4Q29uZDsKIAotICBjbGFzcyBw
dGhyZWFkX2NvbmQgKiBuZXh0OwotCiAgIHZvaWQgVW5CbG9jayAoY29uc3Qg
Ym9vbCBhbGwpOwogICBpbnQgV2FpdCAocHRocmVhZF9tdXRleF90IG11dGV4
LCBEV09SRCBkd01pbGxpc2Vjb25kcyA9IElORklOSVRFKTsKLSAgdm9pZCBm
aXh1cF9hZnRlcl9mb3JrICgpOwogCiAgIHB0aHJlYWRfY29uZCAocHRocmVh
ZF9jb25kYXR0ciAqKTsKICAgfnB0aHJlYWRfY29uZCAoKTsKIAorICBjbGFz
cyBwdGhyZWFkX2NvbmQgKiBuZXh0OworICBzdGF0aWMgdm9pZCBmaXh1cF9h
ZnRlcl9mb3JrICgpOworCisgIHZvaWQgRml4dXBBZnRlckZvcmsgKCk7Cisg
IHN0YXRpYyB2b2lkIEZpeHVwQWZ0ZXJGb3JrIChwdGhyZWFkX2NvbmQgKmNv
bmQpCisgICAgeworICAgICAgY29uZC0+Rml4dXBBZnRlckZvcmsgKCk7Cisg
ICAgfQorCiBwcml2YXRlOgorICBzdGF0aWMgTGlzdDxwdGhyZWFkX2NvbmQ+
IGNvbmRzOwogICBzdGF0aWMgbmF0aXZlTXV0ZXggY29uZEluaXRpYWxpemF0
aW9uTG9jazsKIH07CiAKQEAgLTU2MiwxNCArNTY2LDIwIEBAIHB1YmxpYzoK
ICAgcHRocmVhZF9jb25kIGNvbmRSZWFkZXJzOwogICBwdGhyZWFkX2NvbmQg
Y29uZFdyaXRlcnM7CiAKLSAgY2xhc3MgcHRocmVhZF9yd2xvY2sgKiBuZXh0
OwotCi0gIHZvaWQgZml4dXBfYWZ0ZXJfZm9yayAoKTsKLQogICBwdGhyZWFk
X3J3bG9jayAocHRocmVhZF9yd2xvY2thdHRyICopOwogICB+cHRocmVhZF9y
d2xvY2sgKCk7CiAKKyAgY2xhc3MgcHRocmVhZF9yd2xvY2sgKiBuZXh0Owor
ICBzdGF0aWMgdm9pZCBmaXh1cF9hZnRlcl9mb3JrICgpOworCisgIHZvaWQg
Rml4dXBBZnRlckZvcmsgKCk7CisgIHN0YXRpYyB2b2lkIEZpeHVwQWZ0ZXJG
b3JrIChwdGhyZWFkX3J3bG9jayAqcndsb2NrKQorICAgIHsKKyAgICAgIHJ3
bG9jay0+Rml4dXBBZnRlckZvcmsgKCk7CisgICAgfQogcHJpdmF0ZToKKyAg
c3RhdGljIExpc3Q8cHRocmVhZF9yd2xvY2s+IHJ3bG9ja3M7CisKICAgdm9p
ZCBhZGRSZWFkZXIgKHN0cnVjdCBSV0xPQ0tfUkVBREVSICpyZCk7CiAgIHZv
aWQgcmVtb3ZlUmVhZGVyIChzdHJ1Y3QgUldMT0NLX1JFQURFUiAqcmQpOwog
ICBzdHJ1Y3QgUldMT0NLX1JFQURFUiAqbG9va3VwUmVhZGVyIChwdGhyZWFk
X3QgdGhyZWFkKTsKQEAgLTYwMCwxNiArNjEwLDI1IEBAIHB1YmxpYzoKICAg
c3RhdGljIGludCBwb3N0IChzZW1fdCAqIHNlbSk7CiAKICAgSEFORExFIHdp
bjMyX29ial9pZDsKLSAgY2xhc3Mgc2VtYXBob3JlICogbmV4dDsKICAgaW50
IHNoYXJlZDsKICAgbG9uZyBjdXJyZW50dmFsdWU7CiAgIHZvaWQgV2FpdCAo
KTsKICAgdm9pZCBQb3N0ICgpOwogICBpbnQgVHJ5V2FpdCAoKTsKLSAgdm9p
ZCBmaXh1cF9hZnRlcl9mb3JrICgpOwogCiAgIHNlbWFwaG9yZSAoaW50LCB1
bnNpZ25lZCBpbnQpOwogICB+c2VtYXBob3JlICgpOworCisgIGNsYXNzIHNl
bWFwaG9yZSAqIG5leHQ7CisgIHN0YXRpYyB2b2lkIGZpeHVwX2FmdGVyX2Zv
cmsgKCk7CisKKyAgdm9pZCBGaXh1cEFmdGVyRm9yayAoKTsKKyAgc3RhdGlj
IHZvaWQgRml4dXBBZnRlckZvcmsgKHNlbWFwaG9yZSAqc2VtYSkKKyAgICB7
CisgICAgICBzZW1hLT5GaXh1cEFmdGVyRm9yayAoKTsKKyAgICB9Citwcml2
YXRlOgorICBzdGF0aWMgTGlzdDxzZW1hcGhvcmU+IHNlbWFwaG9yZXM7CiB9
OwogCiBjbGFzcyBjYWxsYmFjawpAQCAtNjM0LDEyICs2NTMsNiBAQCBwdWJs
aWM6CiAgIGNhbGxiYWNrICpwdGhyZWFkX2NoaWxkOwogICBjYWxsYmFjayAq
cHRocmVhZF9wYXJlbnQ7CiAKLSAgLy8gbGlzdHMgb2YgcHRocmVhZCBvYmpl
Y3RzLiBVU0UgVEhSRUFEU0FGRSBJTlNFUlRTIEFORCBERUxFVEVTLgotICBj
bGFzcyBwdGhyZWFkX211dGV4ICogbXV0ZXhzOwotICBjbGFzcyBwdGhyZWFk
X2NvbmQgICogY29uZHM7Ci0gIGNsYXNzIHB0aHJlYWRfcndsb2NrICogcnds
b2NrczsKLSAgY2xhc3Mgc2VtYXBob3JlICAgICAqIHNlbWFwaG9yZXM7Ci0K
ICAgcHRocmVhZF9rZXkgcmVlbnRfa2V5OwogICBwdGhyZWFkX2tleSB0aHJl
YWRfc2VsZl9rZXk7CiAKQEAgLTY1MCw3ICs2NjMsNiBAQCBwdWJsaWM6CiAg
IE1UaW50ZXJmYWNlICgpIDoKICAgICBjb25jdXJyZW5jeSAoMCksIHRocmVh
ZGNvdW50ICgxKSwKICAgICBwdGhyZWFkX3ByZXBhcmUgKE5VTEwpLCBwdGhy
ZWFkX2NoaWxkIChOVUxMKSwgcHRocmVhZF9wYXJlbnQgKE5VTEwpLAotICAg
IG11dGV4cyAoTlVMTCksIGNvbmRzIChOVUxMKSwgcndsb2NrcyAoTlVMTCks
IHNlbWFwaG9yZXMgKE5VTEwpLAogICAgIHJlZW50X2tleSAoTlVMTCksIHRo
cmVhZF9zZWxmX2tleSAoTlVMTCkKICAgewogICB9Cg==

--1546139-24044-1046430628=:371--
