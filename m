Return-Path: <cygwin-patches-return-6531-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 7060 invoked by alias); 3 Jun 2009 23:36:08 -0000
Received: (qmail 7049 invoked by uid 22791); 3 Jun 2009 23:36:07 -0000
X-SWARE-Spam-Status: No, hits=-2.1 required=5.0 	tests=AWL,BAYES_00,J_CHICKENPOX_74,SPF_PASS
X-Spam-Check-By: sourceware.org
Received: from mail-fx0-f224.google.com (HELO mail-fx0-f224.google.com) (209.85.220.224)     by sourceware.org (qpsmtpd/0.43rc1) with ESMTP; Wed, 03 Jun 2009 23:35:59 +0000
Received: by fxm24 with SMTP id 24so396238fxm.2         for <cygwin-patches@cygwin.com>; Wed, 03 Jun 2009 16:35:56 -0700 (PDT)
Received: by 10.204.64.136 with SMTP id e8mr1406320bki.46.1244072156087;         Wed, 03 Jun 2009 16:35:56 -0700 (PDT)
Received: from ?192.168.2.99? (cpc2-cmbg8-0-0-cust61.cmbg.cable.ntl.com [82.6.108.62])         by mx.google.com with ESMTPS id 18sm3058972fkq.56.2009.06.03.16.35.55         (version=SSLv3 cipher=RC4-MD5);         Wed, 03 Jun 2009 16:35:55 -0700 (PDT)
Message-ID: <4A270BA4.3080602@gmail.com>
Date: Wed, 03 Jun 2009 23:36:00 -0000
From: Dave Korn <dave.korn.cygwin@googlemail.com>
User-Agent: Thunderbird 2.0.0.17 (Windows/20080914)
MIME-Version: 1.0
To: Dave Korn <dave.korn.cygwin@googlemail.com>
CC: cygwin-patches@cygwin.com
Subject: Re: [PATCH?]  Separate pthread patches, #2 take 3
References: <4A270656.8090704@gmail.com>
In-Reply-To: <4A270656.8090704@gmail.com>
Content-Type: multipart/mixed;  boundary="------------040607080305060702030905"
X-IsSubscribed: yes
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Id: <cygwin-patches.cygwin.com>
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sourceware.org/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sourceware.org/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Mail-Followup-To: cygwin-patches@cygwin.com
X-SW-Source: 2009-q2/txt/msg00073.txt.bz2

This is a multi-part message in MIME format.
--------------040607080305060702030905
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-length: 1170

Dave Korn wrote:
>   The attached patch implements ilockexch and ilockcmpexch, using the inline
> asm definition from __arch_compare_and_exchange_val_32_acq in
> glibc-2.10.1/sysdeps/i386/i486/bits/atomic.h, trivially expanded inline rather
> than in its original preprocessor macro form.

  The attached patch does likewise, but adds a "memory" clobber.  It generates
correct code:

L186:
	.loc 3 127 0
	movl	__ZN13pthread_mutex7mutexesE+8, %eax	 # mutexes.head, D.28599
	movl	%eax, 36(%ebx)	 # D.28599, <variable>.next
	.loc 2 60 0
/APP
 # 60 "/gnu/winsup/src/winsup/cygwin/winbase.h" 1
	lock cmpxchgl %ebx, __ZN13pthread_mutex7mutexesE+8	 # this,
 # 0 "" 2
/NO_APP
	movl	%eax, -12(%ebp)	 # tmp68, ret
	.loc 2 61 0
	movl	-12(%ebp), %eax	 # ret, D.28596
	.loc 3 126 0
	cmpl	%eax, 36(%ebx)	 # D.28596, <variable>.next
	jne	L186	 #,


although as you see it has some needless register motion as it stores %eax to
the stack slot for ret and reloads it.  Still, this is now almost as good as
the code generated by my original patch.

winsup/cygwin/ChangeLog

	* winbase.h (ilockexch):  Fix asm constraints.
	(ilockcmpexch):  Likewise.


  Ok-ish?

    cheers,
      DaveK


--------------040607080305060702030905
Content-Type: text/x-c;
 name="pthread-interlocked-asms-v3.diff"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="pthread-interlocked-asms-v3.diff"
Content-length: 1246

Index: winsup/cygwin/winbase.h
===================================================================
RCS file: /cvs/src/src/winsup/cygwin/winbase.h,v
retrieving revision 1.14
diff -p -u -r1.14 winbase.h
--- winsup/cygwin/winbase.h	12 Jul 2008 18:09:17 -0000	1.14
+++ winsup/cygwin/winbase.h	3 Jun 2009 23:28:02 -0000
@@ -38,22 +38,28 @@ ilockdecr (volatile long *m)
 extern __inline__ long
 ilockexch (volatile long *t, long v)
 {
-  register int __res;
-  __asm__ __volatile__ ("\n\
-1:	lock	cmpxchgl %3,(%1)\n\
-	jne 1b\n\
- 	": "=a" (__res), "=q" (t): "1" (t), "q" (v), "0" (*t): "cc");
-  return __res;
+  return ({
+		__typeof (*t) ret;
+		__asm __volatile ("1:	lock cmpxchgl %2, %1\n"
+				"	jne 1b\n"
+			: "=a" (ret), "=m" (*t)
+			: "r" (v), "m" (*t), "0" (*t)
+			: "memory");
+		ret;
+	});
 }
 
 extern __inline__ long
 ilockcmpexch (volatile long *t, long v, long c)
 {
-  register int __res;
-  __asm__ __volatile__ ("\n\
-	lock cmpxchgl %3,(%1)\n\
-	": "=a" (__res), "=q" (t) : "1" (t), "q" (v), "0" (c): "cc");
-  return __res;
+  return ({
+		__typeof (*t) ret;
+		__asm __volatile ("lock cmpxchgl %2, %1"
+			: "=a" (ret), "=m" (*t)
+			: "r" (v), "m" (*t), "0" (c)
+			: "memory");
+		ret;
+	});
 }
 
 #undef InterlockedIncrement

--------------040607080305060702030905--
