Return-Path: <cygwin-patches-return-4107-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 441 invoked by alias); 19 Aug 2003 00:58:33 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sources.redhat.com/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sources.redhat.com/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Received: (qmail 428 invoked from network); 19 Aug 2003 00:58:32 -0000
Date: Tue, 19 Aug 2003 00:58:00 -0000
From: Christopher Faylor <cgf@redhat.com>
To: cygwin-patches@cygwin.com
Subject: Re: Signal handling tune up.
Message-ID: <20030819005832.GB4303@redhat.com>
Reply-To: cygwin-patches@cygwin.com
Mail-Followup-To: cygwin-patches@cygwin.com
References: <3.0.5.32.20030818201736.0080e4e0@mail.attbi.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <3.0.5.32.20030818201736.0080e4e0@mail.attbi.com>
User-Agent: Mutt/1.4.1i
X-SW-Source: 2003-q3/txt/msg00123.txt.bz2

On Mon, Aug 18, 2003 at 08:17:36PM -0400, Pierre A. Humblet wrote:
>5) 
>This is just an observation, about sig_handle (int sig, bool thisproc)
>The thisproc argument is set to "rc != 2" in the sigthread. However
>it is possible for several signals to occur simultaneously and a
>signal can be processed with rc == 2 even when generated by the 
>current process (or conversely). This could cause a SIGINT to be 
>ignored (or not) when it shouldn't (something like that was discussed
>on the list recently).
>I don't fully understand the use of thisproc and have no suggestion. 

Are you saying that that someone reported execing a process, hitting
ctrl-c, and having another process simultaneously sending CTRL-C's to
the exec'ed stub?  I have a hard time seeing how that could be a common
occurrence.

However, this does demonstrate a flaw in wait_sig.  It exhausts the sigtodo
array based on the last received type of signal.  So, if process a sends ctrl-c
to itself and "at the same time" process b sends ctrl-c to process a,
then the signal will be randomly processed as coming from either process a
process b.  If the signal is handled as coming from process b, process a
will never get the notification it needs.

I still have a hard time seeing how this could happen with any regularity
but it is definitely something I will fix.

Thanks,
cgf
