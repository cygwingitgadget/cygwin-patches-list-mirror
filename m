Return-Path: <cygwin-patches-return-2988-listarch-cygwin-patches=sourceware.cygnus.com@cygwin.com>
Received: (qmail 7992 invoked by alias); 17 Sep 2002 09:34:20 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sources.redhat.com/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sources.redhat.com/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Received: (qmail 7978 invoked from network); 17 Sep 2002 09:34:19 -0000
X-Authentication-Warning: atacama.four-d.de: mail set sender to <tpfaff@gmx.net> using -f
Date: Tue, 17 Sep 2002 02:34:00 -0000
From: Thomas Pfaff <tpfaff@gmx.net>
To: cygwin-patches@cygwin.com
Subject: [PATCH] new mutex implementation 2. posting
Message-ID: <Pine.WNT.4.44.0209171121040.297-200000@algeria.intern.net>
X-X-Sender: pfaff@antarctica.intern.net
MIME-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="131799-32057-1032254530=:297"
Content-ID: <Pine.WNT.4.44.0209171123120.297@algeria.intern.net>
X-SW-Source: 2002-q3/txt/msg00436.txt.bz2

  This message is in MIME format.  The first part should be readable text,
  while the remaining parts are likely unreadable without MIME-aware tools.
  Send mail to mime@docserver.cac.washington.edu for more info.

--131799-32057-1032254530=:297
Content-Type: TEXT/PLAIN; CHARSET=US-ASCII
Content-ID: <Pine.WNT.4.44.0209171123121.297@algeria.intern.net>
Content-length: 2055


This patch contains a new mutex implementation.

The advantages are:

- Same code on Win9x and NT. Actual are critical sections used on NT and
  kernel mutexes on 9x.
- Posix compliant error codes.
- State is preserved after fork as it should.
- Supports both errorchecking and recursive mutexes.
- Should be at least as fast as critical sections.

Unfortunately the pthread_mutex_trylock call requires
InterlockedCompareExchange that is not available on Win95.
See my winbase patch for a workaround.

Just like critical sections it will use a counter and a semaphore to block
other threads. The semaphore is only used when at least one thread is
waiting, otherwise a kernel transition is not needed.

With these mutexes the default type has changed from recursive to
errorchecking, this is also the default on all other pthread platforms
that i know (except Linux where the default is FAST where you will not get
an EDEADLOCK on locking twice, it WILL deadlock instead).

With my previous 2 patches and this one i was able to build and run a
threaded perl that has passed all tests (to be true it failed 3 but these
were really not pthread related).

2002-08-15  Thomas Pfaff <tpfaff@gmx.net>

	* include/pthread.h: Added define for errorchecking mutexes,
	changed default mutex type.
	* thread.cc (pthread_mutex::pthread_mutex): New implemented.
	(pthread_mutex::~pthread_mutex): Ditto.
	(pthread_mutex::Lock): Ditto.
	(pthread_mutex::TryLock): Ditto.
	(pthread_mutex::UnLock): Ditto.
	(pthread_mutex::Destroy): New method.
	(pthread_mutex::SetOwner): Ditto.
	(pthread_mutex::fixup_after_fork): Preserve state after fork.
	(__pthread_mutex_destroy): Call pthread_mutex::Destroy to destroy
	mutex.
	(__pthread_mutexattr_settype): Allow errorchecking and recursive
	types.
	* thread.h (pthread_mutex::criticalsection): Removed.
	(pthread_mutex::lock_counter): New member.
	(pthread_mutex::recursion_counter): Ditto.
	(pthread_mutex::owner): Ditto.
	(pthread_mutex::type): Ditto.
	(pthread_mutex::Destroy): New method.
	(pthread_mutex::SetOwner): Ditto.


--131799-32057-1032254530=:297
Content-Type: TEXT/PLAIN; NAME="pthread_mutex.patch"
Content-Transfer-Encoding: BASE64
Content-ID: <Pine.WNT.4.44.0209171122100.297@algeria.intern.net>
Content-Description: 
Content-Disposition: ATTACHMENT; FILENAME="pthread_mutex.patch"
Content-length: 13176

ZGlmZiAtdXJwIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi9pbmNsdWRlL3B0aHJl
YWQuaCBzcmMvd2luc3VwL2N5Z3dpbi9pbmNsdWRlL3B0aHJlYWQuaAotLS0g
c3JjLm9sZC93aW5zdXAvY3lnd2luL2luY2x1ZGUvcHRocmVhZC5oCVdlZCBB
dWcgMTQgMTQ6MTk6NTkgMjAwMgorKysgc3JjL3dpbnN1cC9jeWd3aW4vaW5j
bHVkZS9wdGhyZWFkLmgJV2VkIEF1ZyAxNCAxNDozMjowOCAyMDAyCkBAIC01
MCwxMiArNTAsMTEgQEAgZXh0ZXJuICJDIgogI2RlZmluZSBQVEhSRUFEX0NS
RUFURV9KT0lOQUJMRSAwCiAjZGVmaW5lIFBUSFJFQURfRVhQTElDSVRfU0NI
RUQgMQogI2RlZmluZSBQVEhSRUFEX0lOSEVSSVRfU0NIRUQgMAotI2RlZmlu
ZSBQVEhSRUFEX01VVEVYX0RFRkFVTFQgMAotI2RlZmluZSBQVEhSRUFEX01V
VEVYX0VSUk9SQ0hFQ0sgMQotI2RlZmluZSBQVEhSRUFEX01VVEVYX05PUk1B
TCAyCisjZGVmaW5lIFBUSFJFQURfTVVURVhfRVJST1JDSEVDSyAwCisjZGVm
aW5lIFBUSFJFQURfTVVURVhfUkVDVVJTSVZFIDEKKyNkZWZpbmUgUFRIUkVB
RF9NVVRFWF9ERUZBVUxUIFBUSFJFQURfTVVURVhfRVJST1JDSEVDSwogLyog
dGhpcyBzaG91bGQgYmUgdG9vIGxvdyB0byBldmVyIGJlIGEgdmFsaWQgYWRk
cmVzcyAqLwogI2RlZmluZSBQVEhSRUFEX01VVEVYX0lOSVRJQUxJWkVSICh2
b2lkICopMjAKLSNkZWZpbmUgUFRIUkVBRF9NVVRFWF9SRUNVUlNJVkUgMAog
I2RlZmluZSBQVEhSRUFEX09OQ0VfSU5JVCB7IFBUSFJFQURfTVVURVhfSU5J
VElBTElaRVIsIDAgfQogI2RlZmluZSBQVEhSRUFEX1BSSU9fSU5IRVJJVAog
I2RlZmluZSBQVEhSRUFEX1BSSU9fTk9ORQpkaWZmIC11cnAgc3JjLm9sZC93
aW5zdXAvY3lnd2luL3RocmVhZC5jYyBzcmMvd2luc3VwL2N5Z3dpbi90aHJl
YWQuY2MKLS0tIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi90aHJlYWQuY2MJV2Vk
IEF1ZyAxNCAxNDozMToxMyAyMDAyCisrKyBzcmMvd2luc3VwL2N5Z3dpbi90
aHJlYWQuY2MJV2VkIEF1ZyAxNCAxNDozMjowOCAyMDAyCkBAIC0xMDQyLDM5
ICsxMDQyLDQwIEBAIHB0aHJlYWRfa2V5OjpmaXh1cF9hZnRlcl9mb3JrICgp
CiAgKklzbid0IGR1cGxpY2F0ZWQsIGl0J3MgcmVvcGVuZWQuCiAgKi8KIAot
cHRocmVhZF9tdXRleDo6cHRocmVhZF9tdXRleCAocHRocmVhZF9tdXRleGF0
dHIgKmF0dHIpOnZlcmlmeWFibGVfb2JqZWN0IChQVEhSRUFEX01VVEVYX01B
R0lDKQorcHRocmVhZF9tdXRleDo6cHRocmVhZF9tdXRleCAocHRocmVhZF9t
dXRleGF0dHIgKmF0dHIpIDoKKyAgdmVyaWZ5YWJsZV9vYmplY3QgKFBUSFJF
QURfTVVURVhfTUFHSUMpLAorICBsb2NrX2NvdW50ZXIgKE1VVEVYX0xPQ0tf
Q09VTlRFUl9JTklUSUFMKSwKKyAgcmVjdXJzaW9uX2NvdW50ZXIgKDApLCB3
aW4zMl9vYmpfaWQoTlVMTCksCisgIGNvbmR3YWl0cyAoMCksIG93bmVyIChO
VUxMKSwgdHlwZSAoUFRIUkVBRF9NVVRFWF9ERUZBVUxUKSwKKyAgcHNoYXJl
ZChQVEhSRUFEX1BST0NFU1NfUFJJVkFURSkKIHsKLSAgLyphdHRyIGNoZWNr
ZWQgaW4gdGhlIEMgY2FsbCAqLwotICBpZiAoYXR0ciAmJiBhdHRyLT5wc2hh
cmVkID09IFBUSFJFQURfUFJPQ0VTU19TSEFSRUQpCisgIHdpbjMyX29ial9p
ZCA9IDo6Q3JlYXRlU2VtYXBob3JlICgmc2VjX25vbmVfbmloLCAwLCBMT05H
X01BWCwgTlVMTCk7CisgIGlmICghd2luMzJfb2JqX2lkKQogICAgIHsKLSAg
ICAgIC8vIGZhaWwKICAgICAgIG1hZ2ljID0gMDsKICAgICAgIHJldHVybjsK
ICAgICB9Ci0gIGlmICh3aW5jYXAuaGFzX3RyeV9lbnRlcl9jcml0aWNhbF9z
ZWN0aW9uICgpKQotICAgIEluaXRpYWxpemVDcml0aWNhbFNlY3Rpb24gKCZj
cml0aWNhbHNlY3Rpb24pOwotICBlbHNlCisgIC8qYXR0ciBjaGVja2VkIGlu
IHRoZSBDIGNhbGwgKi8KKyAgaWYgKGF0dHIpCiAgICAgewotICAgICAgdGhp
cy0+d2luMzJfb2JqX2lkID0gOjpDcmVhdGVNdXRleCAoJnNlY19ub25lX25p
aCwgZmFsc2UsIE5VTEwpOwotICAgICAgaWYgKCF3aW4zMl9vYmpfaWQpCi0J
bWFnaWMgPSAwOworICAgICAgaWYgKGF0dHItPnBzaGFyZWQgPT0gUFRIUkVB
RF9QUk9DRVNTX1NIQVJFRCkKKyAgICAgICAgeworICAgICAgICAgIC8vIGZh
aWwKKyAgICAgICAgICBtYWdpYyA9IDA7CisgICAgICAgICAgcmV0dXJuOwor
ICAgICAgICB9CisKKyAgICAgIHR5cGUgPSBhdHRyLT5tdXRleHR5cGU7CiAg
ICAgfQotICBjb25kd2FpdHMgPSAwOwotICBwc2hhcmVkID0gUFRIUkVBRF9Q
Uk9DRVNTX1BSSVZBVEU7CisKICAgLyogdGhyZWFkc2FmZSBhZGRpdGlvbiBp
cyBlYXN5ICovCiAgIG5leHQgPSAocHRocmVhZF9tdXRleCAqKSBJbnRlcmxv
Y2tlZEV4Y2hhbmdlUG9pbnRlciAoJk1UX0lOVEVSRkFDRS0+bXV0ZXhzLCB0
aGlzKTsKIH0KIAogcHRocmVhZF9tdXRleDo6fnB0aHJlYWRfbXV0ZXggKCkK
IHsKLSAgaWYgKHdpbmNhcC5oYXNfdHJ5X2VudGVyX2NyaXRpY2FsX3NlY3Rp
b24gKCkpCi0gICAgRGVsZXRlQ3JpdGljYWxTZWN0aW9uICgmY3JpdGljYWxz
ZWN0aW9uKTsKLSAgZWxzZQotICAgIHsKLSAgICAgIGlmICh3aW4zMl9vYmpf
aWQpCi0JQ2xvc2VIYW5kbGUgKHdpbjMyX29ial9pZCk7Ci0gICAgICB3aW4z
Ml9vYmpfaWQgPSBOVUxMOwotICAgIH0KKyAgaWYgKHdpbjMyX29ial9pZCkK
KyAgICBDbG9zZUhhbmRsZSAod2luMzJfb2JqX2lkKTsKICAgLyogSSdtIG5v
dCAxMDAlIHN1cmUgdGhlIG5leHQgYml0IGlzIHRocmVhZHNhZmUuIEkgdGhp
bmsgaXQgaXMuLi4gKi8KICAgaWYgKE1UX0lOVEVSRkFDRS0+bXV0ZXhzID09
IHRoaXMpCiAgICAgLyogVE9ETzogcHJpbnRmIGFuIGVycm9yIGlmIHRoZSBy
ZXR1cm4gdmFsdWUgIT0gdGhpcyAqLwpAQCAtMTA4Myw3ICsxMDg0LDcgQEAg
cHRocmVhZF9tdXRleDo6fnB0aHJlYWRfbXV0ZXggKCkKICAgICB7CiAgICAg
ICBwdGhyZWFkX211dGV4ICp0ZW1wbXV0ZXggPSBNVF9JTlRFUkZBQ0UtPm11
dGV4czsKICAgICAgIHdoaWxlICh0ZW1wbXV0ZXgtPm5leHQgJiYgdGVtcG11
dGV4LT5uZXh0ICE9IHRoaXMpCi0JdGVtcG11dGV4ID0gdGVtcG11dGV4LT5u
ZXh0OworICAgICAgICB0ZW1wbXV0ZXggPSB0ZW1wbXV0ZXgtPm5leHQ7CiAg
ICAgICAvKiBidXQgdGhlcmUgbWF5IGJlIGEgcmFjZSBiZXR3ZWVuIHRoZSBs
b29wIGFib3ZlIGFuZCB0aGlzIHN0YXRlbWVudCAqLwogICAgICAgLyogVE9E
TzogcHJpbnRmIGFuIGVycm9yIGlmIHRoZSByZXR1cm4gdmFsdWUgIT0gdGhp
cyAqLwogICAgICAgSW50ZXJsb2NrZWRFeGNoYW5nZVBvaW50ZXIgKCZ0ZW1w
bXV0ZXgtPm5leHQsIHRoaXMtPm5leHQpOwpAQCAtMTA5MywzNCArMTA5NCw5
MiBAQCBwdGhyZWFkX211dGV4Ojp+cHRocmVhZF9tdXRleCAoKQogaW50CiBw
dGhyZWFkX211dGV4OjpMb2NrICgpCiB7Ci0gIGlmICh3aW5jYXAuaGFzX3Ry
eV9lbnRlcl9jcml0aWNhbF9zZWN0aW9uICgpKQorICBpbnQgcmVzdWx0ID0g
MDsKKyAgcHRocmVhZF90IHNlbGYgPSBwdGhyZWFkOjpzZWxmICgpOworCisg
IGlmICgwID09IEludGVybG9ja2VkSW5jcmVtZW50ICgmbG9ja19jb3VudGVy
KSkKKyAgICBTZXRPd25lciAoKTsKKyAgZWxzZSBpZiAoX19wdGhyZWFkX2Vx
dWFsKCZvd25lciwgJnNlbGYpKQorICAgIHsKKyAgICAgIEludGVybG9ja2Vk
RGVjcmVtZW50ICgmbG9ja19jb3VudGVyKTsKKyAgICAgIGlmIChQVEhSRUFE
X01VVEVYX1JFQ1VSU0lWRSA9PSB0eXBlKQorICAgICAgICBpZiAoVUlOVF9N
QVggIT0gcmVjdXJzaW9uX2NvdW50ZXIpCisgICAgICAgICAgKytyZWN1cnNp
b25fY291bnRlcjsKKyAgICAgICAgZWxzZQorICAgICAgICAgIHJlc3VsdCA9
IEVBR0FJTjsKKyAgICAgIGVsc2UKKyAgICAgICAgcmVzdWx0ID0gRURFQURM
SzsKKyAgICB9CisgIGVsc2UKICAgICB7Ci0gICAgICBFbnRlckNyaXRpY2Fs
U2VjdGlvbiAoJmNyaXRpY2Fsc2VjdGlvbik7Ci0gICAgICByZXR1cm4gMDsK
KyAgICAgIFdhaXRGb3JTaW5nbGVPYmplY3QgKHdpbjMyX29ial9pZCwgSU5G
SU5JVEUpOworICAgICAgU2V0T3duZXIgKCk7CiAgICAgfQotICAvKiBGSVhN
RTogUmV0dXJuIDAgb24gc3VjY2VzcyAqLwotICBXYWl0Rm9yU2luZ2xlT2Jq
ZWN0ICh3aW4zMl9vYmpfaWQsIElORklOSVRFKTsKLSAgcmV0dXJuIDA7CisK
KyAgcmV0dXJuIHJlc3VsdDsKIH0KIAotLyogcmV0dXJucyBub24temVybyBv
biBmYWlsdXJlICovCiBpbnQKIHB0aHJlYWRfbXV0ZXg6OlRyeUxvY2sgKCkK
IHsKLSAgaWYgKHdpbmNhcC5oYXNfdHJ5X2VudGVyX2NyaXRpY2FsX3NlY3Rp
b24gKCkpCi0gICAgcmV0dXJuICghVHJ5RW50ZXJDcml0aWNhbFNlY3Rpb24g
KCZjcml0aWNhbHNlY3Rpb24pKTsKLSAgcmV0dXJuIChXYWl0Rm9yU2luZ2xl
T2JqZWN0ICh3aW4zMl9vYmpfaWQsIDApID09IFdBSVRfVElNRU9VVCk7Cisg
IGludCByZXN1bHQgPSAwOworICBwdGhyZWFkX3Qgc2VsZiA9IHB0aHJlYWQ6
OnNlbGYgKCk7CisKKyAgaWYgKE1VVEVYX0xPQ0tfQ09VTlRFUl9JTklUSUFM
ID09CisgICAgICBJbnRlcmxvY2tlZENvbXBhcmVFeGNoYW5nZSAoJmxvY2tf
Y291bnRlciwgMCwgTVVURVhfTE9DS19DT1VOVEVSX0lOSVRJQUwgKSkKKyAg
ICBTZXRPd25lciAoKTsKKyAgZWxzZSBpZiAoX19wdGhyZWFkX2VxdWFsICgm
b3duZXIsICZzZWxmKSAmJiBQVEhSRUFEX01VVEVYX1JFQ1VSU0lWRSA9PSB0
eXBlKQorICAgIGlmIChVSU5UX01BWCAhPSByZWN1cnNpb25fY291bnRlcikK
KyAgICAgICsrcmVjdXJzaW9uX2NvdW50ZXI7CisgICAgZWxzZQorICAgICAg
cmVzdWx0ID0gRUFHQUlOOworICBlbHNlCisgICAgcmVzdWx0ID0gRUJVU1k7
CisKKyAgcmV0dXJuIHJlc3VsdDsKIH0KIAogaW50CiBwdGhyZWFkX211dGV4
OjpVbkxvY2sgKCkKIHsKLSAgaWYgKHdpbmNhcC5oYXNfdHJ5X2VudGVyX2Ny
aXRpY2FsX3NlY3Rpb24gKCkpCisgIHB0aHJlYWRfdCBzZWxmID0gcHRocmVh
ZDo6c2VsZiAoKTsKKworICBpZiAoIV9fcHRocmVhZF9lcXVhbCAoJm93bmVy
LCAmc2VsZikpCisgICAgcmV0dXJuIEVQRVJNOworCisgIGlmICgwID09IC0t
cmVjdXJzaW9uX2NvdW50ZXIpCiAgICAgewotICAgICAgTGVhdmVDcml0aWNh
bFNlY3Rpb24gKCZjcml0aWNhbHNlY3Rpb24pOwotICAgICAgcmV0dXJuIDA7
CisgICAgICBvd25lciA9IE5VTEw7CisgICAgICBpZiAoTVVURVhfTE9DS19D
T1VOVEVSX0lOSVRJQUwgIT0gSW50ZXJsb2NrZWREZWNyZW1lbnQgKCZsb2Nr
X2NvdW50ZXIpKQorICAgICAgICAvLyBBbm90aGVyIHRocmVhZCBpcyB3YWl0
aW5nCisgICAgICAgIDo6UmVsZWFzZVNlbWFwaG9yZSAod2luMzJfb2JqX2lk
LCAxLCBOVUxMKTsKICAgICB9Ci0gIHJldHVybiAoIVJlbGVhc2VNdXRleCAo
d2luMzJfb2JqX2lkKSk7CisKKyAgcmV0dXJuIDA7Cit9CisKK2ludAorcHRo
cmVhZF9tdXRleDo6RGVzdHJveSAoKQoreworICBpZiAoY29uZHdhaXRzIHx8
IFRyeUxvY2sgKCkpCisgICAgLy8gRG8gbm90IGRlc3Ryb3kgYSBjb25kd2Fp
dGVkIG9yIGxvY2tlZCBtdXRleAorICAgIHJldHVybiBFQlVTWTsKKyAgZWxz
ZSBpZiAocmVjdXJzaW9uX2NvdW50ZXIgIT0gMSkKKyAgICB7CisgICAgICAv
LyBEbyBub3QgZGVzdHJveSBhIHJlY3Vyc2l2ZSBsb2NrZWQgbXV0ZXgKKyAg
ICAgIC0tcmVjdXJzaW9uX2NvdW50ZXI7CisgICAgICByZXR1cm4gRUJVU1k7
CisgICAgfQorCisgIGRlbGV0ZSB0aGlzOworICByZXR1cm4gMDsKK30KKwor
dm9pZAorcHRocmVhZF9tdXRleDo6U2V0T3duZXIgKCkKK3sKKyAgIHJlY3Vy
c2lvbl9jb3VudGVyID0gMTsKKyAgIG93bmVyID0gcHRocmVhZDo6c2VsZiAo
KTsKIH0KIAogdm9pZApAQCAtMTEyOSwxNSArMTE4OCwxNSBAQCBwdGhyZWFk
X211dGV4OjpmaXh1cF9hZnRlcl9mb3JrICgpCiAgIGRlYnVnX3ByaW50ZiAo
Im11dGV4ICV4IGluIGZpeHVwX2FmdGVyX2ZvcmsiLCB0aGlzKTsKICAgaWYg
KHBzaGFyZWQgIT0gUFRIUkVBRF9QUk9DRVNTX1BSSVZBVEUpCiAgICAgYXBp
X2ZhdGFsICgicHRocmVhZF9tdXRleDo6Zml4dXBfYWZ0ZXJfZm9yayAoKSBk
b2Vzbid0dW5kZXJzdGFuZCBQUk9DRVNTX1NIQVJFRCBtdXRleCdzIik7Ci0g
IC8qIEZJWE1FOiBkdXBsaWNhdGUgY29kZSBoZXJlIGFuZCBpbiB0aGUgY29u
c3RydWN0b3IuICovCi0gIGlmICh3aW5jYXAuaGFzX3RyeV9lbnRlcl9jcml0
aWNhbF9zZWN0aW9uICgpKQotICAgIEluaXRpYWxpemVDcml0aWNhbFNlY3Rp
b24gKCZjcml0aWNhbHNlY3Rpb24pOwotICBlbHNlCi0gICAgewotICAgICAg
d2luMzJfb2JqX2lkID0gOjpDcmVhdGVNdXRleCAoJnNlY19ub25lX25paCwg
ZmFsc2UsIE5VTEwpOwotICAgICAgaWYgKCF3aW4zMl9vYmpfaWQpCi0JYXBp
X2ZhdGFsICgicHRocmVhZF9tdXRleDo6Zml4dXBfYWZ0ZXJfZm9yayAoKSBm
YWlsZWQgdG8gY3JlYXRlIG5ldyB3aW4zMiBtdXRleCIpOwotICAgIH0KKwor
ICAvLyBTdGF0ZSBpcyBwcmVzZXJ2ZWQgd2l0aCBvbmUgZXhjZXB0aW9uIDog
QWxsIHdhaXRpbmcgdGhyZWFkcyBhcmUgZ29uZSBhZnRlciBmb3JrCisgIGlm
IChsb2NrX2NvdW50ZXIgIT0gTVVURVhfTE9DS19DT1VOVEVSX0lOSVRJQUwp
CisgICAgbG9ja19jb3VudGVyID0gMDsKKworICB3aW4zMl9vYmpfaWQgPSA6
OkNyZWF0ZVNlbWFwaG9yZSAoJnNlY19ub25lX25paCwgMCwgTE9OR19NQVgs
IE5VTEwpOworICBpZiAoIXdpbjMyX29ial9pZCkKKyAgICBhcGlfZmF0YWwg
KCJmYWlsZWQgdG8gcmVjcmVhdGUgd2luMzIgc2VtYXBob3JlIGZvciBtdXRl
eCIpOworCiAjaWYgREVURUNUX0JBRF9BUFBTCiAgIGlmIChjb25kd2FpdHMp
CiAgICAgYXBpX2ZhdGFsICgiRm9ya2VkICgpIHdoaWxlIGEgbXV0ZXggaGFz
IGNvbmRpdGlvbiB2YXJpYWJsZXMgd2FpdGluZyBvbiBpdC5cblJlcG9ydCB0
byBjeWd3aW5AY3lnd2luLmNvbSIpOwpAQCAtMjE4NCwxNiArMjI0MywxNyBA
QCBfX3B0aHJlYWRfbXV0ZXhfdW5sb2NrIChwdGhyZWFkX211dGV4X3QgCiBp
bnQKIF9fcHRocmVhZF9tdXRleF9kZXN0cm95IChwdGhyZWFkX211dGV4X3Qg
Km11dGV4KQogeworICBpbnQgcnY7CisKICAgaWYgKGNoZWNrX3ZhbGlkX3Bv
aW50ZXIgKG11dGV4KSAmJiAoKm11dGV4ID09IFBUSFJFQURfTVVURVhfSU5J
VElBTElaRVIpKQogICAgIHJldHVybiAwOwogICBpZiAodmVyaWZ5YWJsZV9v
YmplY3RfaXN2YWxpZCAobXV0ZXgsIFBUSFJFQURfTVVURVhfTUFHSUMpICE9
IFZBTElEX09CSkVDVCkKICAgICByZXR1cm4gRUlOVkFMOwogCi0gIC8qcmVh
ZGluZyBhIHdvcmQgaXMgYXRvbWljICovCi0gIGlmICgoKm11dGV4KS0+Y29u
ZHdhaXRzKQotICAgIHJldHVybiBFQlVTWTsKKyAgcnYgPSAoKm11dGV4KS0+
RGVzdHJveSAoKTsKKyAgaWYgKHJ2KQorICAgIHJldHVybiBydjsKIAotICBk
ZWxldGUgKCptdXRleCk7CiAgICptdXRleCA9IE5VTEw7CiAgIHJldHVybiAw
OwogfQpAQCAtMjIyNywxMCArMjI4Nyw2IEBAIF9fcHRocmVhZF9tdXRleGF0
dHJfZ2V0cHNoYXJlZCAoY29uc3QgcHQKICAgcmV0dXJuIDA7CiB9CiAKLS8q
V2luMzIgbXV0ZXgncyBhcmUgZXF1aXZhbGVudCB0byBwb3NpeCBSRUNVUlNJ
VkUgbXV0ZXhzLgotICpXZSBuZWVkIHRvIHB1dCBnbHVlIGluIHBsYWNlIHRv
IHN1cHBvcnQgb3RoZXIgdHlwZXMgb2YgbXV0ZXgncy4gV2UgbWFwCi0gKlBU
SFJFQURfTVVURVhfREVGQVVMVCB0byBQVEhSRUFEX01VVEVYX1JFQ1VSU0lW
RSBhbmQgcmV0dXJuIEVJTlZBTCBmb3Igb3RoZXIgdHlwZXMuCi0gKi8KIGlu
dAogX19wdGhyZWFkX211dGV4YXR0cl9nZXR0eXBlIChjb25zdCBwdGhyZWFk
X211dGV4YXR0cl90ICphdHRyLCBpbnQgKnR5cGUpCiB7CkBAIC0yMjQwLDEw
ICsyMjk2LDcgQEAgX19wdGhyZWFkX211dGV4YXR0cl9nZXR0eXBlIChjb25z
dCBwdGhyZQogICByZXR1cm4gMDsKIH0KIAotLypDdXJyZW50bHkgcHRocmVh
ZF9tdXRleF9pbml0IGlnbm9yZXMgdGhlIGF0dHIgdmFyaWFibGUsIHRoaXMg
aXMgYmVjYXVzZQotICpub25lIG9mIHRoZSB2YXJpYWJsZXMgaGF2ZSBhbnkg
aW1wYWN0IG9uIGl0J3MgYmVoYXZpb3VyLgotICoKLSAqRklYTUU6IHdyaXRl
IGFuZCB0ZXN0IHByb2Nlc3Mgc2hhcmVkIG11dGV4J3MuCisvKkZJWE1FOiB3
cml0ZSBhbmQgdGVzdCBwcm9jZXNzIHNoYXJlZCBtdXRleCdzLgogICovCiBp
bnQKIF9fcHRocmVhZF9tdXRleGF0dHJfaW5pdCAocHRocmVhZF9tdXRleGF0
dHJfdCAqYXR0cikKQEAgLTIzMTQsMTUgKzIzNjcsMjEgQEAgX19wdGhyZWFk
X211dGV4YXR0cl9zZXRwc2hhcmVkIChwdGhyZWFkXwogICByZXR1cm4gMDsK
IH0KIAotLypzZWUgX19wdGhyZWFkX211dGV4X2dldHR5cGUgKi8KIGludAog
X19wdGhyZWFkX211dGV4YXR0cl9zZXR0eXBlIChwdGhyZWFkX211dGV4YXR0
cl90ICphdHRyLCBpbnQgdHlwZSkKIHsKICAgaWYgKHZlcmlmeWFibGVfb2Jq
ZWN0X2lzdmFsaWQgKGF0dHIsIFBUSFJFQURfTVVURVhBVFRSX01BR0lDKSAh
PSBWQUxJRF9PQkpFQ1QpCiAgICAgcmV0dXJuIEVJTlZBTDsKLSAgaWYgKHR5
cGUgIT0gUFRIUkVBRF9NVVRFWF9SRUNVUlNJVkUpCi0gICAgcmV0dXJuIEVJ
TlZBTDsKLSAgKCphdHRyKS0+bXV0ZXh0eXBlID0gdHlwZTsKKworICBzd2l0
Y2ggKHR5cGUpCisgICAgeworICAgIGNhc2UgUFRIUkVBRF9NVVRFWF9FUlJP
UkNIRUNLOgorICAgIGNhc2UgUFRIUkVBRF9NVVRFWF9SRUNVUlNJVkU6Cisg
ICAgICAoKmF0dHIpLT5tdXRleHR5cGUgPSB0eXBlOworICAgICAgYnJlYWs7
CisgICAgZGVmYXVsdDoKKyAgICAgIHJldHVybiBFSU5WQUw7CisgICAgfQog
ICByZXR1cm4gMDsKIH0KIApkaWZmIC11cnAgc3JjLm9sZC93aW5zdXAvY3ln
d2luL3RocmVhZC5oIHNyYy93aW5zdXAvY3lnd2luL3RocmVhZC5oCi0tLSBz
cmMub2xkL3dpbnN1cC9jeWd3aW4vdGhyZWFkLmgJV2VkIEF1ZyAxNCAxNDoz
MToxMyAyMDAyCisrKyBzcmMvd2luc3VwL2N5Z3dpbi90aHJlYWQuaAlXZWQg
QXVnIDE0IDE0OjMyOjA4IDIwMDIKQEAgLTE1Miw2ICsxNTIsOCBAQCBwcml2
YXRlOgogI2RlZmluZSBTRU1fTUFHSUMgUFRIUkVBRF9NQUdJQys3CiAjZGVm
aW5lIFBUSFJFQURfT05DRV9NQUdJQyBQVEhSRUFEX01BR0lDKzg7CiAKKyNk
ZWZpbmUgTVVURVhfTE9DS19DT1VOVEVSX0lOSVRJQUwgICAoLTEpCisKIC8q
IHZlcmlmeWFibGVfb2JqZWN0IHNob3VsZCBub3QgYmUgZGVmaW5lZCBoZXJl
IC0gaXQncyBhIGdlbmVyYWwgcHVycG9zZSBjbGFzcyAqLwogCiBjbGFzcyB2
ZXJpZnlhYmxlX29iamVjdApAQCAtMjE3LDE1ICsyMTksMjAgQEAgcHVibGlj
OgogY2xhc3MgcHRocmVhZF9tdXRleDpwdWJsaWMgdmVyaWZ5YWJsZV9vYmpl
Y3QKIHsKIHB1YmxpYzoKLSAgQ1JJVElDQUxfU0VDVElPTiBjcml0aWNhbHNl
Y3Rpb247CisgIExPTkcgbG9ja19jb3VudGVyOworICB1bnNpZ25lZCBpbnQg
cmVjdXJzaW9uX2NvdW50ZXI7CiAgIEhBTkRMRSB3aW4zMl9vYmpfaWQ7CiAg
IExPTkcgY29uZHdhaXRzOworICBwdGhyZWFkX3Qgb3duZXI7CisgIGludCB0
eXBlOwogICBpbnQgcHNoYXJlZDsKICAgY2xhc3MgcHRocmVhZF9tdXRleCAq
IG5leHQ7CiAKICAgaW50IExvY2sgKCk7CiAgIGludCBUcnlMb2NrICgpOwog
ICBpbnQgVW5Mb2NrICgpOworICBpbnQgRGVzdHJveSAoKTsKKyAgdm9pZCBT
ZXRPd25lciAoKTsKICAgdm9pZCBmaXh1cF9hZnRlcl9mb3JrICgpOwogCiAg
IHB0aHJlYWRfbXV0ZXggKHB0aHJlYWRfbXV0ZXhhdHRyICogPSBOVUxMKTsK

--131799-32057-1032254530=:297--
