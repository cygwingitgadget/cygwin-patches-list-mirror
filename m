Return-Path: <cygwin-patches-return-3653-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 5492 invoked by alias); 28 Feb 2003 13:53:49 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sources.redhat.com/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sources.redhat.com/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Received: (qmail 5483 invoked from network); 28 Feb 2003 13:53:48 -0000
X-Authentication-Warning: atacama.four-d.de: mail set sender to <tpfaff@gmx.net> using -f
Date: Fri, 28 Feb 2003 13:53:00 -0000
From: Thomas Pfaff <tpfaff@gmx.net>
To: cygwin-patches@cygwin.com
Subject: [PATCH] Remove wrapper functions in pthread.cc
Message-ID: <Pine.WNT.4.44.0302281442110.371-200000@algeria.intern.net>
X-X-Sender: pfaff@antarctica.intern.net
MIME-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="11330916-10922-1046440413=:371"
X-SW-Source: 2003-q1/txt/msg00302.txt.bz2

  This message is in MIME format.  The first part should be readable text,
  while the remaining parts are likely unreadable without MIME-aware tools.
  Send mail to mime@docserver.cac.washington.edu for more info.

--11330916-10922-1046440413=:371
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-length: 6987


This patch removes all wrapper functions in pthread.cc that only add an
additional function call. Export the functions in thread.cc instead.

2003-02-28  Thomas Pfaff  <tpfaff@gmx.net>

	* pthread.cc (pthread_attr_init): Remove
	(pthread_attr_destroy): Ditto.
	(pthread_attr_setdetachstate): Ditto.
	(pthread_attr_getdetachstate): Ditto.
	(pthread_attr_setstacksize): Ditto.
	(pthread_attr_getstacksize): Ditto.
	(pthread_attr_setinheritsched): Ditto.
	(pthread_attr_getinheritsched): Ditto.
	(pthread_attr_setschedparam): Ditto.
	(pthread_attr_getschedparam): Ditto.
	(pthread_attr_setschedpolicy): Ditto.
	(pthread_attr_getschedpolicy): Ditto.
	(pthread_attr_setscope): Ditto.
	(pthread_attr_getscope): Ditto.
	(pthread_attr_setstackaddr): Ditto.
	(pthread_attr_getstackaddr): Ditto.
	(pthread_key_create): Ditto.
	(pthread_key_delete): Ditto.
	(pthread_setspecific): Ditto.
	(pthread_getspecific): Ditto.
	(pthread_kill): Ditto.
	(pthread_sigmask): Ditto.
	(pthread_equal): Ditto.
	(pthread_mutex_lock): Ditto.
	(pthread_mutex_trylock): Ditto.
	(pthread_mutex_unlock): Ditto.
	(pthread_mutex_destroy): Ditto.
	(pthread_mutex_setprioceiling): Ditto.
	(pthread_mutex_getprioceiling): Ditto.
	(pthread_mutexattr_destroy): Ditto.
	(pthread_mutexattr_getprioceiling): Ditto.
	(pthread_mutexattr_getprotocol): Ditto.
	(pthread_mutexattr_getpshared): Ditto.
	(pthread_mutexattr_gettype): Ditto.
	(pthread_mutexattr_init): Ditto.
	(pthread_mutexattr_setprioceiling): Ditto.
	(pthread_mutexattr_setprotocol): Ditto.
	(pthread_mutexattr_setpshared): Ditto.
	(pthread_mutexattr_settype): Ditto.
	(pthread_cond_destroy): Ditto.
	(pthread_cond_signal): Ditto.
	(pthread_cond_broadcast): Ditto.
	(pthread_condattr_init): Ditto.
	(pthread_condattr_destroy): Ditto.
	(pthread_condattr_getpshared): Ditto.
	(pthread_condattr_setpshared): Ditto.
	(pthread_rwlock_destroy): Ditto.
	(pthread_rwlock_rdlock): Ditto.
	(pthread_rwlock_tryrdlock): Ditto.
	(pthread_rwlock_wrlock): Ditto.
	(pthread_rwlock_trywrlock): Ditto.
	(pthread_rwlock_unlock): Ditto.
	(pthread_rwlockattr_init): Ditto.
	(pthread_rwlockattr_getpshared): Ditto.
	(pthread_rwlockattr_setpshared): Ditto.
	(pthread_rwlockattr_destroy): Ditto.
	(pthread_getconcurrency): Ditto.
	(pthread_setconcurrency): Ditto.
	(pthread_getschedparam): Ditto.
	(pthread_setschedparam): Ditto.

	* thread.h (__pthread_attr_init): Remove prototype.
	(__pthread_attr_destroy): Ditto.
	(__pthread_attr_setdetachstate): Ditto.
	(__pthread_attr_getdetachstate): Ditto.
	(__pthread_attr_setstacksize): Ditto.
	(__pthread_attr_getstacksize): Ditto.
	(__pthread_attr_setinheritsched): Ditto.
	(__pthread_attr_getinheritsched): Ditto.
	(__pthread_attr_setschedparam): Ditto.
	(__pthread_attr_getschedparam): Ditto.
	(__pthread_attr_setschedpolicy): Ditto.
	(__pthread_attr_getschedpolicy): Ditto.
	(__pthread_attr_setscope): Ditto.
	(__pthread_attr_getscope): Ditto.
	(__pthread_attr_setstackaddr): Ditto.
	(__pthread_attr_getstackaddr): Ditto.
	(__pthread_key_create): Ditto.
	(__pthread_key_delete): Ditto.
	(__pthread_setspecific): Ditto.
	(__pthread_getspecific): Ditto.
	(__pthread_kill): Ditto.
	(__pthread_sigmask): Ditto.
	(__pthread_equal): Ditto.
	(__pthread_mutex_lock): Ditto.
	(__pthread_mutex_trylock): Ditto.
	(__pthread_mutex_unlock): Ditto.
	(__pthread_mutex_destroy): Ditto.
	(__pthread_mutex_setprioceiling): Ditto.
	(__pthread_mutex_getprioceiling): Ditto.
	(__pthread_mutexattr_destroy): Ditto.
	(__pthread_mutexattr_getprioceiling): Ditto.
	(__pthread_mutexattr_getprotocol): Ditto.
	(__pthread_mutexattr_getpshared): Ditto.
	(__pthread_mutexattr_gettype): Ditto.
	(__pthread_mutexattr_init): Ditto.
	(__pthread_mutexattr_setprioceiling): Ditto.
	(__pthread_mutexattr_setprotocol): Ditto.
	(__pthread_mutexattr_setpshared): Ditto.
	(__pthread_mutexattr_settype): Ditto.
	(__pthread_cond_destroy): Ditto.
	(__pthread_cond_signal): Ditto.
	(__pthread_cond_broadcast): Ditto.
	(__pthread_condattr_init): Ditto.
	(__pthread_condattr_destroy): Ditto.
	(__pthread_condattr_getpshared): Ditto.
	(__pthread_condattr_setpshared): Ditto.
	(__pthread_rwlock_destroy): Ditto.
	(__pthread_rwlock_rdlock): Ditto.
	(__pthread_rwlock_tryrdlock): Ditto.
	(__pthread_rwlock_wrlock): Ditto.
	(__pthread_rwlock_trywrlock): Ditto.
	(__pthread_rwlock_unlock): Ditto.
	(__pthread_rwlockattr_init): Ditto.
	(__pthread_rwlockattr_getpshared): Ditto.
	(__pthread_rwlockattr_setpshared): Ditto.
	(__pthread_rwlockattr_destroy): Ditto.
	(__pthread_getconcurrency): Ditto.
	(__pthread_setconcurrency): Ditto.
	(__pthread_getschedparam): Ditto.
	(__pthread_setschedparam): Ditto.

	* thread.cc: Rename __pthread_equal to pthread_equal throughout.
	Change pthread_self parameter appropriate.
	(__pthread_attr_init): Remove __ prefix. Change to extern "C".
	(__pthread_attr_destroy): Ditto.
	(__pthread_attr_setdetachstate): Ditto.
	(__pthread_attr_getdetachstate): Ditto.
	(__pthread_attr_setstacksize): Ditto.
	(__pthread_attr_getstacksize): Ditto.
	(__pthread_attr_setinheritsched): Ditto.
	(__pthread_attr_getinheritsched): Ditto.
	(__pthread_attr_setschedparam): Ditto.
	(__pthread_attr_getschedparam): Ditto.
	(__pthread_attr_setschedpolicy): Ditto.
	(__pthread_attr_getschedpolicy): Ditto.
	(__pthread_attr_setscope): Ditto.
	(__pthread_attr_getscope): Ditto.
	(__pthread_attr_setstackaddr): Ditto.
	(__pthread_attr_getstackaddr): Ditto.
	(__pthread_key_create): Ditto.
	(__pthread_key_delete): Ditto.
	(__pthread_setspecific): Ditto.
	(__pthread_getspecific): Ditto.
	(__pthread_kill): Ditto.
	(__pthread_sigmask): Ditto.
	(__pthread_equal): Ditto.
	(__pthread_mutex_lock): Ditto.
	(__pthread_mutex_trylock): Ditto.
	(__pthread_mutex_unlock): Ditto.
	(__pthread_mutex_destroy): Ditto.
	(__pthread_mutex_setprioceiling): Ditto.
	(__pthread_mutex_getprioceiling): Ditto.
	(__pthread_mutexattr_destroy): Ditto.
	(__pthread_mutexattr_getprioceiling): Ditto.
	(__pthread_mutexattr_getprotocol): Ditto.
	(__pthread_mutexattr_getpshared): Ditto.
	(__pthread_mutexattr_gettype): Ditto.
	(__pthread_mutexattr_init): Ditto.
	(__pthread_mutexattr_setprioceiling): Ditto.
	(__pthread_mutexattr_setprotocol): Ditto.
	(__pthread_mutexattr_setpshared): Ditto.
	(__pthread_mutexattr_settype): Ditto.
	(__pthread_cond_destroy): Ditto.
	(__pthread_cond_signal): Ditto.
	(__pthread_cond_broadcast): Ditto.
	(__pthread_condattr_init): Ditto.
	(__pthread_condattr_destroy): Ditto.
	(__pthread_condattr_getpshared): Ditto.
	(__pthread_condattr_setpshared): Ditto.
	(__pthread_rwlock_destroy): Ditto.
	(__pthread_rwlock_rdlock): Ditto.
	(__pthread_rwlock_tryrdlock): Ditto.
	(__pthread_rwlock_wrlock): Ditto.
	(__pthread_rwlock_trywrlock): Ditto.
	(__pthread_rwlock_unlock): Ditto.
	(__pthread_rwlockattr_init): Ditto.
	(__pthread_rwlockattr_getpshared): Ditto.
	(__pthread_rwlockattr_setpshared): Ditto.
	(__pthread_rwlockattr_destroy): Ditto.
	(__pthread_getconcurrency): Ditto.
	(__pthread_setconcurrency): Ditto.
	(__pthread_getschedparam): Ditto.
	(__pthread_setschedparam): Ditto.



--11330916-10922-1046440413=:371
Content-Type: TEXT/plain; name="pthread_wrapper.patch"
Content-Transfer-Encoding: BASE64
Content-ID: <Pine.WNT.4.44.0302281453330.371@algeria.intern.net>
Content-Description: 
Content-Disposition: attachment; filename="pthread_wrapper.patch"
Content-length: 45596

ZGlmZiAtdXJwIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi9wdGhyZWFkLmNjIHNy
Yy93aW5zdXAvY3lnd2luL3B0aHJlYWQuY2MKLS0tIHNyYy5vbGQvd2luc3Vw
L2N5Z3dpbi9wdGhyZWFkLmNjCTIwMDMtMDItMjggMTE6MzM6MTAuMDAwMDAw
MDAwICswMTAwCisrKyBzcmMvd2luc3VwL2N5Z3dpbi9wdGhyZWFkLmNjCTIw
MDMtMDItMjggMTI6MjA6NTEuMDAwMDAwMDAwICswMTAwCkBAIC0zNiwxMDcg
KzM2LDYgQEAgcHRocmVhZF9hdGZvcmsgKHZvaWQgKCpwcmVwYXJlKSh2b2lk
KSwgdgogICByZXR1cm4gcHRocmVhZDo6YXRmb3JrIChwcmVwYXJlLCBwYXJl
bnQsIGNoaWxkKTsKIH0KIAotaW50Ci1wdGhyZWFkX2F0dHJfaW5pdCAocHRo
cmVhZF9hdHRyX3QgKiBhdHRyKQotewotICByZXR1cm4gX19wdGhyZWFkX2F0
dHJfaW5pdCAoYXR0cik7Ci19Ci0KLWludAotcHRocmVhZF9hdHRyX2Rlc3Ry
b3kgKHB0aHJlYWRfYXR0cl90ICogYXR0cikKLXsKLSAgcmV0dXJuIF9fcHRo
cmVhZF9hdHRyX2Rlc3Ryb3kgKGF0dHIpOwotfQotCi1pbnQKLXB0aHJlYWRf
YXR0cl9zZXRkZXRhY2hzdGF0ZSAocHRocmVhZF9hdHRyX3QgKiBhdHRyLCBp
bnQgZGV0YWNoc3RhdGUpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfYXR0cl9z
ZXRkZXRhY2hzdGF0ZSAoYXR0ciwgZGV0YWNoc3RhdGUpOwotfQotCi1pbnQK
LXB0aHJlYWRfYXR0cl9nZXRkZXRhY2hzdGF0ZSAoY29uc3QgcHRocmVhZF9h
dHRyX3QgKiBhdHRyLCBpbnQgKmRldGFjaHN0YXRlKQotewotICByZXR1cm4g
X19wdGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUgKGF0dHIsIGRldGFjaHN0
YXRlKTsKLX0KLQotCi1pbnQKLXB0aHJlYWRfYXR0cl9zZXRzdGFja3NpemUg
KHB0aHJlYWRfYXR0cl90ICogYXR0ciwgc2l6ZV90IHNpemUpCi17Ci0gIHJl
dHVybiBfX3B0aHJlYWRfYXR0cl9zZXRzdGFja3NpemUgKGF0dHIsIHNpemUp
OwotfQotCi1pbnQKLXB0aHJlYWRfYXR0cl9nZXRzdGFja3NpemUgKGNvbnN0
IHB0aHJlYWRfYXR0cl90ICogYXR0ciwgc2l6ZV90ICogc2l6ZSkKLXsKLSAg
cmV0dXJuIF9fcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZSAoYXR0ciwgc2l6
ZSk7Ci19Ci0KLWludAotcHRocmVhZF9hdHRyX3NldGluaGVyaXRzY2hlZCAo
cHRocmVhZF9hdHRyX3QgKiBhdHRyLCBpbnQgaW5oZXJpdHNjaGVkKQotewot
ICByZXR1cm4gX19wdGhyZWFkX2F0dHJfc2V0aW5oZXJpdHNjaGVkIChhdHRy
LCBpbmhlcml0c2NoZWQpOwotfQotCi1pbnQKLXB0aHJlYWRfYXR0cl9nZXRp
bmhlcml0c2NoZWQgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0ciwgaW50
ICppbmhlcml0c2NoZWQpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfYXR0cl9n
ZXRpbmhlcml0c2NoZWQgKGF0dHIsIGluaGVyaXRzY2hlZCk7Ci19Ci0KLWlu
dAotcHRocmVhZF9hdHRyX3NldHNjaGVkcGFyYW0gKHB0aHJlYWRfYXR0cl90
ICogYXR0ciwKLQkJCSAgICBjb25zdCBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKnBh
cmFtKQotewotICByZXR1cm4gX19wdGhyZWFkX2F0dHJfc2V0c2NoZWRwYXJh
bSAoYXR0ciwgcGFyYW0pOwotfQotCi1pbnQKLXB0aHJlYWRfYXR0cl9nZXRz
Y2hlZHBhcmFtIChjb25zdCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsCi0JCQkg
ICAgc3RydWN0IHNjaGVkX3BhcmFtICpwYXJhbSkKLXsKLSAgcmV0dXJuIF9f
cHRocmVhZF9hdHRyX2dldHNjaGVkcGFyYW0gKGF0dHIsIHBhcmFtKTsKLX0K
LQotaW50Ci1wdGhyZWFkX2F0dHJfc2V0c2NoZWRwb2xpY3kgKHB0aHJlYWRf
YXR0cl90ICogYXR0ciwgaW50IHBvbGljeSkKLXsKLSAgcmV0dXJuIF9fcHRo
cmVhZF9hdHRyX3NldHNjaGVkcG9saWN5IChhdHRyLCBwb2xpY3kpOwotfQot
Ci1pbnQKLXB0aHJlYWRfYXR0cl9nZXRzY2hlZHBvbGljeSAoY29uc3QgcHRo
cmVhZF9hdHRyX3QgKiBhdHRyLCBpbnQgKnBvbGljeSkKLXsKLSAgcmV0dXJu
IF9fcHRocmVhZF9hdHRyX2dldHNjaGVkcG9saWN5IChhdHRyLCBwb2xpY3kp
OwotfQotCi1pbnQKLXB0aHJlYWRfYXR0cl9zZXRzY29wZSAocHRocmVhZF9h
dHRyX3QgKiBhdHRyLCBpbnQgY29udGVudGlvbnNjb3BlKQotewotICByZXR1
cm4gX19wdGhyZWFkX2F0dHJfc2V0c2NvcGUgKGF0dHIsIGNvbnRlbnRpb25z
Y29wZSk7Ci19Ci0KLWludAotcHRocmVhZF9hdHRyX2dldHNjb3BlIChjb25z
dCBwdGhyZWFkX2F0dHJfdCAqIGF0dHIsIGludCAqY29udGVudGlvbnNjb3Bl
KQotewotICByZXR1cm4gX19wdGhyZWFkX2F0dHJfZ2V0c2NvcGUgKGF0dHIs
IGNvbnRlbnRpb25zY29wZSk7Ci19Ci0KLSNpZmRlZiBfUE9TSVhfVEhSRUFE
X0FUVFJfU1RBQ0tBRERSCi1pbnQKLXB0aHJlYWRfYXR0cl9zZXRzdGFja2Fk
ZHIgKHB0aHJlYWRfYXR0cl90ICogYXR0ciwgdm9pZCAqc3RhY2thZGRyKQot
ewotICByZXR1cm4gX19wdGhyZWFkX2F0dHJfc2V0c3RhY2thZGRyIChhdHRy
LCBzdGFja2FkZHIpOwotfQotCi1pbnQKLXB0aHJlYWRfYXR0cl9nZXRzdGFj
a2FkZHIgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICogYXR0ciwgdm9pZCAqKnN0
YWNrYWRkcikKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9hdHRyX2dldHN0YWNr
YWRkciAoYXR0ciwgc3RhY2thZGRyKTsKLX0KLSNlbmRpZgotCiAvKiBUaHJl
YWQgRXhpdCAqLwogdm9pZAogcHRocmVhZF9leGl0ICh2b2lkICp2YWx1ZV9w
dHIpCkBAIC0xNzksNDQgKzc4LDYgQEAgcHRocmVhZF9nZXRzZXF1ZW5jZV9u
cCAocHRocmVhZF90ICogdGhyZQogICByZXR1cm4gKCp0aHJlYWQpLT5nZXRz
ZXF1ZW5jZV9ucCAoKTsKIH0KIAotLyogVGhyZWFkIFNwZWNpZmljRGF0YSAq
LwotaW50Ci1wdGhyZWFkX2tleV9jcmVhdGUgKHB0aHJlYWRfa2V5X3QgKiBr
ZXksIHZvaWQgKCpkZXN0cnVjdG9yKSAodm9pZCAqKSkKLXsKLSAgcmV0dXJu
IF9fcHRocmVhZF9rZXlfY3JlYXRlIChrZXksIGRlc3RydWN0b3IpOwotfQot
Ci1pbnQKLXB0aHJlYWRfa2V5X2RlbGV0ZSAocHRocmVhZF9rZXlfdCBrZXkp
Ci17Ci0gIHJldHVybiBfX3B0aHJlYWRfa2V5X2RlbGV0ZSAoa2V5KTsKLX0K
LQotaW50Ci1wdGhyZWFkX3NldHNwZWNpZmljIChwdGhyZWFkX2tleV90IGtl
eSwgY29uc3Qgdm9pZCAqdmFsdWUpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRf
c2V0c3BlY2lmaWMgKGtleSwgdmFsdWUpOwotfQotCi12b2lkICoKLXB0aHJl
YWRfZ2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5KQotewotICByZXR1
cm4gKHZvaWQgKikgX19wdGhyZWFkX2dldHNwZWNpZmljIChrZXkpOwotfQot
Ci0vKiBUaHJlYWQgc2lnbmFsICovCi1pbnQKLXB0aHJlYWRfa2lsbCAocHRo
cmVhZF90IHRocmVhZCwgaW50IHNpZykKLXsKLSAgcmV0dXJuIF9fcHRocmVh
ZF9raWxsICh0aHJlYWQsIHNpZyk7Ci19Ci0KLWludAotcHRocmVhZF9zaWdt
YXNrIChpbnQgb3BlcmF0aW9uLCBjb25zdCBzaWdzZXRfdCAqIHNldCwgc2ln
c2V0X3QgKiBvbGRfc2V0KQotewotICByZXR1cm4gX19wdGhyZWFkX3NpZ21h
c2sgKG9wZXJhdGlvbiwgc2V0LCBvbGRfc2V0KTsKLX0KLQogLyogIElEICov
CiAKIHB0aHJlYWRfdCBwdGhyZWFkX3NlbGYgKCkKQEAgLTIyNCwxMiArODUs
NiBAQCBwdGhyZWFkX3QgcHRocmVhZF9zZWxmICgpCiAgIHJldHVybiBwdGhy
ZWFkOjpzZWxmICgpOwogfQogCi1pbnQKLXB0aHJlYWRfZXF1YWwgKHB0aHJl
YWRfdCB0MSwgcHRocmVhZF90IHQyKQotewotICByZXR1cm4gX19wdGhyZWFk
X2VxdWFsICgmdDEsICZ0Mik7Ci19Ci0KIC8qIE11dGV4ZXMgICovCiBpbnQK
IHB0aHJlYWRfbXV0ZXhfaW5pdCAocHRocmVhZF9tdXRleF90ICogbXV0ZXgs
IGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKiBhdHRyKQpAQCAtMjM3LDI1
NyArOTIsMjAgQEAgcHRocmVhZF9tdXRleF9pbml0IChwdGhyZWFkX211dGV4
X3QgKiBtdQogICByZXR1cm4gcHRocmVhZF9tdXRleDo6aW5pdCAobXV0ZXgs
IGF0dHIpOwogfQogCi1pbnQKLXB0aHJlYWRfbXV0ZXhfbG9jayAocHRocmVh
ZF9tdXRleF90ICogbXV0ZXgpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfbXV0
ZXhfbG9jayAobXV0ZXgpOwotfQotCi1pbnQKLXB0aHJlYWRfbXV0ZXhfdHJ5
bG9jayAocHRocmVhZF9tdXRleF90ICogbXV0ZXgpCi17Ci0gIHJldHVybiBf
X3B0aHJlYWRfbXV0ZXhfdHJ5bG9jayAobXV0ZXgpOwotfQotCi1pbnQKLXB0
aHJlYWRfbXV0ZXhfdW5sb2NrIChwdGhyZWFkX211dGV4X3QgKiBtdXRleCkK
LXsKLSAgcmV0dXJuIF9fcHRocmVhZF9tdXRleF91bmxvY2sgKG11dGV4KTsK
LX0KLQotaW50Ci1wdGhyZWFkX211dGV4X2Rlc3Ryb3kgKHB0aHJlYWRfbXV0
ZXhfdCAqIG11dGV4KQotewotICByZXR1cm4gX19wdGhyZWFkX211dGV4X2Rl
c3Ryb3kgKG11dGV4KTsKLX0KLQotaW50Ci1wdGhyZWFkX211dGV4X3NldHBy
aW9jZWlsaW5nIChwdGhyZWFkX211dGV4X3QgKiBtdXRleCwKLQkJCSAgICAg
IGludCBwcmlvY2VpbGluZywgaW50ICpvbGRfY2VpbGluZykKLXsKLSAgcmV0
dXJuIF9fcHRocmVhZF9tdXRleF9zZXRwcmlvY2VpbGluZyAobXV0ZXgsIHBy
aW9jZWlsaW5nLCBvbGRfY2VpbGluZyk7Ci19Ci0KLWludAotcHRocmVhZF9t
dXRleF9nZXRwcmlvY2VpbGluZyAoY29uc3QgcHRocmVhZF9tdXRleF90ICog
bXV0ZXgsIGludCAqcHJpb2NlaWxpbmcpCi17Ci0gIHJldHVybiBfX3B0aHJl
YWRfbXV0ZXhfZ2V0cHJpb2NlaWxpbmcgKG11dGV4LCBwcmlvY2VpbGluZyk7
Ci19Ci0KLQotCi1pbnQKLXB0aHJlYWRfbXV0ZXhhdHRyX2Rlc3Ryb3kgKHB0
aHJlYWRfbXV0ZXhhdHRyX3QgKiBhdHRyKQotewotICByZXR1cm4gX19wdGhy
ZWFkX211dGV4YXR0cl9kZXN0cm95IChhdHRyKTsKLX0KLQotaW50Ci1wdGhy
ZWFkX211dGV4YXR0cl9nZXRwcmlvY2VpbGluZyAoY29uc3QgcHRocmVhZF9t
dXRleGF0dHJfdCAqIGF0dHIsCi0JCQkJICBpbnQgKnByaW9jZWlsaW5nKQot
ewotICByZXR1cm4gX19wdGhyZWFkX211dGV4YXR0cl9nZXRwcmlvY2VpbGlu
ZyAoYXR0ciwgcHJpb2NlaWxpbmcpOwotfQotCi1pbnQKLXB0aHJlYWRfbXV0
ZXhhdHRyX2dldHByb3RvY29sIChjb25zdCBwdGhyZWFkX211dGV4YXR0cl90
ICogYXR0ciwKLQkJCSAgICAgICBpbnQgKnByb3RvY29sKQotewotICByZXR1
cm4gX19wdGhyZWFkX211dGV4YXR0cl9nZXRwcm90b2NvbCAoYXR0ciwgcHJv
dG9jb2wpOwotfQotCi1pbnQKLXB0aHJlYWRfbXV0ZXhhdHRyX2dldHBzaGFy
ZWQgKGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKiBhdHRyLCBpbnQgKnBz
aGFyZWQpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfbXV0ZXhhdHRyX2dldHBz
aGFyZWQgKGF0dHIsIHBzaGFyZWQpOwotfQotCi1pbnQKLXB0aHJlYWRfbXV0
ZXhhdHRyX2dldHR5cGUgKGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKiBh
dHRyLCBpbnQgKnR5cGUpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfbXV0ZXhh
dHRyX2dldHR5cGUgKGF0dHIsIHR5cGUpOwotfQotCi1pbnQKLXB0aHJlYWRf
bXV0ZXhhdHRyX2luaXQgKHB0aHJlYWRfbXV0ZXhhdHRyX3QgKiBhdHRyKQot
ewotICByZXR1cm4gX19wdGhyZWFkX211dGV4YXR0cl9pbml0IChhdHRyKTsK
LX0KLQotaW50Ci1wdGhyZWFkX211dGV4YXR0cl9zZXRwcmlvY2VpbGluZyAo
cHRocmVhZF9tdXRleGF0dHJfdCAqIGF0dHIsIGludCBwcmlvY2VpbGluZykK
LXsKLSAgcmV0dXJuIF9fcHRocmVhZF9tdXRleGF0dHJfc2V0cHJpb2NlaWxp
bmcgKGF0dHIsIHByaW9jZWlsaW5nKTsKLX0KLQotaW50Ci1wdGhyZWFkX211
dGV4YXR0cl9zZXRwcm90b2NvbCAocHRocmVhZF9tdXRleGF0dHJfdCAqIGF0
dHIsIGludCBwcm90b2NvbCkKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9tdXRl
eGF0dHJfc2V0cHJvdG9jb2wgKGF0dHIsIHByb3RvY29sKTsKLX0KLQotaW50
Ci1wdGhyZWFkX211dGV4YXR0cl9zZXRwc2hhcmVkIChwdGhyZWFkX211dGV4
YXR0cl90ICogYXR0ciwgaW50IHBzaGFyZWQpCi17Ci0gIHJldHVybiBfX3B0
aHJlYWRfbXV0ZXhhdHRyX3NldHBzaGFyZWQgKGF0dHIsIHBzaGFyZWQpOwot
fQotCi1pbnQKLXB0aHJlYWRfbXV0ZXhhdHRyX3NldHR5cGUgKHB0aHJlYWRf
bXV0ZXhhdHRyX3QgKiBhdHRyLCBpbnQgdHlwZSkKLXsKLSAgcmV0dXJuIF9f
cHRocmVhZF9tdXRleGF0dHJfc2V0dHlwZSAoYXR0ciwgdHlwZSk7Ci19Ci0K
IC8qIFN5bmNocm9uaXNhdGlvbiAqLwotCi1pbnQKLXB0aHJlYWRfY29uZF9k
ZXN0cm95IChwdGhyZWFkX2NvbmRfdCAqIGNvbmQpCi17Ci0gIHJldHVybiBf
X3B0aHJlYWRfY29uZF9kZXN0cm95IChjb25kKTsKLX0KLQogaW50CiBwdGhy
ZWFkX2NvbmRfaW5pdCAocHRocmVhZF9jb25kX3QgKiBjb25kLCBjb25zdCBw
dGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRyKQogewogICByZXR1cm4gcHRocmVh
ZF9jb25kOjppbml0IChjb25kLCBhdHRyKTsKIH0KIAotaW50Ci1wdGhyZWFk
X2NvbmRfc2lnbmFsIChwdGhyZWFkX2NvbmRfdCAqIGNvbmQpCi17Ci0gIHJl
dHVybiBfX3B0aHJlYWRfY29uZF9zaWduYWwgKGNvbmQpOwotfQotCi1pbnQK
LXB0aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0aHJlYWRfY29uZF90ICogY29u
ZCkKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9jb25kX2Jyb2FkY2FzdCAoY29u
ZCk7Ci19Ci0KLWludAotcHRocmVhZF9jb25kYXR0cl9pbml0IChwdGhyZWFk
X2NvbmRhdHRyX3QgKiBjb25kYXR0cikKLXsKLSAgcmV0dXJuIF9fcHRocmVh
ZF9jb25kYXR0cl9pbml0IChjb25kYXR0cik7Ci19Ci0KLWludAotcHRocmVh
ZF9jb25kYXR0cl9kZXN0cm95IChwdGhyZWFkX2NvbmRhdHRyX3QgKiBjb25k
YXR0cikKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9jb25kYXR0cl9kZXN0cm95
IChjb25kYXR0cik7Ci19Ci0KLWludAotcHRocmVhZF9jb25kYXR0cl9nZXRw
c2hhcmVkIChjb25zdCBwdGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRyLCBpbnQg
KnBzaGFyZWQpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfY29uZGF0dHJfZ2V0
cHNoYXJlZCAoYXR0ciwgcHNoYXJlZCk7Ci19Ci0KLWludAotcHRocmVhZF9j
b25kYXR0cl9zZXRwc2hhcmVkIChwdGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRy
LCBpbnQgcHNoYXJlZCkKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9jb25kYXR0
cl9zZXRwc2hhcmVkIChhdHRyLCBwc2hhcmVkKTsKLX0KLQogLyogUlcgTG9j
a3MgKi8KIGludAotcHRocmVhZF9yd2xvY2tfZGVzdHJveSAocHRocmVhZF9y
d2xvY2tfdCAqcndsb2NrKQotewotICByZXR1cm4gX19wdGhyZWFkX3J3bG9j
a19kZXN0cm95IChyd2xvY2spOwotfQotCi1pbnQKIHB0aHJlYWRfcndsb2Nr
X2luaXQgKHB0aHJlYWRfcndsb2NrX3QgKnJ3bG9jaywgY29uc3QgcHRocmVh
ZF9yd2xvY2thdHRyX3QgKmF0dHIpCiB7CiAgIHJldHVybiBwdGhyZWFkX3J3
bG9jazo6aW5pdCAocndsb2NrLCBhdHRyKTsKIH0KIAotaW50Ci1wdGhyZWFk
X3J3bG9ja19yZGxvY2sgKHB0aHJlYWRfcndsb2NrX3QgKnJ3bG9jaykKLXsK
LSAgcmV0dXJuIF9fcHRocmVhZF9yd2xvY2tfcmRsb2NrIChyd2xvY2spOwot
fQotCi1pbnQKLXB0aHJlYWRfcndsb2NrX3RyeXJkbG9jayAocHRocmVhZF9y
d2xvY2tfdCAqcndsb2NrKQotewotICByZXR1cm4gX19wdGhyZWFkX3J3bG9j
a190cnlyZGxvY2sgKHJ3bG9jayk7Ci19Ci0KLWludAotcHRocmVhZF9yd2xv
Y2tfd3Jsb2NrIChwdGhyZWFkX3J3bG9ja190ICpyd2xvY2spCi17Ci0gIHJl
dHVybiBfX3B0aHJlYWRfcndsb2NrX3dybG9jayAocndsb2NrKTsKLX0KLQot
aW50Ci1wdGhyZWFkX3J3bG9ja190cnl3cmxvY2sgKHB0aHJlYWRfcndsb2Nr
X3QgKnJ3bG9jaykKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9yd2xvY2tfdHJ5
d3Jsb2NrIChyd2xvY2spOwotfQotCi1pbnQKLXB0aHJlYWRfcndsb2NrX3Vu
bG9jayAocHRocmVhZF9yd2xvY2tfdCAqcndsb2NrKQotewotICByZXR1cm4g
X19wdGhyZWFkX3J3bG9ja191bmxvY2sgKHJ3bG9jayk7Ci19Ci0KLWludAot
cHRocmVhZF9yd2xvY2thdHRyX2luaXQgKHB0aHJlYWRfcndsb2NrYXR0cl90
ICpyd2xvY2thdHRyKQotewotICByZXR1cm4gX19wdGhyZWFkX3J3bG9ja2F0
dHJfaW5pdCAocndsb2NrYXR0cik7Ci19Ci0KLWludAotcHRocmVhZF9yd2xv
Y2thdHRyX2dldHBzaGFyZWQgKGNvbnN0IHB0aHJlYWRfcndsb2NrYXR0cl90
ICphdHRyLAotICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCAq
cHNoYXJlZCkKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9yd2xvY2thdHRyX2dl
dHBzaGFyZWQgKGF0dHIsIHBzaGFyZWQpOwotfQotCi1pbnQKLXB0aHJlYWRf
cndsb2NrYXR0cl9zZXRwc2hhcmVkIChwdGhyZWFkX3J3bG9ja2F0dHJfdCAq
YXR0ciwgaW50IHBzaGFyZWQpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfcnds
b2NrYXR0cl9zZXRwc2hhcmVkIChhdHRyLCBwc2hhcmVkKTsKLX0KLQotaW50
Ci1wdGhyZWFkX3J3bG9ja2F0dHJfZGVzdHJveSAocHRocmVhZF9yd2xvY2th
dHRyX3QgKnJ3bG9ja2F0dHIpCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfcnds
b2NrYXR0cl9kZXN0cm95IChyd2xvY2thdHRyKTsKLX0KLQotLyogU2NoZWR1
bGluZyAqLwotCi1pbnQKLXB0aHJlYWRfZ2V0Y29uY3VycmVuY3kgKHZvaWQp
Ci17Ci0gIHJldHVybiBfX3B0aHJlYWRfZ2V0Y29uY3VycmVuY3kgKCk7Ci19
Ci0KLWludAotcHRocmVhZF9zZXRjb25jdXJyZW5jeSAoaW50IG5ld19sZXZl
bCkKLXsKLSAgcmV0dXJuIF9fcHRocmVhZF9zZXRjb25jdXJyZW5jeSAobmV3
X2xldmVsKTsKLX0KLQotCi0KLQotaW50Ci1wdGhyZWFkX2dldHNjaGVkcGFy
YW0gKHB0aHJlYWRfdCB0aHJlYWQsIGludCAqcG9saWN5LAotCQkgICAgICAg
c3RydWN0IHNjaGVkX3BhcmFtICpwYXJhbSkKLXsKLSAgcmV0dXJuIF9fcHRo
cmVhZF9nZXRzY2hlZHBhcmFtICh0aHJlYWQsIHBvbGljeSwgcGFyYW0pOwot
fQotCi1pbnQKLXB0aHJlYWRfc2V0c2NoZWRwYXJhbSAocHRocmVhZF90IHRo
cmVhZCwgaW50IHBvbGljeSwKLQkJICAgICAgIGNvbnN0IHN0cnVjdCBzY2hl
ZF9wYXJhbSAqcGFyYW0pCi17Ci0gIHJldHVybiBfX3B0aHJlYWRfc2V0c2No
ZWRwYXJhbSAodGhyZWFkLCBwb2xpY3ksIHBhcmFtKTsKLX0KLQotCiAvKiBD
YW5jZWxhYmlsaXR5ICovCiAKIGludApkaWZmIC11cnAgc3JjLm9sZC93aW5z
dXAvY3lnd2luL3RocmVhZC5jYyBzcmMvd2luc3VwL2N5Z3dpbi90aHJlYWQu
Y2MKLS0tIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi90aHJlYWQuY2MJMjAwMy0w
Mi0yOCAxMDo1NDoxNy4wMDAwMDAwMDAgKzAxMDAKKysrIHNyYy93aW5zdXAv
Y3lnd2luL3RocmVhZC5jYwkyMDAzLTAyLTI4IDEyOjU1OjQyLjAwMDAwMDAw
MCArMDEwMApAQCAtMzczLDcgKzM3Myw3IEBAIHB0aHJlYWQ6OmV4aXQgKHZv
aWQgKnZhbHVlX3B0cikKIAogICBtdXRleC5Mb2NrICgpOwogICAvLyBjbGVh
bnVwIGlmIHRocmVhZCBpcyBpbiBkZXRhY2hlZCBzdGF0ZSBhbmQgbm90IGpv
aW5lZAotICBpZiAoX19wdGhyZWFkX2VxdWFsICgmam9pbmVyLCAmdGhyZWFk
KSkKKyAgaWYgKHB0aHJlYWRfZXF1YWwgKGpvaW5lciwgdGhyZWFkKSkKICAg
ICBkZWxldGUgdGhpczsKICAgZWxzZQogICAgIHsKQEAgLTQwNCw3ICs0MDQs
NyBAQCBwdGhyZWFkOjpjYW5jZWwgKHZvaWQpCiAgICAgICByZXR1cm4gMDsK
ICAgICB9CiAKLSAgZWxzZSBpZiAoX19wdGhyZWFkX2VxdWFsICgmdGhyZWFk
LCAmc2VsZikpCisgIGVsc2UgaWYgKHB0aHJlYWRfZXF1YWwgKHRocmVhZCwg
c2VsZikpCiAgICAgewogICAgICAgbXV0ZXguVW5Mb2NrICgpOwogICAgICAg
Y2FuY2VsX3NlbGYgKCk7CkBAIC0xNDk1LDcgKzE0OTUsNyBAQCBwdGhyZWFk
X211dGV4OjpjYW5CZVVubG9ja2VkIChwdGhyZWFkX211CiAgIC8qCiAgICAq
IENoZWNrIGlmIHRoZSBtdXRleCBpcyBvd25lZCBieSB0aGUgY3VycmVudCB0
aHJlYWQgYW5kIGNhbiBiZSB1bmxvY2tlZAogICAgKi8KLSAgcmV0dXJuIChf
X3B0aHJlYWRfZXF1YWwgKCYoKm11dGV4KS0+b3duZXIsICZzZWxmKSkgJiYg
MSA9PSAoKm11dGV4KS0+cmVjdXJzaW9uX2NvdW50ZXI7CisgIHJldHVybiAo
cHRocmVhZF9lcXVhbCAoKCptdXRleCktPm93bmVyLCBzZWxmKSkgJiYgMSA9
PSAoKm11dGV4KS0+cmVjdXJzaW9uX2NvdW50ZXI7CiB9CiAKIExpc3Q8cHRo
cmVhZF9tdXRleD4gcHRocmVhZF9tdXRleDo6bXV0ZXhlczsKQEAgLTE1NTcs
NyArMTU1Nyw3IEBAIHB0aHJlYWRfbXV0ZXg6Ol9Mb2NrIChwdGhyZWFkX3Qg
c2VsZikKIAogICBpZiAoMSA9PSBJbnRlcmxvY2tlZEluY3JlbWVudCAoKGxv
bmcgKikmbG9ja19jb3VudGVyKSkKICAgICBTZXRPd25lciAoc2VsZik7Ci0g
IGVsc2UgaWYgKFBUSFJFQURfTVVURVhfTk9STUFMICE9IHR5cGUgJiYgX19w
dGhyZWFkX2VxdWFsICgmb3duZXIsICZzZWxmKSkKKyAgZWxzZSBpZiAoUFRI
UkVBRF9NVVRFWF9OT1JNQUwgIT0gdHlwZSAmJiBwdGhyZWFkX2VxdWFsIChv
d25lciwgc2VsZikpCiAgICAgewogICAgICAgSW50ZXJsb2NrZWREZWNyZW1l
bnQgKChsb25nICopICZsb2NrX2NvdW50ZXIpOwogICAgICAgaWYgKFBUSFJF
QURfTVVURVhfUkVDVVJTSVZFID09IHR5cGUpCkBAIC0xNTgxLDcgKzE1ODEs
NyBAQCBwdGhyZWFkX211dGV4OjpfVHJ5TG9jayAocHRocmVhZF90IHNlbGYp
CiAKICAgaWYgKDAgPT0gSW50ZXJsb2NrZWRDb21wYXJlRXhjaGFuZ2UgKChs
b25nICopJmxvY2tfY291bnRlciwgMSwgMCApKQogICAgIFNldE93bmVyIChz
ZWxmKTsKLSAgZWxzZSBpZiAoUFRIUkVBRF9NVVRFWF9SRUNVUlNJVkUgPT0g
dHlwZSAmJiBfX3B0aHJlYWRfZXF1YWwgKCZvd25lciwgJnNlbGYpKQorICBl
bHNlIGlmIChQVEhSRUFEX01VVEVYX1JFQ1VSU0lWRSA9PSB0eXBlICYmIHB0
aHJlYWRfZXF1YWwgKG93bmVyLCBzZWxmKSkKICAgICByZXN1bHQgPSBMb2Nr
UmVjdXJzaXZlICgpOwogICBlbHNlCiAgICAgcmVzdWx0ID0gRUJVU1k7CkBA
IC0xNTkyLDcgKzE1OTIsNyBAQCBwdGhyZWFkX211dGV4OjpfVHJ5TG9jayAo
cHRocmVhZF90IHNlbGYpCiBpbnQKIHB0aHJlYWRfbXV0ZXg6Ol9VbkxvY2sg
KHB0aHJlYWRfdCBzZWxmKQogewotICBpZiAoIV9fcHRocmVhZF9lcXVhbCAo
Jm93bmVyLCAmc2VsZikpCisgIGlmICghcHRocmVhZF9lcXVhbCAob3duZXIs
IHNlbGYpKQogICAgIHJldHVybiBFUEVSTTsKIAogICBpZiAoMCA9PSAtLXJl
Y3Vyc2lvbl9jb3VudGVyKQpAQCAtMjAyNyw4ICsyMDI3LDggQEAgcHRocmVh
ZDo6YXRmb3JrICh2b2lkICgqcHJlcGFyZSkodm9pZCksIAogICByZXR1cm4g
MDsKIH0KIAotaW50Ci1fX3B0aHJlYWRfYXR0cl9pbml0IChwdGhyZWFkX2F0
dHJfdCAqYXR0cikKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX2F0dHJfaW5p
dCAocHRocmVhZF9hdHRyX3QgKmF0dHIpCiB7CiAgIGlmIChjaGVja192YWxp
ZF9wb2ludGVyIChhdHRyKSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjA0
Miw4ICsyMDQyLDggQEAgX19wdGhyZWFkX2F0dHJfaW5pdCAocHRocmVhZF9h
dHRyX3QgKmF0dAogICByZXR1cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRf
YXR0cl9nZXRpbmhlcml0c2NoZWQgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICph
dHRyLAorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfYXR0cl9nZXRpbmhlcml0
c2NoZWQgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICphdHRyLAogCQkJCWludCAq
aW5oZXJpdHNjaGVkKQogewogICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNHb29k
T2JqZWN0IChhdHRyKSkKQEAgLTIwNTIsOCArMjA1Miw4IEBAIF9fcHRocmVh
ZF9hdHRyX2dldGluaGVyaXRzY2hlZCAoY29uc3QgcHQKICAgcmV0dXJuIDA7
CiB9CiAKLWludAotX19wdGhyZWFkX2F0dHJfZ2V0c2NoZWRwYXJhbSAoY29u
c3QgcHRocmVhZF9hdHRyX3QgKmF0dHIsCitleHRlcm4gIkMiIGludAorcHRo
cmVhZF9hdHRyX2dldHNjaGVkcGFyYW0gKGNvbnN0IHB0aHJlYWRfYXR0cl90
ICphdHRyLAogCQkJICAgICAgc3RydWN0IHNjaGVkX3BhcmFtICpwYXJhbSkK
IHsKICAgaWYgKCFwdGhyZWFkX2F0dHI6OmlzR29vZE9iamVjdCAoYXR0cikp
CkBAIC0yMDY1LDggKzIwNjUsOCBAQCBfX3B0aHJlYWRfYXR0cl9nZXRzY2hl
ZHBhcmFtIChjb25zdCBwdGhyCiAvKiBGcm9tIGEgcHVyZSBjb2RlIHBvaW50
IG9mIHZpZXcsIHRoaXMgc2hvdWxkIGNhbGwgYSBoZWxwZXIgaW4gc2NoZWQu
Y2MsCiAgICB0byBhbGxvdyBmb3Igc29tZW9uZSBhZGRpbmcgc2NoZWR1bGVy
IHBvbGljeSBjaGFuZ2VzIHRvIHdpbjMyIGluIHRoZSBmdXR1cmUuCiAgICBI
b3dldmVyIHRoYXQncyBleHRyZW1lbHkgdW5saWtlbHksIHNvIHNob3J0IGFu
ZCBzd2VldCB3aWxsIGRvIHVzICovCi1pbnQKLV9fcHRocmVhZF9hdHRyX2dl
dHNjaGVkcG9saWN5IChjb25zdCBwdGhyZWFkX2F0dHJfdCAqYXR0ciwgaW50
ICpwb2xpY3kpCitleHRlcm4gIkMiIGludAorcHRocmVhZF9hdHRyX2dldHNj
aGVkcG9saWN5IChjb25zdCBwdGhyZWFkX2F0dHJfdCAqYXR0ciwgaW50ICpw
b2xpY3kpCiB7CiAgIGlmICghcHRocmVhZF9hdHRyOjppc0dvb2RPYmplY3Qg
KGF0dHIpKQogICAgIHJldHVybiBFSU5WQUw7CkBAIC0yMDc1LDggKzIwNzUs
OCBAQCBfX3B0aHJlYWRfYXR0cl9nZXRzY2hlZHBvbGljeSAoY29uc3QgcHRo
CiB9CiAKIAotaW50Ci1fX3B0aHJlYWRfYXR0cl9nZXRzY29wZSAoY29uc3Qg
cHRocmVhZF9hdHRyX3QgKmF0dHIsIGludCAqY29udGVudGlvbnNjb3BlKQor
ZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfYXR0cl9nZXRzY29wZSAoY29uc3Qg
cHRocmVhZF9hdHRyX3QgKmF0dHIsIGludCAqY29udGVudGlvbnNjb3BlKQog
ewogICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNHb29kT2JqZWN0IChhdHRyKSkK
ICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjA4NCw4ICsyMDg0LDggQEAgX19w
dGhyZWFkX2F0dHJfZ2V0c2NvcGUgKGNvbnN0IHB0aHJlYWRfYQogICByZXR1
cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRfYXR0cl9zZXRkZXRhY2hzdGF0
ZSAocHRocmVhZF9hdHRyX3QgKmF0dHIsIGludCBkZXRhY2hzdGF0ZSkKK2V4
dGVybiAiQyIgaW50CitwdGhyZWFkX2F0dHJfc2V0ZGV0YWNoc3RhdGUgKHB0
aHJlYWRfYXR0cl90ICphdHRyLCBpbnQgZGV0YWNoc3RhdGUpCiB7CiAgIGlm
ICghcHRocmVhZF9hdHRyOjppc0dvb2RPYmplY3QgKGF0dHIpKQogICAgIHJl
dHVybiBFSU5WQUw7CkBAIC0yMDk1LDggKzIwOTUsOCBAQCBfX3B0aHJlYWRf
YXR0cl9zZXRkZXRhY2hzdGF0ZSAocHRocmVhZF9hCiAgIHJldHVybiAwOwog
fQogCi1pbnQKLV9fcHRocmVhZF9hdHRyX2dldGRldGFjaHN0YXRlIChjb25z
dCBwdGhyZWFkX2F0dHJfdCAqYXR0ciwgaW50ICpkZXRhY2hzdGF0ZSkKK2V4
dGVybiAiQyIgaW50CitwdGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUgKGNv
bnN0IHB0aHJlYWRfYXR0cl90ICphdHRyLCBpbnQgKmRldGFjaHN0YXRlKQog
ewogICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNHb29kT2JqZWN0IChhdHRyKSkK
ICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjEwNCw4ICsyMTA0LDggQEAgX19w
dGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUgKGNvbnN0IHB0aAogICByZXR1
cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRfYXR0cl9zZXRpbmhlcml0c2No
ZWQgKHB0aHJlYWRfYXR0cl90ICphdHRyLCBpbnQgaW5oZXJpdHNjaGVkKQor
ZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfYXR0cl9zZXRpbmhlcml0c2NoZWQg
KHB0aHJlYWRfYXR0cl90ICphdHRyLCBpbnQgaW5oZXJpdHNjaGVkKQogewog
ICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNHb29kT2JqZWN0IChhdHRyKSkKICAg
ICByZXR1cm4gRUlOVkFMOwpAQCAtMjExNiw4ICsyMTE2LDggQEAgX19wdGhy
ZWFkX2F0dHJfc2V0aW5oZXJpdHNjaGVkIChwdGhyZWFkXwogICByZXR1cm4g
MDsKIH0KIAotaW50Ci1fX3B0aHJlYWRfYXR0cl9zZXRzY2hlZHBhcmFtIChw
dGhyZWFkX2F0dHJfdCAqYXR0ciwKK2V4dGVybiAiQyIgaW50CitwdGhyZWFk
X2F0dHJfc2V0c2NoZWRwYXJhbSAocHRocmVhZF9hdHRyX3QgKmF0dHIsCiAJ
CQkgICAgICBjb25zdCBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKnBhcmFtKQogewog
ICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNHb29kT2JqZWN0IChhdHRyKSkKQEAg
LTIxMjksOCArMjEyOSw4IEBAIF9fcHRocmVhZF9hdHRyX3NldHNjaGVkcGFy
YW0gKHB0aHJlYWRfYXQKIH0KIAogLyogU2VlIF9fcHRocmVhZF9hdHRyX2dl
dHNjaGVkcG9saWN5IGZvciBzb21lIG5vdGVzICovCi1pbnQKLV9fcHRocmVh
ZF9hdHRyX3NldHNjaGVkcG9saWN5IChwdGhyZWFkX2F0dHJfdCAqYXR0ciwg
aW50IHBvbGljeSkKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX2F0dHJfc2V0
c2NoZWRwb2xpY3kgKHB0aHJlYWRfYXR0cl90ICphdHRyLCBpbnQgcG9saWN5
KQogewogICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNHb29kT2JqZWN0IChhdHRy
KSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjEzOSw4ICsyMTM5LDggQEAg
X19wdGhyZWFkX2F0dHJfc2V0c2NoZWRwb2xpY3kgKHB0aHJlYWRfYQogICBy
ZXR1cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRfYXR0cl9zZXRzY29wZSAo
cHRocmVhZF9hdHRyX3QgKmF0dHIsIGludCBjb250ZW50aW9uc2NvcGUpCitl
eHRlcm4gIkMiIGludAorcHRocmVhZF9hdHRyX3NldHNjb3BlIChwdGhyZWFk
X2F0dHJfdCAqYXR0ciwgaW50IGNvbnRlbnRpb25zY29wZSkKIHsKICAgaWYg
KCFwdGhyZWFkX2F0dHI6OmlzR29vZE9iamVjdCAoYXR0cikpCiAgICAgcmV0
dXJuIEVJTlZBTDsKQEAgLTIxNTUsOCArMjE1NSw4IEBAIF9fcHRocmVhZF9h
dHRyX3NldHNjb3BlIChwdGhyZWFkX2F0dHJfdCAKICAgcmV0dXJuIDA7CiB9
CiAKLWludAotX19wdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChwdGhyZWFk
X2F0dHJfdCAqYXR0ciwgc2l6ZV90IHNpemUpCitleHRlcm4gIkMiIGludAor
cHRocmVhZF9hdHRyX3NldHN0YWNrc2l6ZSAocHRocmVhZF9hdHRyX3QgKmF0
dHIsIHNpemVfdCBzaXplKQogewogICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNH
b29kT2JqZWN0IChhdHRyKSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjE2
NCw4ICsyMTY0LDggQEAgX19wdGhyZWFkX2F0dHJfc2V0c3RhY2tzaXplIChw
dGhyZWFkX2F0dAogICByZXR1cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRf
YXR0cl9nZXRzdGFja3NpemUgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICphdHRy
LCBzaXplX3QgKnNpemUpCitleHRlcm4gIkMiIGludAorcHRocmVhZF9hdHRy
X2dldHN0YWNrc2l6ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKmF0dHIsIHNp
emVfdCAqc2l6ZSkKIHsKICAgaWYgKCFwdGhyZWFkX2F0dHI6OmlzR29vZE9i
amVjdCAoYXR0cikpCiAgICAgcmV0dXJuIEVJTlZBTDsKQEAgLTIxNzMsOCAr
MjE3Myw4IEBAIF9fcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6ZSAoY29uc3Qg
cHRocmUKICAgcmV0dXJuIDA7CiB9CiAKLWludAotX19wdGhyZWFkX2F0dHJf
ZGVzdHJveSAocHRocmVhZF9hdHRyX3QgKmF0dHIpCitleHRlcm4gIkMiIGlu
dAorcHRocmVhZF9hdHRyX2Rlc3Ryb3kgKHB0aHJlYWRfYXR0cl90ICphdHRy
KQogewogICBpZiAoIXB0aHJlYWRfYXR0cjo6aXNHb29kT2JqZWN0IChhdHRy
KSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjIwMCw3ICsyMjAwLDcgQEAg
cHRocmVhZDo6am9pbiAocHRocmVhZF90ICp0aHJlYWQsIHZvaWQgKgogICBp
ZiAoIWlzR29vZE9iamVjdCAodGhyZWFkKSkKICAgICByZXR1cm4gRVNSQ0g7
CiAKLSAgaWYgKF9fcHRocmVhZF9lcXVhbCAodGhyZWFkLCZqb2luZXIpKQor
ICBpZiAocHRocmVhZF9lcXVhbCAoKnRocmVhZCxqb2luZXIpKQogICAgIHJl
dHVybiBFREVBRExLOwogCiAgICgqdGhyZWFkKS0+bXV0ZXguTG9jayAoKTsK
QEAgLTIzMDIsMTUgKzIzMDIsMTUgQEAgcHRocmVhZDo6cmVzdW1lIChwdGhy
ZWFkX3QgKnRocmVhZCkKIC8qIHByb3ZpZGVkIGZvciBzb3VyY2UgbGV2ZWwg
Y29tcGF0YWJpbGl0eS4KICAgIFNlZSBodHRwOi8vd3d3Lm9wZW5ncm91cC5v
cmcvb25saW5lcHVicy8wMDc5MDg3OTkveHNoL3B0aHJlYWRfZ2V0Y29uY3Vy
cmVuY3kuaHRtbAogKi8KLWludAotX19wdGhyZWFkX2dldGNvbmN1cnJlbmN5
ICh2b2lkKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfZ2V0Y29uY3VycmVu
Y3kgKHZvaWQpCiB7CiAgIHJldHVybiBNVF9JTlRFUkZBQ0UtPmNvbmN1cnJl
bmN5OwogfQogCiAvKiBrZWVwIHRoaXMgaW4gc3luYyB3aXRoIHNjaGVkLmNj
ICovCi1pbnQKLV9fcHRocmVhZF9nZXRzY2hlZHBhcmFtIChwdGhyZWFkX3Qg
dGhyZWFkLCBpbnQgKnBvbGljeSwKK2V4dGVybiAiQyIgaW50CitwdGhyZWFk
X2dldHNjaGVkcGFyYW0gKHB0aHJlYWRfdCB0aHJlYWQsIGludCAqcG9saWN5
LAogCQkJIHN0cnVjdCBzY2hlZF9wYXJhbSAqcGFyYW0pCiB7CiAgIGlmICgh
cHRocmVhZDo6aXNHb29kT2JqZWN0ICgmdGhyZWFkKSkKQEAgLTIzMjMsOCAr
MjMyMyw4IEBAIF9fcHRocmVhZF9nZXRzY2hlZHBhcmFtIChwdGhyZWFkX3Qg
dGhyZWEKIH0KIAogLyogVGhyZWFkIFNwZWNpZmljRGF0YSAqLwotaW50Ci1f
X3B0aHJlYWRfa2V5X2NyZWF0ZSAocHRocmVhZF9rZXlfdCAqa2V5LCB2b2lk
ICgqZGVzdHJ1Y3RvcikgKHZvaWQgKikpCitleHRlcm4gIkMiIGludAorcHRo
cmVhZF9rZXlfY3JlYXRlIChwdGhyZWFkX2tleV90ICprZXksIHZvaWQgKCpk
ZXN0cnVjdG9yKSAodm9pZCAqKSkKIHsKICAgLyogVGhlIG9wZW5ncm91cCBk
b2NzIGRvbid0IGRlZmluZSBpZiB3ZSBzaG91bGQgY2hlY2sgdGhpcyBvciBu
b3QsCiAgICAgIGJ1dCBjcmVhdGlvbiBpcyByZWxhdGl2ZWx5IHJhcmUuICAq
LwpAQCAtMjM0Miw4ICsyMzQyLDggQEAgX19wdGhyZWFkX2tleV9jcmVhdGUg
KHB0aHJlYWRfa2V5X3QgKmtleQogICByZXR1cm4gMDsKIH0KIAotaW50Ci1f
X3B0aHJlYWRfa2V5X2RlbGV0ZSAocHRocmVhZF9rZXlfdCBrZXkpCitleHRl
cm4gIkMiIGludAorcHRocmVhZF9rZXlfZGVsZXRlIChwdGhyZWFkX2tleV90
IGtleSkKIHsKICAgaWYgKCFwdGhyZWFkX2tleTo6aXNHb29kT2JqZWN0ICgm
a2V5KSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjM1NSw4ICsyMzU1LDgg
QEAgX19wdGhyZWFkX2tleV9kZWxldGUgKHB0aHJlYWRfa2V5X3Qga2V5KQog
LyogcHJvdmlkZWQgZm9yIHNvdXJjZSBsZXZlbCBjb21wYXRhYmlsaXR5LiAg
U2VlCiBodHRwOi8vd3d3Lm9wZW5ncm91cC5vcmcvb25saW5lcHVicy8wMDc5
MDg3OTkveHNoL3B0aHJlYWRfZ2V0Y29uY3VycmVuY3kuaHRtbAogKi8KLWlu
dAotX19wdGhyZWFkX3NldGNvbmN1cnJlbmN5IChpbnQgbmV3X2xldmVsKQor
ZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfc2V0Y29uY3VycmVuY3kgKGludCBu
ZXdfbGV2ZWwpCiB7CiAgIGlmIChuZXdfbGV2ZWwgPCAwKQogICAgIHJldHVy
biBFSU5WQUw7CkBAIC0yMzY1LDggKzIzNjUsOCBAQCBfX3B0aHJlYWRfc2V0
Y29uY3VycmVuY3kgKGludCBuZXdfbGV2ZWwpCiB9CiAKIC8qIGtlZXAgc3lu
Y3JvbmlzZWQgd2l0aCBzY2hlZC5jYyAqLwotaW50Ci1fX3B0aHJlYWRfc2V0
c2NoZWRwYXJhbSAocHRocmVhZF90IHRocmVhZCwgaW50IHBvbGljeSwKK2V4
dGVybiAiQyIgaW50CitwdGhyZWFkX3NldHNjaGVkcGFyYW0gKHB0aHJlYWRf
dCB0aHJlYWQsIGludCBwb2xpY3ksCiAJCQkgY29uc3Qgc3RydWN0IHNjaGVk
X3BhcmFtICpwYXJhbSkKIHsKICAgaWYgKCFwdGhyZWFkOjppc0dvb2RPYmpl
Y3QgKCZ0aHJlYWQpKQpAQCAtMjM4Myw4ICsyMzgzLDggQEAgX19wdGhyZWFk
X3NldHNjaGVkcGFyYW0gKHB0aHJlYWRfdCB0aHJlYQogfQogCiAKLWludAot
X19wdGhyZWFkX3NldHNwZWNpZmljIChwdGhyZWFkX2tleV90IGtleSwgY29u
c3Qgdm9pZCAqdmFsdWUpCitleHRlcm4gIkMiIGludAorcHRocmVhZF9zZXRz
cGVjaWZpYyAocHRocmVhZF9rZXlfdCBrZXksIGNvbnN0IHZvaWQgKnZhbHVl
KQogewogICBpZiAoIXB0aHJlYWRfa2V5Ojppc0dvb2RPYmplY3QgKCZrZXkp
KQogICAgIHJldHVybiBFSU5WQUw7CkBAIC0yMzkyLDggKzIzOTIsOCBAQCBf
X3B0aHJlYWRfc2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5CiAgIHJl
dHVybiAwOwogfQogCi12b2lkICoKLV9fcHRocmVhZF9nZXRzcGVjaWZpYyAo
cHRocmVhZF9rZXlfdCBrZXkpCitleHRlcm4gIkMiIHZvaWQgKgorcHRocmVh
ZF9nZXRzcGVjaWZpYyAocHRocmVhZF9rZXlfdCBrZXkpCiB7CiAgIGlmICgh
cHRocmVhZF9rZXk6OmlzR29vZE9iamVjdCAoJmtleSkpCiAgICAgcmV0dXJu
IE5VTEw7CkBAIC0yNDM2LDggKzI0MzYsOCBAQCBwdGhyZWFkX2NvbmQ6Omlz
R29vZEluaXRpYWxpemVyT3JCYWRPYmplCiAgIHJldHVybiB0cnVlOwogfQog
Ci1pbnQKLV9fcHRocmVhZF9jb25kX2Rlc3Ryb3kgKHB0aHJlYWRfY29uZF90
ICpjb25kKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfY29uZF9kZXN0cm95
IChwdGhyZWFkX2NvbmRfdCAqY29uZCkKIHsKICAgaWYgKHB0aHJlYWRfY29u
ZDo6aXNHb29kSW5pdGlhbGl6ZXIgKGNvbmQpKQogICAgIHJldHVybiAwOwpA
QCAtMjQ4MCw4ICsyNDgwLDggQEAgcHRocmVhZF9jb25kOjppbml0IChwdGhy
ZWFkX2NvbmRfdCAqY29uZAogICByZXR1cm4gMDsKIH0KIAotaW50Ci1fX3B0
aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0aHJlYWRfY29uZF90ICpjb25kKQor
ZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0aHJl
YWRfY29uZF90ICpjb25kKQogewogICBpZiAocHRocmVhZF9jb25kOjppc0dv
b2RJbml0aWFsaXplciAoY29uZCkpCiAgICAgcmV0dXJuIDA7CkBAIC0yNDkz
LDggKzI0OTMsOCBAQCBfX3B0aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0aHJl
YWRfY29uZF90CiAgIHJldHVybiAwOwogfQogCi1pbnQKLV9fcHRocmVhZF9j
b25kX3NpZ25hbCAocHRocmVhZF9jb25kX3QgKmNvbmQpCitleHRlcm4gIkMi
IGludAorcHRocmVhZF9jb25kX3NpZ25hbCAocHRocmVhZF9jb25kX3QgKmNv
bmQpCiB7CiAgIGlmIChwdGhyZWFkX2NvbmQ6OmlzR29vZEluaXRpYWxpemVy
IChjb25kKSkKICAgICByZXR1cm4gMDsKQEAgLTI1NTEsOCArMjU1MSw4IEBA
IHB0aHJlYWRfY29uZF93YWl0IChwdGhyZWFkX2NvbmRfdCAqY29uZCwKICAg
cmV0dXJuIF9fcHRocmVhZF9jb25kX2Rvd2FpdCAoY29uZCwgbXV0ZXgsIElO
RklOSVRFKTsKIH0KIAotaW50Ci1fX3B0aHJlYWRfY29uZGF0dHJfaW5pdCAo
cHRocmVhZF9jb25kYXR0cl90ICpjb25kYXR0cikKK2V4dGVybiAiQyIgaW50
CitwdGhyZWFkX2NvbmRhdHRyX2luaXQgKHB0aHJlYWRfY29uZGF0dHJfdCAq
Y29uZGF0dHIpCiB7CiAgIGlmIChjaGVja192YWxpZF9wb2ludGVyIChjb25k
YXR0cikpCiAgICAgcmV0dXJuIEVJTlZBTDsKQEAgLTI1NjYsOCArMjU2Niw4
IEBAIF9fcHRocmVhZF9jb25kYXR0cl9pbml0IChwdGhyZWFkX2NvbmRhdHQK
ICAgcmV0dXJuIDA7CiB9CiAKLWludAotX19wdGhyZWFkX2NvbmRhdHRyX2dl
dHBzaGFyZWQgKGNvbnN0IHB0aHJlYWRfY29uZGF0dHJfdCAqYXR0ciwgaW50
ICpwc2hhcmVkKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfY29uZGF0dHJf
Z2V0cHNoYXJlZCAoY29uc3QgcHRocmVhZF9jb25kYXR0cl90ICphdHRyLCBp
bnQgKnBzaGFyZWQpCiB7CiAgIGlmICghcHRocmVhZF9jb25kYXR0cjo6aXNH
b29kT2JqZWN0IChhdHRyKSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjU3
NSw4ICsyNTc1LDggQEAgX19wdGhyZWFkX2NvbmRhdHRyX2dldHBzaGFyZWQg
KGNvbnN0IHB0aAogICByZXR1cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRf
Y29uZGF0dHJfc2V0cHNoYXJlZCAocHRocmVhZF9jb25kYXR0cl90ICphdHRy
LCBpbnQgcHNoYXJlZCkKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX2NvbmRh
dHRyX3NldHBzaGFyZWQgKHB0aHJlYWRfY29uZGF0dHJfdCAqYXR0ciwgaW50
IHBzaGFyZWQpCiB7CiAgIGlmICghcHRocmVhZF9jb25kYXR0cjo6aXNHb29k
T2JqZWN0IChhdHRyKSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMjU4OSw4
ICsyNTg5LDggQEAgX19wdGhyZWFkX2NvbmRhdHRyX3NldHBzaGFyZWQgKHB0
aHJlYWRfYwogICByZXR1cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRfY29u
ZGF0dHJfZGVzdHJveSAocHRocmVhZF9jb25kYXR0cl90ICpjb25kYXR0cikK
K2V4dGVybiAiQyIgaW50CitwdGhyZWFkX2NvbmRhdHRyX2Rlc3Ryb3kgKHB0
aHJlYWRfY29uZGF0dHJfdCAqY29uZGF0dHIpCiB7CiAgIGlmICghcHRocmVh
ZF9jb25kYXR0cjo6aXNHb29kT2JqZWN0IChjb25kYXR0cikpCiAgICAgcmV0
dXJuIEVJTlZBTDsKQEAgLTI2MzMsOCArMjYzMyw4IEBAIHB0aHJlYWRfcnds
b2NrOjppc0dvb2RJbml0aWFsaXplck9yQmFkT2IKICAgcmV0dXJuIHRydWU7
CiB9CiAKLWludAotX19wdGhyZWFkX3J3bG9ja19kZXN0cm95IChwdGhyZWFk
X3J3bG9ja190ICpyd2xvY2spCitleHRlcm4gIkMiIGludAorcHRocmVhZF9y
d2xvY2tfZGVzdHJveSAocHRocmVhZF9yd2xvY2tfdCAqcndsb2NrKQogewog
ICBpZiAocHRocmVhZF9yd2xvY2s6OmlzR29vZEluaXRpYWxpemVyIChyd2xv
Y2spKQogICAgIHJldHVybiAwOwpAQCAtMjY3Nyw4ICsyNjc3LDggQEAgcHRo
cmVhZF9yd2xvY2s6OmluaXQgKHB0aHJlYWRfcndsb2NrX3QgKgogICByZXR1
cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJlYWRfcndsb2NrX3JkbG9jayAocHRo
cmVhZF9yd2xvY2tfdCAqcndsb2NrKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJl
YWRfcndsb2NrX3JkbG9jayAocHRocmVhZF9yd2xvY2tfdCAqcndsb2NrKQog
ewogICBwdGhyZWFkX3Rlc3RjYW5jZWwgKCk7CiAKQEAgLTI2OTAsOCArMjY5
MCw4IEBAIF9fcHRocmVhZF9yd2xvY2tfcmRsb2NrIChwdGhyZWFkX3J3bG9j
a18KICAgcmV0dXJuICgqcndsb2NrKS0+UmRMb2NrICgpOwogfQogCi1pbnQK
LV9fcHRocmVhZF9yd2xvY2tfdHJ5cmRsb2NrIChwdGhyZWFkX3J3bG9ja190
ICpyd2xvY2spCitleHRlcm4gIkMiIGludAorcHRocmVhZF9yd2xvY2tfdHJ5
cmRsb2NrIChwdGhyZWFkX3J3bG9ja190ICpyd2xvY2spCiB7CiAgIGlmIChw
dGhyZWFkX3J3bG9jazo6aXNHb29kSW5pdGlhbGl6ZXIgKHJ3bG9jaykpCiAg
ICAgcHRocmVhZF9yd2xvY2s6OmluaXQgKHJ3bG9jaywgTlVMTCk7CkBAIC0y
NzAxLDggKzI3MDEsOCBAQCBfX3B0aHJlYWRfcndsb2NrX3RyeXJkbG9jayAo
cHRocmVhZF9yd2xvCiAgIHJldHVybiAoKnJ3bG9jayktPlRyeVJkTG9jayAo
KTsKIH0KIAotaW50Ci1fX3B0aHJlYWRfcndsb2NrX3dybG9jayAocHRocmVh
ZF9yd2xvY2tfdCAqcndsb2NrKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRf
cndsb2NrX3dybG9jayAocHRocmVhZF9yd2xvY2tfdCAqcndsb2NrKQogewog
ICBwdGhyZWFkX3Rlc3RjYW5jZWwgKCk7CiAKQEAgLTI3MTQsOCArMjcxNCw4
IEBAIF9fcHRocmVhZF9yd2xvY2tfd3Jsb2NrIChwdGhyZWFkX3J3bG9ja18K
ICAgcmV0dXJuICgqcndsb2NrKS0+V3JMb2NrICgpOwogfQogCi1pbnQKLV9f
cHRocmVhZF9yd2xvY2tfdHJ5d3Jsb2NrIChwdGhyZWFkX3J3bG9ja190ICpy
d2xvY2spCitleHRlcm4gIkMiIGludAorcHRocmVhZF9yd2xvY2tfdHJ5d3Js
b2NrIChwdGhyZWFkX3J3bG9ja190ICpyd2xvY2spCiB7CiAgIGlmIChwdGhy
ZWFkX3J3bG9jazo6aXNHb29kSW5pdGlhbGl6ZXIgKHJ3bG9jaykpCiAgICAg
cHRocmVhZF9yd2xvY2s6OmluaXQgKHJ3bG9jaywgTlVMTCk7CkBAIC0yNzI1
LDggKzI3MjUsOCBAQCBfX3B0aHJlYWRfcndsb2NrX3RyeXdybG9jayAocHRo
cmVhZF9yd2xvCiAgIHJldHVybiAoKnJ3bG9jayktPlRyeVdyTG9jayAoKTsK
IH0KIAotaW50Ci1fX3B0aHJlYWRfcndsb2NrX3VubG9jayAocHRocmVhZF9y
d2xvY2tfdCAqcndsb2NrKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfcnds
b2NrX3VubG9jayAocHRocmVhZF9yd2xvY2tfdCAqcndsb2NrKQogewogICBp
ZiAocHRocmVhZF9yd2xvY2s6OmlzR29vZEluaXRpYWxpemVyIChyd2xvY2sp
KQogICAgIHJldHVybiAwOwpAQCAtMjczNiw4ICsyNzM2LDggQEAgX19wdGhy
ZWFkX3J3bG9ja191bmxvY2sgKHB0aHJlYWRfcndsb2NrXwogICByZXR1cm4g
KCpyd2xvY2spLT5VbkxvY2sgKCk7CiB9CiAKLWludAotX19wdGhyZWFkX3J3
bG9ja2F0dHJfaW5pdCAocHRocmVhZF9yd2xvY2thdHRyX3QgKnJ3bG9ja2F0
dHIpCitleHRlcm4gIkMiIGludAorcHRocmVhZF9yd2xvY2thdHRyX2luaXQg
KHB0aHJlYWRfcndsb2NrYXR0cl90ICpyd2xvY2thdHRyKQogewogICBpZiAo
Y2hlY2tfdmFsaWRfcG9pbnRlciAocndsb2NrYXR0cikpCiAgICAgcmV0dXJu
IEVJTlZBTDsKQEAgLTI3NTEsOCArMjc1MSw4IEBAIF9fcHRocmVhZF9yd2xv
Y2thdHRyX2luaXQgKHB0aHJlYWRfcndsb2MKICAgcmV0dXJuIDA7CiB9CiAK
LWludAotX19wdGhyZWFkX3J3bG9ja2F0dHJfZ2V0cHNoYXJlZCAoY29uc3Qg
cHRocmVhZF9yd2xvY2thdHRyX3QgKmF0dHIsIGludCAqcHNoYXJlZCkKK2V4
dGVybiAiQyIgaW50CitwdGhyZWFkX3J3bG9ja2F0dHJfZ2V0cHNoYXJlZCAo
Y29uc3QgcHRocmVhZF9yd2xvY2thdHRyX3QgKmF0dHIsIGludCAqcHNoYXJl
ZCkKIHsKICAgaWYgKCFwdGhyZWFkX3J3bG9ja2F0dHI6OmlzR29vZE9iamVj
dCAoYXR0cikpCiAgICAgcmV0dXJuIEVJTlZBTDsKQEAgLTI3NjAsOCArMjc2
MCw4IEBAIF9fcHRocmVhZF9yd2xvY2thdHRyX2dldHBzaGFyZWQgKGNvbnN0
IHAKICAgcmV0dXJuIDA7CiB9CiAKLWludAotX19wdGhyZWFkX3J3bG9ja2F0
dHJfc2V0cHNoYXJlZCAocHRocmVhZF9yd2xvY2thdHRyX3QgKmF0dHIsIGlu
dCBwc2hhcmVkKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfcndsb2NrYXR0
cl9zZXRwc2hhcmVkIChwdGhyZWFkX3J3bG9ja2F0dHJfdCAqYXR0ciwgaW50
IHBzaGFyZWQpCiB7CiAgIGlmICghcHRocmVhZF9yd2xvY2thdHRyOjppc0dv
b2RPYmplY3QgKGF0dHIpKQogICAgIHJldHVybiBFSU5WQUw7CkBAIC0yNzc0
LDggKzI3NzQsOCBAQCBfX3B0aHJlYWRfcndsb2NrYXR0cl9zZXRwc2hhcmVk
IChwdGhyZWFkCiAgIHJldHVybiAwOwogfQogCi1pbnQKLV9fcHRocmVhZF9y
d2xvY2thdHRyX2Rlc3Ryb3kgKHB0aHJlYWRfcndsb2NrYXR0cl90ICpyd2xv
Y2thdHRyKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfcndsb2NrYXR0cl9k
ZXN0cm95IChwdGhyZWFkX3J3bG9ja2F0dHJfdCAqcndsb2NrYXR0cikKIHsK
ICAgaWYgKCFwdGhyZWFkX3J3bG9ja2F0dHI6OmlzR29vZE9iamVjdCAocnds
b2NrYXR0cikpCiAgICAgcmV0dXJuIEVJTlZBTDsKQEAgLTI3ODUsOCArMjc4
NSw4IEBAIF9fcHRocmVhZF9yd2xvY2thdHRyX2Rlc3Ryb3kgKHB0aHJlYWRf
cncKIH0KIAogLyogVGhyZWFkIHNpZ25hbCAqLwotaW50Ci1fX3B0aHJlYWRf
a2lsbCAocHRocmVhZF90IHRocmVhZCwgaW50IHNpZykKK2V4dGVybiAiQyIg
aW50CitwdGhyZWFkX2tpbGwgKHB0aHJlYWRfdCB0aHJlYWQsIGludCBzaWcp
CiB7CiAgIC8vIGxvY2sgbXlzZWxmLCBmb3IgdGhlIHVzZSBvZiB0aHJlYWQy
c2lnbmFsCiAgIC8vIHR3byBkaWZmZXJlbnQga2lsbHMgbWlnaHQgY2xhc2g6
IEZJWE1FCkBAIC0yODAzLDggKzI4MDMsOCBAQCBfX3B0aHJlYWRfa2lsbCAo
cHRocmVhZF90IHRocmVhZCwgaW50IHNpCiAgIHJldHVybiBydmFsOwogfQog
Ci1pbnQKLV9fcHRocmVhZF9zaWdtYXNrIChpbnQgb3BlcmF0aW9uLCBjb25z
dCBzaWdzZXRfdCAqc2V0LCBzaWdzZXRfdCAqb2xkX3NldCkKK2V4dGVybiAi
QyIgaW50CitwdGhyZWFkX3NpZ21hc2sgKGludCBvcGVyYXRpb24sIGNvbnN0
IHNpZ3NldF90ICpzZXQsIHNpZ3NldF90ICpvbGRfc2V0KQogewogICBwdGhy
ZWFkICp0aHJlYWQgPSBwdGhyZWFkOjpzZWxmICgpOwogCkBAIC0yODI0LDkg
KzI4MjQsOSBAQCBfX3B0aHJlYWRfc2lnbWFzayAoaW50IG9wZXJhdGlvbiwg
Y29uc3QgCiAvKiBJRCAqLwogCiBpbnQKLV9fcHRocmVhZF9lcXVhbCAocHRo
cmVhZF90ICp0MSwgcHRocmVhZF90ICp0MikKK3B0aHJlYWRfZXF1YWwgKHB0
aHJlYWRfdCB0MSwgcHRocmVhZF90IHQyKQogewotICByZXR1cm4gKCp0MSA9
PSAqdDIpOworICByZXR1cm4gdDEgPT0gdDI7CiB9CiAKIC8qIE11dGV4ZXMg
ICovCkBAIC0yODY2LDggKzI4NjYsOCBAQCBwdGhyZWFkX211dGV4Ojppbml0
IChwdGhyZWFkX211dGV4X3QgKm11CiAgIHJldHVybiAwOwogfQogCi1pbnQK
LV9fcHRocmVhZF9tdXRleF9nZXRwcmlvY2VpbGluZyAoY29uc3QgcHRocmVh
ZF9tdXRleF90ICptdXRleCwKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX211
dGV4X2dldHByaW9jZWlsaW5nIChjb25zdCBwdGhyZWFkX211dGV4X3QgKm11
dGV4LAogCQkJCWludCAqcHJpb2NlaWxpbmcpCiB7CiAgIHB0aHJlYWRfbXV0
ZXhfdCAqdGhlbXV0ZXggPSAocHRocmVhZF9tdXRleF90ICopIG11dGV4OwpA
QCAtMjg4Niw3ICsyODg2LDcgQEAgX19wdGhyZWFkX211dGV4X2dldHByaW9j
ZWlsaW5nIChjb25zdCBwdAogfQogCiBpbnQKLV9fcHRocmVhZF9tdXRleF9s
b2NrIChwdGhyZWFkX211dGV4X3QgKm11dGV4KQorcHRocmVhZF9tdXRleF9s
b2NrIChwdGhyZWFkX211dGV4X3QgKm11dGV4KQogewogICBwdGhyZWFkX211
dGV4X3QgKnRoZW11dGV4ID0gbXV0ZXg7CiAgIC8qIFRoaXMgY291bGQgYmUg
c2ltcGxpZmllZCB2aWEgaXNHb29kSW5pdGlhbGl6ZXJPck9iamVjdApAQCAt
MjkxMyw4ICsyOTEzLDggQEAgX19wdGhyZWFkX211dGV4X2xvY2sgKHB0aHJl
YWRfbXV0ZXhfdCAqbQogICByZXR1cm4gKCp0aGVtdXRleCktPkxvY2sgKCk7
CiB9CiAKLWludAotX19wdGhyZWFkX211dGV4X3RyeWxvY2sgKHB0aHJlYWRf
bXV0ZXhfdCAqbXV0ZXgpCitleHRlcm4gIkMiIGludAorcHRocmVhZF9tdXRl
eF90cnlsb2NrIChwdGhyZWFkX211dGV4X3QgKm11dGV4KQogewogICBwdGhy
ZWFkX211dGV4X3QgKnRoZW11dGV4ID0gbXV0ZXg7CiAgIGlmIChwdGhyZWFk
X211dGV4Ojppc0dvb2RJbml0aWFsaXplciAobXV0ZXgpKQpAQCAtMjkyNCw4
ICsyOTI0LDggQEAgX19wdGhyZWFkX211dGV4X3RyeWxvY2sgKHB0aHJlYWRf
bXV0ZXhfdAogICByZXR1cm4gKCp0aGVtdXRleCktPlRyeUxvY2sgKCk7CiB9
CiAKLWludAotX19wdGhyZWFkX211dGV4X3VubG9jayAocHRocmVhZF9tdXRl
eF90ICptdXRleCkKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX211dGV4X3Vu
bG9jayAocHRocmVhZF9tdXRleF90ICptdXRleCkKIHsKICAgaWYgKHB0aHJl
YWRfbXV0ZXg6OmlzR29vZEluaXRpYWxpemVyIChtdXRleCkpCiAgICAgcHRo
cmVhZF9tdXRleDo6aW5pdCAobXV0ZXgsIE5VTEwpOwpAQCAtMjkzNCw4ICsy
OTM0LDggQEAgX19wdGhyZWFkX211dGV4X3VubG9jayAocHRocmVhZF9tdXRl
eF90IAogICByZXR1cm4gKCptdXRleCktPlVuTG9jayAoKTsKIH0KIAotaW50
Ci1fX3B0aHJlYWRfbXV0ZXhfZGVzdHJveSAocHRocmVhZF9tdXRleF90ICpt
dXRleCkKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX211dGV4X2Rlc3Ryb3kg
KHB0aHJlYWRfbXV0ZXhfdCAqbXV0ZXgpCiB7CiAgIGludCBydjsKIApAQCAt
Mjk1Miw4ICsyOTUyLDggQEAgX19wdGhyZWFkX211dGV4X2Rlc3Ryb3kgKHB0
aHJlYWRfbXV0ZXhfdAogICByZXR1cm4gMDsKIH0KIAotaW50Ci1fX3B0aHJl
YWRfbXV0ZXhfc2V0cHJpb2NlaWxpbmcgKHB0aHJlYWRfbXV0ZXhfdCAqbXV0
ZXgsIGludCBwcmlvY2VpbGluZywKK2V4dGVybiAiQyIgaW50CitwdGhyZWFk
X211dGV4X3NldHByaW9jZWlsaW5nIChwdGhyZWFkX211dGV4X3QgKm11dGV4
LCBpbnQgcHJpb2NlaWxpbmcsCiAJCQkJaW50ICpvbGRfY2VpbGluZykKIHsK
ICAgcHRocmVhZF9tdXRleF90ICp0aGVtdXRleCA9IG11dGV4OwpAQCAtMjk2
Niw4ICsyOTY2LDggQEAgX19wdGhyZWFkX211dGV4X3NldHByaW9jZWlsaW5n
IChwdGhyZWFkXwogCiAvKiBXaW4zMiBkb2Vzbid0IHN1cHBvcnQgbXV0ZXgg
cHJpb3JpdGllcyAtIHNlZSBfX3B0aHJlYWRfbXV0ZXhfZ2V0cHJpb2NlaWxp
bmcKICAgIGZvciBtb3JlIGRldGFpbCAqLwotaW50Ci1fX3B0aHJlYWRfbXV0
ZXhhdHRyX2dldHByb3RvY29sIChjb25zdCBwdGhyZWFkX211dGV4YXR0cl90
ICphdHRyLAorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfbXV0ZXhhdHRyX2dl
dHByb3RvY29sIChjb25zdCBwdGhyZWFkX211dGV4YXR0cl90ICphdHRyLAog
CQkJCSBpbnQgKnByb3RvY29sKQogewogICBpZiAoIXB0aHJlYWRfbXV0ZXhh
dHRyOjppc0dvb2RPYmplY3QgKGF0dHIpKQpAQCAtMjk3NSw4ICsyOTc1LDgg
QEAgX19wdGhyZWFkX211dGV4YXR0cl9nZXRwcm90b2NvbCAoY29uc3QgcAog
ICByZXR1cm4gRU5PU1lTOwogfQogCi1pbnQKLV9fcHRocmVhZF9tdXRleGF0
dHJfZ2V0cHNoYXJlZCAoY29uc3QgcHRocmVhZF9tdXRleGF0dHJfdCAqYXR0
ciwKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX211dGV4YXR0cl9nZXRwc2hh
cmVkIChjb25zdCBwdGhyZWFkX211dGV4YXR0cl90ICphdHRyLAogCQkJCWlu
dCAqcHNoYXJlZCkKIHsKICAgaWYgKCFwdGhyZWFkX211dGV4YXR0cjo6aXNH
b29kT2JqZWN0IChhdHRyKSkKQEAgLTI5ODUsOCArMjk4NSw4IEBAIF9fcHRo
cmVhZF9tdXRleGF0dHJfZ2V0cHNoYXJlZCAoY29uc3QgcHQKICAgcmV0dXJu
IDA7CiB9CiAKLWludAotX19wdGhyZWFkX211dGV4YXR0cl9nZXR0eXBlIChj
b25zdCBwdGhyZWFkX211dGV4YXR0cl90ICphdHRyLCBpbnQgKnR5cGUpCitl
eHRlcm4gIkMiIGludAorcHRocmVhZF9tdXRleGF0dHJfZ2V0dHlwZSAoY29u
c3QgcHRocmVhZF9tdXRleGF0dHJfdCAqYXR0ciwgaW50ICp0eXBlKQogewog
ICBpZiAoIXB0aHJlYWRfbXV0ZXhhdHRyOjppc0dvb2RPYmplY3QgKGF0dHIp
KQogICAgIHJldHVybiBFSU5WQUw7CkBAIC0yOTk1LDggKzI5OTUsOCBAQCBf
X3B0aHJlYWRfbXV0ZXhhdHRyX2dldHR5cGUgKGNvbnN0IHB0aHJlCiB9CiAK
IC8qIEZJWE1FOiB3cml0ZSBhbmQgdGVzdCBwcm9jZXNzIHNoYXJlZCBtdXRl
eCdzLiAgKi8KLWludAotX19wdGhyZWFkX211dGV4YXR0cl9pbml0IChwdGhy
ZWFkX211dGV4YXR0cl90ICphdHRyKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJl
YWRfbXV0ZXhhdHRyX2luaXQgKHB0aHJlYWRfbXV0ZXhhdHRyX3QgKmF0dHIp
CiB7CiAgIGlmIChwdGhyZWFkX211dGV4YXR0cjo6aXNHb29kT2JqZWN0IChh
dHRyKSkKICAgICByZXR1cm4gRUJVU1k7CkBAIC0zMDExLDggKzMwMTEsOCBA
QCBfX3B0aHJlYWRfbXV0ZXhhdHRyX2luaXQgKHB0aHJlYWRfbXV0ZXhhCiAg
IHJldHVybiAwOwogfQogCi1pbnQKLV9fcHRocmVhZF9tdXRleGF0dHJfZGVz
dHJveSAocHRocmVhZF9tdXRleGF0dHJfdCAqYXR0cikKK2V4dGVybiAiQyIg
aW50CitwdGhyZWFkX211dGV4YXR0cl9kZXN0cm95IChwdGhyZWFkX211dGV4
YXR0cl90ICphdHRyKQogewogICBpZiAoIXB0aHJlYWRfbXV0ZXhhdHRyOjpp
c0dvb2RPYmplY3QgKGF0dHIpKQogICAgIHJldHVybiBFSU5WQUw7CkBAIC0z
MDIzLDggKzMwMjMsOCBAQCBfX3B0aHJlYWRfbXV0ZXhhdHRyX2Rlc3Ryb3kg
KHB0aHJlYWRfbXV0CiAKIAogLyogV2luMzIgZG9lc24ndCBzdXBwb3J0IG11
dGV4IHByaW9yaXRpZXMgKi8KLWludAotX19wdGhyZWFkX211dGV4YXR0cl9z
ZXRwcm90b2NvbCAocHRocmVhZF9tdXRleGF0dHJfdCAqYXR0ciwgaW50IHBy
b3RvY29sKQorZXh0ZXJuICJDIiBpbnQKK3B0aHJlYWRfbXV0ZXhhdHRyX3Nl
dHByb3RvY29sIChwdGhyZWFkX211dGV4YXR0cl90ICphdHRyLCBpbnQgcHJv
dG9jb2wpCiB7CiAgIGlmICghcHRocmVhZF9tdXRleGF0dHI6OmlzR29vZE9i
amVjdCAoYXR0cikpCiAgICAgcmV0dXJuIEVJTlZBTDsKQEAgLTMwMzIsOCAr
MzAzMiw4IEBAIF9fcHRocmVhZF9tdXRleGF0dHJfc2V0cHJvdG9jb2wgKHB0
aHJlYWQKIH0KIAogLyogV2luMzIgZG9lc24ndCBzdXBwb3J0IG11dGV4IHBy
aW9yaXRpZXMgKi8KLWludAotX19wdGhyZWFkX211dGV4YXR0cl9zZXRwcmlv
Y2VpbGluZyAocHRocmVhZF9tdXRleGF0dHJfdCAqYXR0ciwKK2V4dGVybiAi
QyIgaW50CitwdGhyZWFkX211dGV4YXR0cl9zZXRwcmlvY2VpbGluZyAocHRo
cmVhZF9tdXRleGF0dHJfdCAqYXR0ciwKIAkJCQkgICAgaW50IHByaW9jZWls
aW5nKQogewogICBpZiAoIXB0aHJlYWRfbXV0ZXhhdHRyOjppc0dvb2RPYmpl
Y3QgKGF0dHIpKQpAQCAtMzA0MSw4ICszMDQxLDggQEAgX19wdGhyZWFkX211
dGV4YXR0cl9zZXRwcmlvY2VpbGluZyAocHRocgogICByZXR1cm4gRU5PU1lT
OwogfQogCi1pbnQKLV9fcHRocmVhZF9tdXRleGF0dHJfZ2V0cHJpb2NlaWxp
bmcgKGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKmF0dHIsCitleHRlcm4g
IkMiIGludAorcHRocmVhZF9tdXRleGF0dHJfZ2V0cHJpb2NlaWxpbmcgKGNv
bnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3QgKmF0dHIsCiAJCQkJICAgIGludCAq
cHJpb2NlaWxpbmcpCiB7CiAgIGlmICghcHRocmVhZF9tdXRleGF0dHI6Omlz
R29vZE9iamVjdCAoYXR0cikpCkBAIC0zMDUwLDggKzMwNTAsOCBAQCBfX3B0
aHJlYWRfbXV0ZXhhdHRyX2dldHByaW9jZWlsaW5nIChjb25zCiAgIHJldHVy
biBFTk9TWVM7CiB9CiAKLWludAotX19wdGhyZWFkX211dGV4YXR0cl9zZXRw
c2hhcmVkIChwdGhyZWFkX211dGV4YXR0cl90ICphdHRyLCBpbnQgcHNoYXJl
ZCkKK2V4dGVybiAiQyIgaW50CitwdGhyZWFkX211dGV4YXR0cl9zZXRwc2hh
cmVkIChwdGhyZWFkX211dGV4YXR0cl90ICphdHRyLCBpbnQgcHNoYXJlZCkK
IHsKICAgaWYgKCFwdGhyZWFkX211dGV4YXR0cjo6aXNHb29kT2JqZWN0IChh
dHRyKSkKICAgICByZXR1cm4gRUlOVkFMOwpAQCAtMzA2NCw5ICszMDY0LDkg
QEAgX19wdGhyZWFkX211dGV4YXR0cl9zZXRwc2hhcmVkIChwdGhyZWFkXwog
ICByZXR1cm4gMDsKIH0KIAotLyogc2VlIF9fcHRocmVhZF9tdXRleF9nZXR0
eXBlICovCi1pbnQKLV9fcHRocmVhZF9tdXRleGF0dHJfc2V0dHlwZSAocHRo
cmVhZF9tdXRleGF0dHJfdCAqYXR0ciwgaW50IHR5cGUpCisvKiBzZWUgcHRo
cmVhZF9tdXRleF9nZXR0eXBlICovCitleHRlcm4gIkMiIGludAorcHRocmVh
ZF9tdXRleGF0dHJfc2V0dHlwZSAocHRocmVhZF9tdXRleGF0dHJfdCAqYXR0
ciwgaW50IHR5cGUpCiB7CiAgIGlmICghcHRocmVhZF9tdXRleGF0dHI6Omlz
R29vZE9iamVjdCAoYXR0cikpCiAgICAgcmV0dXJuIEVJTlZBTDsKZGlmZiAt
dXJwIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi90aHJlYWQuaCBzcmMvd2luc3Vw
L2N5Z3dpbi90aHJlYWQuaAotLS0gc3JjLm9sZC93aW5zdXAvY3lnd2luL3Ro
cmVhZC5oCTIwMDMtMDItMjggMTE6MzQ6MjMuMDAwMDAwMDAwICswMTAwCisr
KyBzcmMvd2luc3VwL2N5Z3dpbi90aHJlYWQuaAkyMDAzLTAyLTI4IDEyOjIw
OjUwLjAwMDAwMDAwMCArMDEwMApAQCAtNjcwLDk3ICs2NzAsNiBAQCBwdWJs
aWM6CiAKICNkZWZpbmUgTVRfSU5URVJGQUNFIHVzZXJfZGF0YS0+dGhyZWFk
aW50ZXJmYWNlCiAKLWV4dGVybiAiQyIKLXsKLWludCBfX3B0aHJlYWRfYXR0
cl9pbml0IChwdGhyZWFkX2F0dHJfdCAqIGF0dHIpOwotaW50IF9fcHRocmVh
ZF9hdHRyX2Rlc3Ryb3kgKHB0aHJlYWRfYXR0cl90ICogYXR0cik7Ci1pbnQg
X19wdGhyZWFkX2F0dHJfc2V0ZGV0YWNoc3RhdGUgKHB0aHJlYWRfYXR0cl90
ICosIGludCk7Ci1pbnQgX19wdGhyZWFkX2F0dHJfZ2V0ZGV0YWNoc3RhdGUg
KGNvbnN0IHB0aHJlYWRfYXR0cl90ICosIGludCAqKTsKLWludCBfX3B0aHJl
YWRfYXR0cl9zZXRzdGFja3NpemUgKHB0aHJlYWRfYXR0cl90ICogYXR0ciwg
c2l6ZV90IHNpemUpOwotaW50IF9fcHRocmVhZF9hdHRyX2dldHN0YWNrc2l6
ZSAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiBhdHRyLCBzaXplX3QgKiBzaXpl
KTsKLQotaW50IF9fcHRocmVhZF9hdHRyX2dldGluaGVyaXRzY2hlZCAoY29u
c3QgcHRocmVhZF9hdHRyX3QgKiwgaW50ICopOwotaW50IF9fcHRocmVhZF9h
dHRyX2dldHNjaGVkcGFyYW0gKGNvbnN0IHB0aHJlYWRfYXR0cl90ICosCi0J
CQkJICBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKik7Ci1pbnQgX19wdGhyZWFkX2F0
dHJfZ2V0c2NoZWRwb2xpY3kgKGNvbnN0IHB0aHJlYWRfYXR0cl90ICosIGlu
dCAqKTsKLWludCBfX3B0aHJlYWRfYXR0cl9nZXRzY29wZSAoY29uc3QgcHRo
cmVhZF9hdHRyX3QgKiwgaW50ICopOwotaW50IF9fcHRocmVhZF9hdHRyX2dl
dHN0YWNrYWRkciAoY29uc3QgcHRocmVhZF9hdHRyX3QgKiwgdm9pZCAqKik7
Ci1pbnQgX19wdGhyZWFkX2F0dHJfc2V0aW5oZXJpdHNjaGVkIChwdGhyZWFk
X2F0dHJfdCAqLCBpbnQpOwotaW50IF9fcHRocmVhZF9hdHRyX3NldHNjaGVk
cGFyYW0gKHB0aHJlYWRfYXR0cl90ICosCi0JCQkJICBjb25zdCBzdHJ1Y3Qg
c2NoZWRfcGFyYW0gKik7Ci1pbnQgX19wdGhyZWFkX2F0dHJfc2V0c2NoZWRw
b2xpY3kgKHB0aHJlYWRfYXR0cl90ICosIGludCk7Ci1pbnQgX19wdGhyZWFk
X2F0dHJfc2V0c2NvcGUgKHB0aHJlYWRfYXR0cl90ICosIGludCk7Ci1pbnQg
X19wdGhyZWFkX2F0dHJfc2V0c3RhY2thZGRyIChwdGhyZWFkX2F0dHJfdCAq
LCB2b2lkICopOwotCi0vKiBUaHJlYWQgU3BlY2lmaWNEYXRhICovCi1pbnQg
X19wdGhyZWFkX2tleV9jcmVhdGUgKHB0aHJlYWRfa2V5X3QgKiBrZXksIHZv
aWQgKCpkZXN0cnVjdG9yKSAodm9pZCAqKSk7Ci1pbnQgX19wdGhyZWFkX2tl
eV9kZWxldGUgKHB0aHJlYWRfa2V5X3Qga2V5KTsKLWludCBfX3B0aHJlYWRf
c2V0c3BlY2lmaWMgKHB0aHJlYWRfa2V5X3Qga2V5LCBjb25zdCB2b2lkICp2
YWx1ZSk7Ci12b2lkICpfX3B0aHJlYWRfZ2V0c3BlY2lmaWMgKHB0aHJlYWRf
a2V5X3Qga2V5KTsKLQotLyogVGhlYWQgc3luY2hyb25pYXRpb24gKi8KLWlu
dCBfX3B0aHJlYWRfY29uZF9kZXN0cm95IChwdGhyZWFkX2NvbmRfdCAqIGNv
bmQpOwotaW50IF9fcHRocmVhZF9jb25kX3NpZ25hbCAocHRocmVhZF9jb25k
X3QgKiBjb25kKTsKLWludCBfX3B0aHJlYWRfY29uZF9icm9hZGNhc3QgKHB0
aHJlYWRfY29uZF90ICogY29uZCk7Ci1pbnQgX19wdGhyZWFkX2NvbmRhdHRy
X2luaXQgKHB0aHJlYWRfY29uZGF0dHJfdCAqIGNvbmRhdHRyKTsKLWludCBf
X3B0aHJlYWRfY29uZGF0dHJfZGVzdHJveSAocHRocmVhZF9jb25kYXR0cl90
ICogY29uZGF0dHIpOwotaW50IF9fcHRocmVhZF9jb25kYXR0cl9nZXRwc2hh
cmVkIChjb25zdCBwdGhyZWFkX2NvbmRhdHRyX3QgKiBhdHRyLAotCQkJCSAg
IGludCAqcHNoYXJlZCk7Ci1pbnQgX19wdGhyZWFkX2NvbmRhdHRyX3NldHBz
aGFyZWQgKHB0aHJlYWRfY29uZGF0dHJfdCAqIGF0dHIsIGludCBwc2hhcmVk
KTsKLQotLyogUlcgbG9ja3MgKi8KLWludCBfX3B0aHJlYWRfcndsb2NrX2Rl
c3Ryb3kgKHB0aHJlYWRfcndsb2NrX3QgKnJ3bG9jayk7Ci1pbnQgX19wdGhy
ZWFkX3J3bG9ja19yZGxvY2sgKHB0aHJlYWRfcndsb2NrX3QgKnJ3bG9jayk7
Ci1pbnQgX19wdGhyZWFkX3J3bG9ja190cnlyZGxvY2sgKHB0aHJlYWRfcnds
b2NrX3QgKnJ3bG9jayk7Ci1pbnQgX19wdGhyZWFkX3J3bG9ja193cmxvY2sg
KHB0aHJlYWRfcndsb2NrX3QgKnJ3bG9jayk7Ci1pbnQgX19wdGhyZWFkX3J3
bG9ja190cnl3cmxvY2sgKHB0aHJlYWRfcndsb2NrX3QgKnJ3bG9jayk7Ci1p
bnQgX19wdGhyZWFkX3J3bG9ja191bmxvY2sgKHB0aHJlYWRfcndsb2NrX3Qg
KnJ3bG9jayk7Ci1pbnQgX19wdGhyZWFkX3J3bG9ja2F0dHJfaW5pdCAocHRo
cmVhZF9yd2xvY2thdHRyX3QgKnJ3bG9ja2F0dHIpOwotaW50IF9fcHRocmVh
ZF9yd2xvY2thdHRyX2dldHBzaGFyZWQgKGNvbnN0IHB0aHJlYWRfcndsb2Nr
YXR0cl90ICphdHRyLAotICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIGludCAqcHNoYXJlZCk7Ci1pbnQgX19wdGhyZWFkX3J3bG9ja2F0
dHJfc2V0cHNoYXJlZCAocHRocmVhZF9yd2xvY2thdHRyX3QgKmF0dHIsIGlu
dCBwc2hhcmVkKTsKLWludCBfX3B0aHJlYWRfcndsb2NrYXR0cl9kZXN0cm95
IChwdGhyZWFkX3J3bG9ja2F0dHJfdCAqcndsb2NrYXR0cik7Ci0KLS8qIFRo
cmVhZCBzaWduYWwgKi8KLWludCBfX3B0aHJlYWRfa2lsbCAocHRocmVhZF90
IHRocmVhZCwgaW50IHNpZyk7Ci1pbnQgX19wdGhyZWFkX3NpZ21hc2sgKGlu
dCBvcGVyYXRpb24sIGNvbnN0IHNpZ3NldF90ICogc2V0LAotCQkgICAgICAg
c2lnc2V0X3QgKiBvbGRfc2V0KTsKLQotLyogIElEICovCi1pbnQgX19wdGhy
ZWFkX2VxdWFsIChwdGhyZWFkX3QgKiB0MSwgcHRocmVhZF90ICogdDIpOwot
Ci0vKiBNdXRleGVzICAqLwotaW50IF9fcHRocmVhZF9tdXRleF9sb2NrIChw
dGhyZWFkX211dGV4X3QgKik7Ci1pbnQgX19wdGhyZWFkX211dGV4X3RyeWxv
Y2sgKHB0aHJlYWRfbXV0ZXhfdCAqKTsKLWludCBfX3B0aHJlYWRfbXV0ZXhf
dW5sb2NrIChwdGhyZWFkX211dGV4X3QgKik7Ci1pbnQgX19wdGhyZWFkX211
dGV4X2Rlc3Ryb3kgKHB0aHJlYWRfbXV0ZXhfdCAqKTsKLWludCBfX3B0aHJl
YWRfbXV0ZXhfc2V0cHJpb2NlaWxpbmcgKHB0aHJlYWRfbXV0ZXhfdCAqIG11
dGV4LAotCQkJCSAgICBpbnQgcHJpb2NlaWxpbmcsIGludCAqb2xkX2NlaWxp
bmcpOwotaW50IF9fcHRocmVhZF9tdXRleF9nZXRwcmlvY2VpbGluZyAoY29u
c3QgcHRocmVhZF9tdXRleF90ICogbXV0ZXgsCi0JCQkJICAgIGludCAqcHJp
b2NlaWxpbmcpOwotCi0KLWludCBfX3B0aHJlYWRfbXV0ZXhhdHRyX2Rlc3Ry
b3kgKHB0aHJlYWRfbXV0ZXhhdHRyX3QgKik7Ci1pbnQgX19wdGhyZWFkX211
dGV4YXR0cl9nZXRwcmlvY2VpbGluZyAoY29uc3QgcHRocmVhZF9tdXRleGF0
dHJfdCAqLCBpbnQgKik7Ci1pbnQgX19wdGhyZWFkX211dGV4YXR0cl9nZXRw
cm90b2NvbCAoY29uc3QgcHRocmVhZF9tdXRleGF0dHJfdCAqLCBpbnQgKik7
Ci1pbnQgX19wdGhyZWFkX211dGV4YXR0cl9nZXRwc2hhcmVkIChjb25zdCBw
dGhyZWFkX211dGV4YXR0cl90ICosIGludCAqKTsKLWludCBfX3B0aHJlYWRf
bXV0ZXhhdHRyX2dldHR5cGUgKGNvbnN0IHB0aHJlYWRfbXV0ZXhhdHRyX3Qg
KiwgaW50ICopOwotaW50IF9fcHRocmVhZF9tdXRleGF0dHJfaW5pdCAocHRo
cmVhZF9tdXRleGF0dHJfdCAqKTsKLWludCBfX3B0aHJlYWRfbXV0ZXhhdHRy
X3NldHByaW9jZWlsaW5nIChwdGhyZWFkX211dGV4YXR0cl90ICosIGludCk7
Ci1pbnQgX19wdGhyZWFkX211dGV4YXR0cl9zZXRwcm90b2NvbCAocHRocmVh
ZF9tdXRleGF0dHJfdCAqLCBpbnQpOwotaW50IF9fcHRocmVhZF9tdXRleGF0
dHJfc2V0cHNoYXJlZCAocHRocmVhZF9tdXRleGF0dHJfdCAqLCBpbnQpOwot
aW50IF9fcHRocmVhZF9tdXRleGF0dHJfc2V0dHlwZSAocHRocmVhZF9tdXRl
eGF0dHJfdCAqLCBpbnQpOwotCi0KLS8qIFNjaGVkdWxpbmcgKi8KLWludCBf
X3B0aHJlYWRfZ2V0Y29uY3VycmVuY3kgKHZvaWQpOwotaW50IF9fcHRocmVh
ZF9zZXRjb25jdXJyZW5jeSAoaW50IG5ld19sZXZlbCk7Ci1pbnQgX19wdGhy
ZWFkX2dldHNjaGVkcGFyYW0gKHB0aHJlYWRfdCB0aHJlYWQsIGludCAqcG9s
aWN5LAotCQkJICAgICBzdHJ1Y3Qgc2NoZWRfcGFyYW0gKnBhcmFtKTsKLWlu
dCBfX3B0aHJlYWRfc2V0c2NoZWRwYXJhbSAocHRocmVhZF90IHRocmVhZCwg
aW50IHBvbGljeSwKLQkJCSAgICAgY29uc3Qgc3RydWN0IHNjaGVkX3BhcmFt
ICpwYXJhbSk7Ci0KLX07CiAjZW5kaWYgLy8gTVRfU0FGRQogCiAjZW5kaWYg
Ly8gX0NZR05VU19USFJFQURTXwo=

--11330916-10922-1046440413=:371--
