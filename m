Return-Path: <cygwin-patches-return-4016-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 18316 invoked by alias); 17 Jul 2003 06:48:20 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sources.redhat.com/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sources.redhat.com/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Received: (qmail 18307 invoked from network); 17 Jul 2003 06:48:19 -0000
To: cygwin-patches@cygwin.com
Subject: setmetamode
Mime-Version: 1.0 (generated by tm-edit 7.106)
Content-Type: multipart/mixed;
 boundary="Multipart_Thu_Jul_17_15:48:15_2003-1"
Content-Transfer-Encoding: 7bit
From: Kazuhiro Fujieda <fujieda@jaist.ac.jp>
Date: Thu, 17 Jul 2003 06:48:00 -0000
Message-ID: <s1sznjdk5sg.fsf@jaist.ac.jp>
X-SW-Source: 2003-q3/txt/msg00032.txt.bz2

--Multipart_Thu_Jul_17_15:48:15_2003-1
Content-Type: text/plain; charset=US-ASCII
Content-length: 753

I have implemented the `setmetamode' command and the corresponding
ioctl commands of the console device like ones on Linux.
The following is the usage of setmetamode.

$ setmetamode
escprefix
$ cat | od -t x1
                              <- Type M-x three times, ^m and ^d.
0000000 1b 78 1b 78 1b 78 0d 0a
0000010
$ setmetamode metabit
$ cat | od -t x1
                              <- Type M-x three times, ^m and ^d.
0000000 f8 f8 f8 0d 0a
0000005

The metabit mode enable Emacs to handle the escape key as a
separate key. This is important for users of viper-mode, a VI
emulator.
____
  | AIST      Kazuhiro Fujieda <fujieda@jaist.ac.jp>
  | HOKURIKU  Center for Information Science
o_/ 1990      Japan Advanced Institute of Science and Technology


--Multipart_Thu_Jul_17_15:48:15_2003-1
Content-Type: application/octet-stream
Content-Disposition: attachment; filename="ChangeLog.cygwin"
Content-Transfer-Encoding: 7bit
Content-length: 632

2003-07-17  Kazuhiro Fujieda  <fujieda@jaist.ac.jp>

	* fhandler.h (class dev_console): Add `metabit' indicating the
	current meta key mode.
	* fhandler_console.cc (fhandler_console::read): Set the top bit of
	the character if metabit is true.
	* fhandler_console.cc (fhandler_console::ioctl): Implement
	KDGKBMETA and KDSKBMETA commands.
	* fhandler_tty.cc (process_ioctl): Support KDSKBMETA. Set
	negative errno to ioctl_retval.
	(fhandler_tty_slave::ioctl): Send KDGKBMETA and KDSKBMETA to the
	master. Rewrite slightly to explicit whether the master is a
	console or not.
	* include/cygwin/kd.h: New file for the meta key mode.

--Multipart_Thu_Jul_17_15:48:15_2003-1
Content-Type: application/octet-stream
Content-Disposition: attachment; filename="ChangeLog.util"
Content-Transfer-Encoding: 7bit
Content-length: 122

2003-07-17  Kazuhiro Fujieda  <fujieda@jaist.ac.jp>

	* Makefile.in: Build setmetamode.exe.
	* setmetamode.c: New file. 	

--Multipart_Thu_Jul_17_15:48:15_2003-1
Content-Type: application/octet-stream; type=patch
Content-Disposition: attachment; filename="setmeta-cygwin.diff"
Content-Transfer-Encoding: 7bit
Content-length: 6113

Index: fhandler.h
===================================================================
RCS file: /cvs/src/src/winsup/cygwin/fhandler.h,v
retrieving revision 1.166
diff -u -p -r1.166 fhandler.h
--- fhandler.h	9 Jul 2003 01:33:06 -0000	1.166
+++ fhandler.h	17 Jul 2003 06:05:21 -0000
@@ -762,6 +762,7 @@ class dev_console
   int nargs_;
   unsigned rarg;
   bool saw_question_mark;
+  bool metabit;
 
   char my_title_buf [TITLESIZE + 1];
 
Index: fhandler_console.cc
===================================================================
RCS file: /cvs/src/src/winsup/cygwin/fhandler_console.cc,v
retrieving revision 1.111
diff -u -p -r1.111 fhandler_console.cc
--- fhandler_console.cc	16 Jun 2003 03:24:10 -0000	1.111
+++ fhandler_console.cc	17 Jul 2003 06:05:21 -0000
@@ -19,6 +19,7 @@ details. */
 #include <winnls.h>
 #include <ctype.h>
 #include <sys/cygwin.h>
+#include <cygwin/kd.h>
 #include "cygerrno.h"
 #include "security.h"
 #include "fhandler.h"
@@ -373,6 +374,11 @@ fhandler_console::read (void *pv, size_t
 		meta = (control_key_state & dev_state->meta_mask) != 0;
 	      if (!meta)
 		toadd = tmp + 1;
+	      else if (dev_state->metabit)
+		{
+		  tmp[1] |= 0x80; 
+		  toadd = tmp + 1;
+		}
 	      else
 		{
 		  tmp[0] = '\033';
@@ -714,6 +720,20 @@ fhandler_console::ioctl (unsigned int cm
 	return 0;
       case TIOCSWINSZ:
 	(void) bg_check (SIGTTOU);
+	return 0;
+      case KDGKBMETA:
+	*(int *) buf = (dev_state->metabit) ? K_METABIT : K_ESCPREFIX;
+	return 0;
+      case KDSKBMETA:
+	if ((int) buf == K_METABIT)
+	  dev_state->metabit = TRUE;
+	else if ((int) buf == K_ESCPREFIX)
+	  dev_state->metabit = FALSE;
+	else
+	  {
+	    set_errno (EINVAL);
+	    return -1;
+	  }
 	return 0;
     }
 
Index: fhandler_tty.cc
===================================================================
RCS file: /cvs/src/src/winsup/cygwin/fhandler_tty.cc,v
retrieving revision 1.100
diff -u -p -r1.100 fhandler_tty.cc
--- fhandler_tty.cc	3 Jul 2003 21:22:17 -0000	1.100
+++ fhandler_tty.cc	17 Jul 2003 06:05:22 -0000
@@ -26,6 +26,7 @@ details. */
 #include "cygheap.h"
 #include "shared_info.h"
 #include "cygwin/cygserver.h"
+#include "cygwin/kd.h"
 #include "cygthread.h"
 
 /* Tty master stuff */
@@ -417,9 +418,12 @@ process_ioctl (void *)
     {
       WaitForSingleObject (tty_master->ioctl_request_event, INFINITE);
       termios_printf ("ioctl() request");
-      tty_master->get_ttyp ()->ioctl_retval =
-      tty_master->console->ioctl (tty_master->get_ttyp ()->cmd,
-			     (void *) &tty_master->get_ttyp ()->arg);
+      tty_min *ttyp = tty_master->get_ttyp ();
+      /* KDSKBMETA use the arg as a int value. */
+      void *arg = (ttyp->cmd != KDSKBMETA)
+	?  &ttyp->arg : (void *) ttyp->arg.value;
+      if (tty_master->console->ioctl (ttyp->cmd, arg) < 0)
+	  ttyp->ioctl_retval = -get_errno (); 
       SetEvent (tty_master->ioctl_done_event);
     }
 }
@@ -996,42 +1000,66 @@ fhandler_tty_slave::ioctl (unsigned int 
       raise (SIGTTOU);
     }
 
+  get_ttyp ()->cmd = cmd;
+  get_ttyp ()->ioctl_retval = 0;
   switch (cmd)
     {
     case TIOCGWINSZ:
     case TIOCSWINSZ:
       break;
+    case KDGKBMETA:
+      if (ioctl_request_event)
+	{
+	  SetEvent (ioctl_request_event);
+	  if (ioctl_done_event)
+	    WaitForSingleObject (ioctl_done_event, INFINITE);
+	  *(int *) arg = get_ttyp ()->arg.value;
+	}
+      else
+	get_ttyp ()->ioctl_retval = -EINVAL;
+      goto out;
+    case KDSKBMETA:
+      if (ioctl_request_event)
+	{
+	  get_ttyp ()->arg.value = (int) arg;
+	  SetEvent (ioctl_request_event);
+	  if (ioctl_done_event)
+	    WaitForSingleObject (ioctl_done_event, INFINITE);
+	}
+      else
+	get_ttyp ()->ioctl_retval = -EINVAL;
+      goto out;
     case FIONBIO:
       set_nonblocking (*(int *) arg);
       goto out;
     default:
-      set_errno (EINVAL);
-      return -1;
+      get_ttyp ()->ioctl_retval = -EINVAL;
+      goto out;
     }
 
   acquire_output_mutex (INFINITE);
 
-  get_ttyp ()->cmd = cmd;
-  get_ttyp ()->ioctl_retval = 0;
   switch (cmd)
     {
     case TIOCGWINSZ:
-      get_ttyp ()->arg.winsize = get_ttyp ()->winsize;
       if (ioctl_request_event)
-	SetEvent (ioctl_request_event);
-      *(struct winsize *) arg = get_ttyp ()->arg.winsize;
-      if (ioctl_done_event)
-	WaitForSingleObject (ioctl_done_event, INFINITE);
-      get_ttyp ()->winsize = get_ttyp ()->arg.winsize;
+	{
+	  SetEvent (ioctl_request_event);
+	  if (ioctl_done_event)
+	    WaitForSingleObject (ioctl_done_event, INFINITE);
+	  *(struct winsize *) arg =
+	    get_ttyp ()->winsize = get_ttyp ()->arg.winsize;
+	}
+      else
+	*(struct winsize *) arg = get_ttyp ()->winsize;
       break;
     case TIOCSWINSZ:
       if (get_ttyp ()->winsize.ws_row != ((struct winsize *) arg)->ws_row
 	  || get_ttyp ()->winsize.ws_col != ((struct winsize *) arg)->ws_col)
 	{
-	  get_ttyp ()->arg.winsize = *(struct winsize *) arg;
 	  if (ioctl_request_event)
 	    {
-	      get_ttyp ()->ioctl_retval = -1;
+	      get_ttyp ()->arg.winsize = *(struct winsize *) arg;
 	      SetEvent (ioctl_request_event);
 	    }
 	  else
@@ -1048,8 +1076,14 @@ fhandler_tty_slave::ioctl (unsigned int 
   release_output_mutex ();
 
 out:
-  termios_printf ("%d = ioctl (%x)", get_ttyp ()->ioctl_retval, cmd);
-  return get_ttyp ()->ioctl_retval;
+  int retval = get_ttyp ()->ioctl_retval; 
+  if (retval < 0)
+    {
+      set_errno (-retval);
+      retval = -1;
+    }
+  termios_printf ("%d = ioctl (%x)", retval, cmd);
+  return retval;
 }
 
 /*******************************************************
--- /dev/null	2003-07-17 15:06:34.000000000 +0900
+++ include/cygwin/kd.h	2003-07-15 11:53:19.000000000 +0900
@@ -0,0 +1,20 @@
+/* cygwin/kd.h
+
+   Copyright 2003 Red Hat Inc.
+   Written by Kazuhiro Fujieda <fujieda@jaist.ac.jp>
+
+This file is part of Cygwin.
+
+This software is a copyrighted work licensed under the terms of the
+Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
+details. */
+
+#ifndef _CYGWIN_KD_H_
+#define _CYGWIN_KD_H_
+
+#define KDGKBMETA 0x4b62
+#define KDSKBMETA 0x4b63
+#define K_METABIT 0x03
+#define K_ESCPREFIX 0x04
+
+#endif

--Multipart_Thu_Jul_17_15:48:15_2003-1
Content-Type: application/octet-stream; type=patch
Content-Disposition: attachment; filename="setmeta-util.diff"
Content-Transfer-Encoding: 7bit
Content-length: 2564

Index: Makefile.in
===================================================================
RCS file: /cvs/src/src/winsup/utils/Makefile.in,v
retrieving revision 1.43
diff -u -p -r1.43 Makefile.in
--- Makefile.in	9 Mar 2003 19:29:22 -0000	1.43
+++ Makefile.in	17 Jul 2003 06:25:10 -0000
@@ -63,8 +63,8 @@ ALL_LDFLAGS:=-B$(newlib_build)/libc -B$(
 DUMPER_LDFLAGS:=$(ALL_LDFLAGS) $(DUMPER_LIB)
 
 PROGS:=	cygcheck.exe cygpath.exe getfacl.exe kill.exe mkgroup.exe \
-	mkpasswd.exe mount.exe passwd.exe ps.exe regtool.exe setfacl.exe \
-	ssp.exe strace.exe umount.exe
+	mkpasswd.exe mount.exe passwd.exe ps.exe regtool.exe \
+	setmetamode.exe setfacl.exe ssp.exe strace.exe umount.exe
 
 CLEAN_PROGS:=$(PROGS)
 ifdef build_dumper
--- /dev/null	2003-07-17 15:25:36.000000000 +0900
+++ setmetamode.c	2003-07-17 15:03:48.000000000 +0900
@@ -0,0 +1,82 @@
+/* setmetamode.c
+
+   Copyright 2003 Red Hat Inc.
+
+   Written by Kazuhiro Fujieda <fujieda@jaist.ac.jp>
+
+This file is part of Cygwin.
+
+This software is a copyrighted work licensed under the terms of the
+Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
+details. */
+
+#include <stdio.h>
+#include <string.h>
+#include <sys/ioctl.h>
+#include <cygwin/kd.h>
+
+static const char version[] = "$Revision$";
+static char *prog_name;
+
+static void
+usage (void)
+{
+  fprintf (stderr, "Usage: %s [metabit|escprefix]\n"
+	   "  Without argument, it shows the current meta key mode.\n"
+	   "  metabit|meta|bit     The meta key sets the top bit of the character.\n"
+	   "  escprefix|esc|prefix The meta key sends an escape prefix.\n",
+	   prog_name);
+}
+
+static void
+error (void)
+{
+  fprintf (stderr,
+	   "%s: The standard input isn't a console device.\n",
+	   prog_name);
+}
+
+int
+main (int ac, char *av[])
+{
+  int param;
+
+  prog_name = strrchr (av[0], '/');
+  if (!prog_name)
+    prog_name = strrchr (av[0], '\\');
+  if (!prog_name)
+    prog_name = av[0];
+  else
+    prog_name++;
+
+  if (ac < 2)
+    {
+      if (ioctl (0, KDGKBMETA, &param) < 0)
+	{
+	  error ();
+	  return 1;
+	}
+      if (param == 0x03)
+	puts ("metabit");
+      else
+	puts ("escprefix");
+      return 0;
+    }
+  if (!strcmp ("meta", av[1]) || !strcmp ("bit", av[1])
+      || !strcmp ("metabit", av[1]))
+    param = 0x03;
+  else if (!strcmp ("esc", av[1]) || !strcmp ("prefix", av[1])
+	   || !strcmp ("escprefix", av[1]))
+    param = 0x04;
+  else
+    {
+      usage ();
+      return 1;
+    }
+  if (ioctl (0, KDSKBMETA, param) < 0)
+    {
+      error ();
+      return 1;
+    }
+  return 0;
+}

--Multipart_Thu_Jul_17_15:48:15_2003-1--
