Return-Path: <cygwin-patches-return-8130-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 86801 invoked by alias); 22 Apr 2015 10:57:02 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Id: <cygwin-patches.cygwin.com>
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sourceware.org/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sourceware.org/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Mail-Followup-To: cygwin-patches@cygwin.com
Received: (qmail 86781 invoked by uid 89); 22 Apr 2015 10:57:01 -0000
Authentication-Results: sourceware.org; auth=none
X-Virus-Found: No
X-Spam-SWARE-Status: No, score=-1.6 required=5.0 tests=AWL,BAYES_00,RCVD_IN_SORBS_DUL,SPF_PASS autolearn=ham version=3.3.2
X-HELO: conuserg001-v.nifty.com
Received: from conuserg001.nifty.com (HELO conuserg001-v.nifty.com) (202.248.45.242) by sourceware.org (qpsmtpd/0.93/v0.84-503-g423c35a) with (DES-CBC3-SHA encrypted) ESMTPS; Wed, 22 Apr 2015 10:56:59 +0000
Received: from Express5800-S70 (ntsitm305199.sitm.nt.ftth.ppp.infoweb.ne.jp [121.93.68.199]) (authenticated)	by conuserg001-v.nifty.com with ESMTP id t3MAuRiN025302	for <cygwin-patches@cygwin.com>; Wed, 22 Apr 2015 19:56:28 +0900
X-Nifty-SrcIP: [121.93.68.199]
Date: Wed, 22 Apr 2015 10:57:00 -0000
From: Takashi Yano <takashi.yano@nifty.ne.jp>
To: cygwin-patches@cygwin.com
Subject: Re: Cygwin hangs up if several keys are typed during outputting a lot of texts.
Message-Id: <20150422195703.5f51c2730a86f2a3cc258a71@nifty.ne.jp>
In-Reply-To: <20150420151230.GS3657@calimero.vinschen.de>
References: <20150404084354.GX13285@calimero.vinschen.de>	<20150405205504.cda3df2cc76f7bca7c3d21fb@nifty.ne.jp>	<20150407091113.GB2819@calimero.vinschen.de>	<20150413193100.a393612bde79a4ae57b8c7d9@nifty.ne.jp>	<20150414073456.GY7343@calimero.vinschen.de>	<20150416092618.9975c0e29b8703dbd8d4aa6a@nifty.ne.jp>	<20150416090533.GB3657@calimero.vinschen.de>	<20150417202746.351d90441d2d41fb316c07a9@nifty.ne.jp>	<20150417121052.GY3657@calimero.vinschen.de>	<20150420204015.4b03088d042dcda3774d874b@nifty.ne.jp>	<20150420151230.GS3657@calimero.vinschen.de>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="Multipart=_Wed__22_Apr_2015_19_57_03_+0900_v+HRqkQKJLnwpAk="
X-IsSubscribed: yes
X-SW-Source: 2015-q2/txt/msg00031.txt.bz2

This is a multi-part message in MIME format.

--Multipart=_Wed__22_Apr_2015_19_57_03_+0900_v+HRqkQKJLnwpAk=
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Content-length: 3917

Hi Corinna,

On Mon, 20 Apr 2015 17:12:30 +0200
Corinna Vinschen <corinna-cygwin@cygwin.com> wrote:

> Ok.  Let's go with that.  Can you please rename handle2/master2 to
> handle_cyg/master_cyg and resend the patch to the cygwin-patches
> mailing list?

Please find a patch attached. ChangeLog is as follows.

2015-04-22  Takashi Yano  <takashi.yano@nifty.ne.jp>

	* fhandler.h (class fhandler_base): Add virtual function
	get_io_handle_cyg() to get handle from which OPOST-processed output is
	read on PTY master.
	(class fhandler_pty_slave): Add variable output_handle_cyg to store a
	handle to which OPOST-processed output is written. Add two functions,
	i.e., set_output_handle_cyg() and get_output_handle_cyg(), regarding
	variable output_handle_cyg. Now, output_handle is used only by native
	windows program. The data before OPOST-processing is written to
	output_handle and OPOST-processing is applied in the master-side. For a
	cygwin process, OPOST-processing is applied in the slave-side, and the
	data after OPOST-processing is written to output_handle_cyg.
	(class fhandler_pty_master): Add two variables, i.e., io_handle_cyg and
	to_master_cyg, to store handles of a pipe through which OPOST-processed
	output passes. Add pty_master_fwd_thread and function
	pty_master_fwd_thread() for a thread which applies OPOST-processing
	and forwards data from io_handle to to_master_cyg. Add function
	get_io_handle_cyg() regarding variable io_handle_cyg. Now, the pipe
	between io_handle and to_master are used only by native windows program
	for applying OPOST-processing in the master-side. For a cygwin process,
	the pipe between io_handle_cyg and to_master_cyg is used for passing
	through the data which is applied OPOST-processing in the slave-side.
	* fhandler_tty.cc (struct pipe_reply): Add member to_master_cyg.
	(fhandler_pty_master::process_slave_output): Read slave output from
	io_handle_cyg rather than io_handle.
	(fhandler_pty_slave::fhandler_pty_salve): Initialize output_handle_cyg.
	(fhandler_pty_slave::open): Set output_handle_cyg by duplicating handle
	to_master_cyg on PTY master.
	(fhandler_pty_slave::close): Close handle output_handle_cyg.
	(fhandler_pty_slave::write): Write data to output_handle_cyg rather
	than output_handle.
	(fhandler_pty_slave::fch_close_handles): Close handle output_handle_cyg.
	(fhandler_pty_master::fhandler_pty_master): Initialize io_handle_cyg,
	to_master_cyg and master_fwd_thread.
	(fhandler_pty_master::cleanup): Clean up to_master_cyg as well.
	(fhandler_pty_master::close): Print to_master_cyg as well in debug
	message. Terminate master forwarding thread. Close handles
	to_master_cyg and io_handle_cyg.
	(fhandler_pty_master::ioctl): Use io_handle_cyg rather than to_master.
	(fhandler_pty_master::pty_master_thread): Add code for duplicating
	handle to_master_cyg.
	(fhandler_pty_master::pty_master_fwd_thread): New function for a thread
	to forward OPOST-processed data from io_handle to to_master_cyg.  This
	thread applies OPOST-processing to the output of native windows program.
	(::pty_master_fwd_thread): Ditto.
	(fhandler_pty_master::setup): Create a new pipe to pass thruegh OPOST-
	processed output. Create new thread to forward data from io_handle to
	to_master_cyg. Set handle to_master_cyg to tty. Print io_handle_cyg as
	well in debug message. Close handles io_handle_cyg and to_master_cyg in
	case of error.
	(fhandler_pty_master::fixup_after_fork): Set handle to_master_cyg to
	tty. Copy handle to_master_cyg from arch->to_master_cyg.
	(fhandler_pty_master::fixup_after_exec): Clean up to_master_cyg.
	* select.cc: Check handle returned by get_io_handle_cyg() rather than
	get_handle().
	* tty.h (class tty): Add variable _to_master_cyg to store a handle to
	which OPOST-processed data is written. Add two functions,
	to_master_cyg() and set_to_master_cyg(), regarding _to_master_cyg.


-- 
Takashi Yano <takashi.yano@nifty.ne.jp>

--Multipart=_Wed__22_Apr_2015_19_57_03_+0900_v+HRqkQKJLnwpAk=
Content-Type: application/octet-stream;
 name="cygwin.patch.20150422-2"
Content-Disposition: attachment;
 filename="cygwin.patch.20150422-2"
Content-Transfer-Encoding: base64
Content-length: 19817

ZGlmZiAtLWdpdCBhL3dpbnN1cC9jeWd3aW4vZmhhbmRsZXIuaCBiL3dpbnN1
cC9jeWd3aW4vZmhhbmRsZXIuaAppbmRleCAwNTI2OWU1Li5kYjNjZWY1IDEw
MDY0NAotLS0gYS93aW5zdXAvY3lnd2luL2ZoYW5kbGVyLmgKKysrIGIvd2lu
c3VwL2N5Z3dpbi9maGFuZGxlci5oCkBAIC00MTIsNiArNDEyLDcgQEAgcHVi
bGljOgogICAgICB0aGF0IHNvbWUgZmQncyBoYXZlIHR3byBoYW5kbGVzLiAq
LwogICB2aXJ0dWFsIEhBTkRMRSYgZ2V0X2hhbmRsZSAoKSB7IHJldHVybiBp
b19oYW5kbGU7IH0KICAgdmlydHVhbCBIQU5ETEUmIGdldF9pb19oYW5kbGUg
KCkgeyByZXR1cm4gaW9faGFuZGxlOyB9CisgIHZpcnR1YWwgSEFORExFJiBn
ZXRfaW9faGFuZGxlX2N5ZyAoKSB7IHJldHVybiBpb19oYW5kbGU7IH0KICAg
dmlydHVhbCBIQU5ETEUmIGdldF9vdXRwdXRfaGFuZGxlICgpIHsgcmV0dXJu
IGlvX2hhbmRsZTsgfQogICB2aXJ0dWFsIEhBTkRMRSBnZXRfc3RhdF9oYW5k
bGUgKCkgeyByZXR1cm4gcGMuaGFuZGxlICgpID86IGlvX2hhbmRsZTsgfQog
ICB2aXJ0dWFsIEhBTkRMRSBnZXRfZWNob19oYW5kbGUgKCkgY29uc3QgeyBy
ZXR1cm4gTlVMTDsgfQpAQCAtMTUxNiw2ICsxNTE3LDcgQEAgY2xhc3MgZmhh
bmRsZXJfcHR5X2NvbW1vbjogcHVibGljIGZoYW5kbGVyX3Rlcm1pb3MKIGNs
YXNzIGZoYW5kbGVyX3B0eV9zbGF2ZTogcHVibGljIGZoYW5kbGVyX3B0eV9j
b21tb24KIHsKICAgSEFORExFIGludXNlOwkJCS8vIHVzZWQgdG8gaW5kaWNh
dGUgdGhhdCBhIHR0eSBpcyBpbiB1c2UKKyAgSEFORExFIG91dHB1dF9oYW5k
bGVfY3lnOwogCiAgIC8qIEhlbHBlciBmdW5jdGlvbnMgZm9yIGZjaG1vZCBh
bmQgZmNob3duLiAqLwogICBib29sIGZjaF9vcGVuX2hhbmRsZXMgKGJvb2wg
Y2hvd24pOwpAQCAtMTUyNiw2ICsxNTI4LDkgQEAgY2xhc3MgZmhhbmRsZXJf
cHR5X3NsYXZlOiBwdWJsaWMgZmhhbmRsZXJfcHR5X2NvbW1vbgogICAvKiBD
b25zdHJ1Y3RvciAqLwogICBmaGFuZGxlcl9wdHlfc2xhdmUgKGludCk7CiAK
KyAgdm9pZCBzZXRfb3V0cHV0X2hhbmRsZV9jeWcgKEhBTkRMRSBoKSB7IG91
dHB1dF9oYW5kbGVfY3lnID0gaDsgfQorICBIQU5ETEUmIGdldF9vdXRwdXRf
aGFuZGxlX2N5ZyAoKSB7IHJldHVybiBvdXRwdXRfaGFuZGxlX2N5ZzsgfQor
CiAgIGludCBvcGVuIChpbnQgZmxhZ3MsIG1vZGVfdCBtb2RlID0gMCk7CiAg
IHZvaWQgb3Blbl9zZXR1cCAoaW50IGZsYWdzKTsKICAgc3NpemVfdCBfX3N0
ZGNhbGwgd3JpdGUgKGNvbnN0IHZvaWQgKnB0ciwgc2l6ZV90IGxlbik7CkBA
IC0xNTc2LDEzICsxNTgxLDE3IEBAIGNsYXNzIGZoYW5kbGVyX3B0eV9tYXN0
ZXI6IHB1YmxpYyBmaGFuZGxlcl9wdHlfY29tbW9uCiAgIEhBTkRMRSBmcm9t
X21hc3RlciwgdG9fbWFzdGVyOwogICBIQU5ETEUgZWNob19yLCBlY2hvX3c7
CiAgIERXT1JEIGR3UHJvY2Vzc0lkOwkJLy8gT3duZXIgb2YgbWFzdGVyIGhh
bmRsZXMKKyAgSEFORExFIGlvX2hhbmRsZV9jeWcsIHRvX21hc3Rlcl9jeWc7
CisgIGN5Z3RocmVhZCAqbWFzdGVyX2Z3ZF90aHJlYWQ7CS8vIE1hc3RlciBm
b3J3YXJkaW5nIHRocmVhZAogCiBwdWJsaWM6CiAgIEhBTkRMRSBnZXRfZWNo
b19oYW5kbGUgKCkgY29uc3QgeyByZXR1cm4gZWNob19yOyB9CisgIEhBTkRM
RSYgZ2V0X2lvX2hhbmRsZV9jeWcgKCkgeyByZXR1cm4gaW9faGFuZGxlX2N5
ZzsgfQogICAvKiBDb25zdHJ1Y3RvciAqLwogICBmaGFuZGxlcl9wdHlfbWFz
dGVyIChpbnQpOwogCiAgIERXT1JEIHB0eV9tYXN0ZXJfdGhyZWFkICgpOwor
ICBEV09SRCBwdHlfbWFzdGVyX2Z3ZF90aHJlYWQgKCk7CiAgIGludCBwcm9j
ZXNzX3NsYXZlX291dHB1dCAoY2hhciAqYnVmLCBzaXplX3QgbGVuLCBpbnQg
cGt0bW9kZV9vbik7CiAgIHZvaWQgZG9lY2hvIChjb25zdCB2b2lkICpzdHIs
IERXT1JEIGxlbik7CiAgIGludCBhY2NlcHRfaW5wdXQgKCk7CmRpZmYgLS1n
aXQgYS93aW5zdXAvY3lnd2luL2ZoYW5kbGVyX3R0eS5jYyBiL3dpbnN1cC9j
eWd3aW4vZmhhbmRsZXJfdHR5LmNjCmluZGV4IGQyNDNkNTEuLmQ2YjJlMTkg
MTAwNjQ0Ci0tLSBhL3dpbnN1cC9jeWd3aW4vZmhhbmRsZXJfdHR5LmNjCisr
KyBiL3dpbnN1cC9jeWd3aW4vZmhhbmRsZXJfdHR5LmNjCkBAIC00Myw2ICs0
Myw3IEBAIHN0cnVjdCBwaXBlX3JlcXVlc3Qgewogc3RydWN0IHBpcGVfcmVw
bHkgewogICBIQU5ETEUgZnJvbV9tYXN0ZXI7CiAgIEhBTkRMRSB0b19tYXN0
ZXI7CisgIEhBTkRMRSB0b19tYXN0ZXJfY3lnOwogICBEV09SRCBlcnJvcjsK
IH07CiAKQEAgLTIzNyw3ICsyMzgsNyBAQCBmaGFuZGxlcl9wdHlfbWFzdGVy
Ojpwcm9jZXNzX3NsYXZlX291dHB1dCAoY2hhciAqYnVmLCBzaXplX3QgbGVu
LCBpbnQgcGt0bW9kZV9vbgogCSAgLyogQ2hlY2sgZWNobyBwaXBlIGZpcnN0
LiAqLwogCSAgaWYgKDo6Ynl0ZXNfYXZhaWxhYmxlIChlY2hvX2NudCwgZWNo
b19yKSAmJiBlY2hvX2NudCA+IDApCiAJICAgIGJyZWFrOwotCSAgaWYgKCFi
eXRlc19hdmFpbGFibGUgKG4pKQorCSAgaWYgKCE6OmJ5dGVzX2F2YWlsYWJs
ZSAobiwgZ2V0X2lvX2hhbmRsZV9jeWcgKCkpKQogCSAgICBnb3RvIGVycjsK
IAkgIGlmIChuKQogCSAgICBicmVhazsKQEAgLTI5OCw3ICsyOTksNyBAQCBm
aGFuZGxlcl9wdHlfbWFzdGVyOjpwcm9jZXNzX3NsYXZlX291dHB1dCAoY2hh
ciAqYnVmLCBzaXplX3QgbGVuLCBpbnQgcGt0bW9kZV9vbgogCSAgICAgIGdv
dG8gZXJyOwogCSAgICB9CiAJfQotICAgICAgZWxzZSBpZiAoIVJlYWRGaWxl
IChnZXRfaGFuZGxlICgpLCBvdXRidWYsIHJsZW4sICZuLCBOVUxMKSkKKyAg
ICAgIGVsc2UgaWYgKCFSZWFkRmlsZSAoZ2V0X2lvX2hhbmRsZV9jeWcgKCks
IG91dGJ1ZiwgcmxlbiwgJm4sIE5VTEwpKQogCXsKIAkgIHRlcm1pb3NfcHJp
bnRmICgiUmVhZEZpbGUgZmFpbGVkLCAlRSIpOwogCSAgZ290byBlcnI7CkBA
IC0zMzMsNyArMzM0LDcgQEAgb3V0OgogLyogcHR5IHNsYXZlIHN0dWZmICov
CiAKIGZoYW5kbGVyX3B0eV9zbGF2ZTo6ZmhhbmRsZXJfcHR5X3NsYXZlIChp
bnQgdW5pdCkKLSAgOiBmaGFuZGxlcl9wdHlfY29tbW9uICgpLCBpbnVzZSAo
TlVMTCkKKyAgOiBmaGFuZGxlcl9wdHlfY29tbW9uICgpLCBpbnVzZSAoTlVM
TCksIG91dHB1dF9oYW5kbGVfY3lnIChOVUxMKQogewogICBpZiAodW5pdCA+
PSAwKQogICAgIGRldiAoKS5wYXJzZSAoREVWX1BUWVNfTUFKT1IsIHVuaXQp
OwpAQCAtMzQyLDExICszNDMsMTEgQEAgZmhhbmRsZXJfcHR5X3NsYXZlOjpm
aGFuZGxlcl9wdHlfc2xhdmUgKGludCB1bml0KQogaW50CiBmaGFuZGxlcl9w
dHlfc2xhdmU6Om9wZW4gKGludCBmbGFncywgbW9kZV90KQogewotICBIQU5E
TEUgcHR5X293bmVyLCBmcm9tX21hc3Rlcl9sb2NhbCwgdG9fbWFzdGVyX2xv
Y2FsOworICBIQU5ETEUgcHR5X293bmVyLCBmcm9tX21hc3Rlcl9sb2NhbCwg
dG9fbWFzdGVyX2xvY2FsLCB0b19tYXN0ZXJfY3lnX2xvY2FsOwogICBIQU5E
TEUgKmhhbmRsZXNbXSA9CiAgIHsKICAgICAmZnJvbV9tYXN0ZXJfbG9jYWws
ICZpbnB1dF9hdmFpbGFibGVfZXZlbnQsICZpbnB1dF9tdXRleCwgJmludXNl
LAotICAgICZvdXRwdXRfbXV0ZXgsICZ0b19tYXN0ZXJfbG9jYWwsICZwdHlf
b3duZXIsCisgICAgJm91dHB1dF9tdXRleCwgJnRvX21hc3Rlcl9sb2NhbCwg
JnB0eV9vd25lciwgJnRvX21hc3Rlcl9jeWdfbG9jYWwsCiAgICAgTlVMTAog
ICB9OwogCkBAIC0zOTcsNyArMzk4LDggQEAgZmhhbmRsZXJfcHR5X3NsYXZl
OjpvcGVuIChpbnQgZmxhZ3MsIG1vZGVfdCkKICAgICByZWxlYXNlX291dHB1
dF9tdXRleCAoKTsKICAgfQogCi0gIGlmICghZ2V0X3R0eXAgKCktPmZyb21f
bWFzdGVyICgpIHx8ICFnZXRfdHR5cCAoKS0+dG9fbWFzdGVyICgpKQorICBp
ZiAoIWdldF90dHlwICgpLT5mcm9tX21hc3RlciAoKSB8fAorICAgICAgIWdl
dF90dHlwICgpLT50b19tYXN0ZXIgKCkgfHwgIWdldF90dHlwICgpLT50b19t
YXN0ZXJfY3lnICgpKQogICAgIHsKICAgICAgIGVycm1zZyA9ICJwdHkgaGFu
ZGxlcyBoYXZlIGJlZW4gY2xvc2VkIjsKICAgICAgIHNldF9lcnJubyAoRUFD
Q0VTKTsKQEAgLTQ0OCw2ICs0NTAsMTMgQEAgZmhhbmRsZXJfcHR5X3NsYXZl
OjpvcGVuIChpbnQgZmxhZ3MsIG1vZGVfdCkKIAkgIGVycm1zZyA9ICJjYW4n
dCBkdXBsaWNhdGUgb3V0cHV0LCAlRSI7CiAJICBnb3RvIGVycjsKIAl9Cisg
ICAgICBpZiAoIUR1cGxpY2F0ZUhhbmRsZSAocHR5X293bmVyLCBnZXRfdHR5
cCAoKS0+dG9fbWFzdGVyX2N5ZyAoKSwKKwkJCSAgR2V0Q3VycmVudFByb2Nl
c3MgKCksICZ0b19tYXN0ZXJfY3lnX2xvY2FsLCAwLCBUUlVFLAorCQkJICBE
VVBMSUNBVEVfU0FNRV9BQ0NFU1MpKQorCXsKKwkgIGVycm1zZyA9ICJjYW4n
dCBkdXBsaWNhdGUgb3V0cHV0IGZvciBjeWd3aW4sICVFIjsKKwkgIGdvdG8g
ZXJyOworCX0KICAgICAgIGlmIChwdHlfb3duZXIgIT0gR2V0Q3VycmVudFBy
b2Nlc3MgKCkpCiAJQ2xvc2VIYW5kbGUgKHB0eV9vd25lcik7CiAgICAgfQpA
QCAtNDY4LDcgKzQ3Nyw4IEBAIGZoYW5kbGVyX3B0eV9zbGF2ZTo6b3BlbiAo
aW50IGZsYWdzLCBtb2RlX3QpCiAJfQogICAgICAgZnJvbV9tYXN0ZXJfbG9j
YWwgPSByZXBsLmZyb21fbWFzdGVyOwogICAgICAgdG9fbWFzdGVyX2xvY2Fs
ID0gcmVwbC50b19tYXN0ZXI7Ci0gICAgICBpZiAoIWZyb21fbWFzdGVyX2xv
Y2FsIHx8ICF0b19tYXN0ZXJfbG9jYWwpCisgICAgICB0b19tYXN0ZXJfY3ln
X2xvY2FsID0gcmVwbC50b19tYXN0ZXJfY3lnOworICAgICAgaWYgKCFmcm9t
X21hc3Rlcl9sb2NhbCB8fCAhdG9fbWFzdGVyX2xvY2FsIHx8ICF0b19tYXN0
ZXJfY3lnX2xvY2FsKQogCXsKIAkgIFNldExhc3RFcnJvciAocmVwbC5lcnJv
cik7CiAJICBlcnJtc2cgPSAiZXJyb3IgZHVwbGljYXRpbmcgcGlwZXMsICVF
IjsKQEAgLTQ3NywxNCArNDg3LDE4IEBAIGZoYW5kbGVyX3B0eV9zbGF2ZTo6
b3BlbiAoaW50IGZsYWdzLCBtb2RlX3QpCiAgICAgfQogICBWZXJpZnlIYW5k
bGUgKGZyb21fbWFzdGVyX2xvY2FsKTsKICAgVmVyaWZ5SGFuZGxlICh0b19t
YXN0ZXJfbG9jYWwpOworICBWZXJpZnlIYW5kbGUgKHRvX21hc3Rlcl9jeWdf
bG9jYWwpOwogCiAgIHRlcm1pb3NfcHJpbnRmICgiZHVwbGljYXRlZCBmcm9t
X21hc3RlciAlcC0+JXAgZnJvbSBwdHlfb3duZXIiLAogCQkgIGdldF90dHlw
ICgpLT5mcm9tX21hc3RlciAoKSwgZnJvbV9tYXN0ZXJfbG9jYWwpOwogICB0
ZXJtaW9zX3ByaW50ZiAoImR1cGxpY2F0ZWQgdG9fbWFzdGVyICVwLT4lcCBm
cm9tIHB0eV9vd25lciIsCiAJCSAgZ2V0X3R0eXAgKCktPnRvX21hc3RlciAo
KSwgdG9fbWFzdGVyX2xvY2FsKTsKKyAgdGVybWlvc19wcmludGYgKCJkdXBs
aWNhdGVkIHRvX21hc3Rlcl9jeWcgJXAtPiVwIGZyb20gcHR5X293bmVyIiwK
KwkJICBnZXRfdHR5cCAoKS0+dG9fbWFzdGVyX2N5ZyAoKSwgdG9fbWFzdGVy
X2N5Z19sb2NhbCk7CiAKICAgc2V0X2lvX2hhbmRsZSAoZnJvbV9tYXN0ZXJf
bG9jYWwpOwogICBzZXRfb3V0cHV0X2hhbmRsZSAodG9fbWFzdGVyX2xvY2Fs
KTsKKyAgc2V0X291dHB1dF9oYW5kbGVfY3lnICh0b19tYXN0ZXJfY3lnX2xv
Y2FsKTsKIAogICBmaGFuZGxlcl9jb25zb2xlOjpuZWVkX2ludmlzaWJsZSAo
KTsKICAgc2V0X29wZW5fc3RhdHVzICgpOwpAQCAtNTMzLDYgKzU0Nyw5IEBA
IGZoYW5kbGVyX3B0eV9zbGF2ZTo6Y2xvc2UgKCkKICAgICB0ZXJtaW9zX3By
aW50ZiAoIkNsb3NlSGFuZGxlIChpbnVzZSksICVFIik7CiAgIGlmICghRm9y
Y2VDbG9zZUhhbmRsZSAoaW5wdXRfYXZhaWxhYmxlX2V2ZW50KSkKICAgICB0
ZXJtaW9zX3ByaW50ZiAoIkNsb3NlSGFuZGxlIChpbnB1dF9hdmFpbGFibGVf
ZXZlbnQ8JXA+KSwgJUUiLCBpbnB1dF9hdmFpbGFibGVfZXZlbnQpOworICBp
ZiAoIUZvcmNlQ2xvc2VIYW5kbGUgKGdldF9vdXRwdXRfaGFuZGxlX2N5ZyAo
KSkpCisgICAgdGVybWlvc19wcmludGYgKCJDbG9zZUhhbmRsZSAoZ2V0X291
dHB1dF9oYW5kbGVfY3lnICgpPCVwPiksICVFIiwKKwlnZXRfb3V0cHV0X2hh
bmRsZV9jeWcgKCkpOwogICBpZiAoKHVuc2lnbmVkKSBteXNlbGYtPmN0dHkg
PT0gRkhERVYgKERFVl9QVFlTX01BSk9SLCBnZXRfbWlub3IgKCkpKQogICAg
IGZoYW5kbGVyX2NvbnNvbGU6OmZyZWVfY29uc29sZSAoKTsJLyogYXNzdW1l
cyB0aGF0IHdlIGFyZSB0aGUgbGFzdCBwdHkgY2xvc2VyICovCiAgIHJldHVy
biBmaGFuZGxlcl9wdHlfY29tbW9uOjpjbG9zZSAoKTsKQEAgLTU5MSw3ICs2
MDgsNyBAQCBmaGFuZGxlcl9wdHlfc2xhdmU6OndyaXRlIChjb25zdCB2b2lk
ICpwdHIsIHNpemVfdCBsZW4pCiAKICAgcHVzaF9wcm9jZXNzX3N0YXRlIHBy
b2Nlc3Nfc3RhdGUgKFBJRF9UVFlPVSk7CiAKLSAgaWYgKCFwcm9jZXNzX29w
b3N0X291dHB1dCAoZ2V0X291dHB1dF9oYW5kbGUgKCksIHB0ciwgdG93cml0
ZSwgZmFsc2UpKQorICBpZiAoIXByb2Nlc3Nfb3Bvc3Rfb3V0cHV0IChnZXRf
b3V0cHV0X2hhbmRsZV9jeWcgKCksIHB0ciwgdG93cml0ZSwgZmFsc2UpKQog
ICAgIHsKICAgICAgIERXT1JEIGVyciA9IEdldExhc3RFcnJvciAoKTsKICAg
ICAgIHRlcm1pb3NfcHJpbnRmICgiV3JpdGVGaWxlIGZhaWxlZCwgJUUiKTsK
QEAgLTExMjUsNiArMTE0Miw3IEBAIGZoYW5kbGVyX3B0eV9zbGF2ZTo6ZmNo
X2Nsb3NlX2hhbmRsZXMgKCkKIHsKICAgY2xvc2VfbWF5YmUgKGdldF9pb19o
YW5kbGUgKCkpOwogICBjbG9zZV9tYXliZSAoZ2V0X291dHB1dF9oYW5kbGUg
KCkpOworICBjbG9zZV9tYXliZSAoZ2V0X291dHB1dF9oYW5kbGVfY3lnICgp
KTsKICAgY2xvc2VfbWF5YmUgKGlucHV0X2F2YWlsYWJsZV9ldmVudCk7CiAg
IGNsb3NlX21heWJlIChvdXRwdXRfbXV0ZXgpOwogICBjbG9zZV9tYXliZSAo
aW5wdXRfbXV0ZXgpOwpAQCAtMTIwMCw3ICsxMjE4LDggQEAgZXJyb3V0Ogog
ZmhhbmRsZXJfcHR5X21hc3Rlcjo6ZmhhbmRsZXJfcHR5X21hc3RlciAoaW50
IHVuaXQpCiAgIDogZmhhbmRsZXJfcHR5X2NvbW1vbiAoKSwgcGt0bW9kZSAo
MCksIG1hc3Rlcl9jdGwgKE5VTEwpLAogICAgIG1hc3Rlcl90aHJlYWQgKE5V
TEwpLCBmcm9tX21hc3RlciAoTlVMTCksIHRvX21hc3RlciAoTlVMTCksCi0g
ICAgZWNob19yIChOVUxMKSwgZWNob193IChOVUxMKSwgZHdQcm9jZXNzSWQg
KDApCisgICAgZWNob19yIChOVUxMKSwgZWNob193IChOVUxMKSwgZHdQcm9j
ZXNzSWQgKDApLAorICAgIGlvX2hhbmRsZV9jeWcgKE5VTEwpLCB0b19tYXN0
ZXJfY3lnIChOVUxMKSwgbWFzdGVyX2Z3ZF90aHJlYWQgKE5VTEwpCiB7CiAg
IGlmICh1bml0ID49IDApCiAgICAgZGV2ICgpLnBhcnNlIChERVZfUFRZTV9N
QUpPUiwgdW5pdCk7CkBAIC0xMjU4LDE1ICsxMjc3LDE1IEBAIGZoYW5kbGVy
X3B0eV9tYXN0ZXI6OmNsZWFudXAgKCkKIHsKICAgcmVwb3J0X3R0eV9jb3Vu
dHMgKHRoaXMsICJjbG9zaW5nIG1hc3RlciIsICIiKTsKICAgaWYgKGFyY2hl
dHlwZSkKLSAgICBmcm9tX21hc3RlciA9IHRvX21hc3RlciA9IE5VTEw7Cisg
ICAgZnJvbV9tYXN0ZXIgPSB0b19tYXN0ZXIgPSB0b19tYXN0ZXJfY3lnID0g
TlVMTDsKICAgZmhhbmRsZXJfYmFzZTo6Y2xlYW51cCAoKTsKIH0KIAogaW50
CiBmaGFuZGxlcl9wdHlfbWFzdGVyOjpjbG9zZSAoKQogewotICB0ZXJtaW9z
X3ByaW50ZiAoImNsb3NpbmcgZnJvbV9tYXN0ZXIoJXApL3RvX21hc3Rlcigl
cCkgc2luY2Ugd2Ugb3duIHRoZW0oJXUpIiwKLQkJICBmcm9tX21hc3Rlciwg
dG9fbWFzdGVyLCBkd1Byb2Nlc3NJZCk7CisgIHRlcm1pb3NfcHJpbnRmICgi
Y2xvc2luZyBmcm9tX21hc3RlciglcCkvdG9fbWFzdGVyKCVwKS90b19tYXN0
ZXJfY3lnKCVwKSBzaW5jZSB3ZSBvd24gdGhlbSgldSkiLAorCQkgIGZyb21f
bWFzdGVyLCB0b19tYXN0ZXIsIHRvX21hc3Rlcl9jeWcsIGR3UHJvY2Vzc0lk
KTsKICAgaWYgKGN5Z3dpbl9maW5pc2hlZF9pbml0aWFsaXppbmcpCiAgICAg
ewogICAgICAgaWYgKG1hc3Rlcl9jdGwgJiYgZ2V0X3R0eXAgKCktPm1hc3Rl
cl9waWQgPT0gbXlzZWxmLT5waWQpCkBAIC0xMjg5LDYgKzEzMDgsNyBAQCBm
aGFuZGxlcl9wdHlfbWFzdGVyOjpjbG9zZSAoKQogCSAgICAgIG1hc3Rlcl9j
dGwgPSBOVUxMOwogCSAgICB9CiAJICByZWxlYXNlX291dHB1dF9tdXRleCAo
KTsKKwkgIG1hc3Rlcl9md2RfdGhyZWFkLT50ZXJtaW5hdGVfdGhyZWFkICgp
OwogCX0KICAgICB9CiAKQEAgLTEzMDUsNiArMTMyNSwxMSBAQCBmaGFuZGxl
cl9wdHlfbWFzdGVyOjpjbG9zZSAoKQogICBpZiAoIUZvcmNlQ2xvc2VIYW5k
bGUgKHRvX21hc3RlcikpCiAgICAgdGVybWlvc19wcmludGYgKCJlcnJvciBj
bG9zaW5nIHRvX21hc3RlciAlcCwgJUUiLCB0b19tYXN0ZXIpOwogICBmcm9t
X21hc3RlciA9IHRvX21hc3RlciA9IE5VTEw7CisgIGlmICghRm9yY2VDbG9z
ZUhhbmRsZSAoZ2V0X2lvX2hhbmRsZV9jeWcgKCkpKQorICAgIHRlcm1pb3Nf
cHJpbnRmICgiZXJyb3IgY2xvc2luZyBpb19oYW5kbGVfY3lnICVwLCAlRSIs
IGdldF9pb19oYW5kbGVfY3lnICgpKTsKKyAgaWYgKCFGb3JjZUNsb3NlSGFu
ZGxlICh0b19tYXN0ZXJfY3lnKSkKKyAgICB0ZXJtaW9zX3ByaW50ZiAoImVy
cm9yIGNsb3NpbmcgdG9fbWFzdGVyX2N5ZyAlcCwgJUUiLCB0b19tYXN0ZXJf
Y3lnKTsKKyAgZ2V0X2lvX2hhbmRsZV9jeWcgKCkgPSB0b19tYXN0ZXJfY3ln
ID0gTlVMTDsKICAgRm9yY2VDbG9zZUhhbmRsZSAoZWNob19yKTsKICAgRm9y
Y2VDbG9zZUhhbmRsZSAoZWNob193KTsKICAgZWNob19yID0gZWNob193ID0g
TlVMTDsKQEAgLTE0MTEsNyArMTQzNiw3IEBAIGZoYW5kbGVyX3B0eV9tYXN0
ZXI6OmlvY3RsICh1bnNpZ25lZCBpbnQgY21kLCB2b2lkICphcmcpCiAgICAg
Y2FzZSBGSU9OUkVBRDoKICAgICAgIHsKIAlEV09SRCBuOwotCWlmICghOjpi
eXRlc19hdmFpbGFibGUgKG4sIHRvX21hc3RlcikpCisJaWYgKCE6OmJ5dGVz
X2F2YWlsYWJsZSAobiwgZ2V0X2lvX2hhbmRsZV9jeWcgKCkpKQogCSAgewog
CSAgICBzZXRfZXJybm8gKEVJTlZBTCk7CiAJICAgIHJldHVybiAtMTsKQEAg
LTE1ODEsNiArMTYwNiwxMyBAQCBmaGFuZGxlcl9wdHlfbWFzdGVyOjpwdHlf
bWFzdGVyX3RocmVhZCAoKQogCSAgICAgIHRlcm1pb3NfcHJpbnRmICgiRHVw
bGljYXRlSGFuZGxlICh0b19tYXN0ZXIpLCAlRSIpOwogCSAgICAgIGdvdG8g
cmVwbHk7CiAJICAgIH0KKwkgIGlmICghRHVwbGljYXRlSGFuZGxlIChHZXRD
dXJyZW50UHJvY2VzcyAoKSwgdG9fbWFzdGVyX2N5ZywKKwkJCQljbGllbnQs
ICZyZXBsLnRvX21hc3Rlcl9jeWcsCisJCQkJMCwgVFJVRSwgRFVQTElDQVRF
X1NBTUVfQUNDRVNTKSkKKwkgICAgeworCSAgICAgIHRlcm1pb3NfcHJpbnRm
ICgiRHVwbGljYXRlSGFuZGxlICh0b19tYXN0ZXJfY3lnKSwgJUUiKTsKKwkg
ICAgICBnb3RvIHJlcGx5OworCSAgICB9CiAJfQogcmVwbHk6CiAgICAgICBy
ZXBsLmVycm9yID0gR2V0TGFzdEVycm9yICgpOwpAQCAtMTYwNiw2ICsxNjM4
LDQwIEBAIHB0eV9tYXN0ZXJfdGhyZWFkIChWT0lEICphcmcpCiAgIHJldHVy
biAoKGZoYW5kbGVyX3B0eV9tYXN0ZXIgKikgYXJnKS0+cHR5X21hc3Rlcl90
aHJlYWQgKCk7CiB9CiAKK0RXT1JECitmaGFuZGxlcl9wdHlfbWFzdGVyOjpw
dHlfbWFzdGVyX2Z3ZF90aHJlYWQgKCkKK3sKKyAgRFdPUkQgcmxlbjsKKyAg
Y2hhciBvdXRidWZbT1VUX0JVRkZFUl9TSVpFXTsKKworICB0ZXJtaW9zX3By
aW50ZigiU3RhcnRlZC4iKTsKKyAgZm9yICg7OykKKyAgICB7CisgICAgICBp
ZiAoIVJlYWRGaWxlIChnZXRfaW9faGFuZGxlICgpLCBvdXRidWYsIHNpemVv
ZiBvdXRidWYsICZybGVuLCBOVUxMKSkKKwl7CisJICB0ZXJtaW9zX3ByaW50
ZiAoIlJlYWRGaWxlIGZvciBmb3J3YXJkaW5nIGZhaWxlZCwgJUUiKTsKKwkg
IGJyZWFrOworCX0KKyAgICAgIHNzaXplX3Qgd2xlbiA9IHJsZW47CisgICAg
ICB3aGlsZSAocmxlbj4wKQorCXsKKwkgIGlmICghcHJvY2Vzc19vcG9zdF9v
dXRwdXQgKHRvX21hc3Rlcl9jeWcsIG91dGJ1Ziwgd2xlbiwgZmFsc2UpKQor
CSAgICB7CisJICAgICAgdGVybWlvc19wcmludGYgKCJXcml0ZUZpbGUgZm9y
IGZvcndhcmRpbmcgZmFpbGVkLCAlRSIpOworCSAgICAgIGJyZWFrOworCSAg
ICB9CisJICBybGVuIC09IHdsZW47CisJfQorICAgIH0KKyAgcmV0dXJuIDA7
Cit9CisKK3N0YXRpYyBEV09SRCBXSU5BUEkKK3B0eV9tYXN0ZXJfZndkX3Ro
cmVhZCAoVk9JRCAqYXJnKQoreworICByZXR1cm4gKChmaGFuZGxlcl9wdHlf
bWFzdGVyICopIGFyZyktPnB0eV9tYXN0ZXJfZndkX3RocmVhZCAoKTsKK30K
KwogYm9vbAogZmhhbmRsZXJfcHR5X21hc3Rlcjo6c2V0dXAgKCkKIHsKQEAg
LTE2MzIsNyArMTY5OCw3IEBAIGZoYW5kbGVyX3B0eV9tYXN0ZXI6OnNldHVw
ICgpCiAgICAgdGVybWlvc19wcmludGYgKCJjYW4ndCBzZXQgb3V0cHV0X2hh
bmRsZSglcCkgdG8gbm9uLWJsb2NraW5nIG1vZGUiLAogCQkgICAgZ2V0X291
dHB1dF9oYW5kbGUgKCkpOwogCi0gIGNoYXIgcGlwZW5hbWVbc2l6ZW9mKCJw
dHlOTk5OLWZyb20tbWFzdGVyIildOworICBjaGFyIHBpcGVuYW1lW3NpemVv
ZigicHR5Tk5OTi10by1tYXN0ZXItY3lnIildOwogICBfX3NtYWxsX3Nwcmlu
dGYgKHBpcGVuYW1lLCAicHR5JWQtdG8tbWFzdGVyIiwgdW5pdCk7CiAgIHJl
cyA9IGZoYW5kbGVyX3BpcGU6OmNyZWF0ZSAoJnNlY19ub25lLCAmZ2V0X2lv
X2hhbmRsZSAoKSwgJnRvX21hc3RlciwKIAkJCSAgICAgICBmaGFuZGxlcl9w
dHlfY29tbW9uOjpwaXBlc2l6ZSwgcGlwZW5hbWUsIDApOwpAQCAtMTY0Miw2
ICsxNzA4LDE1IEBAIGZoYW5kbGVyX3B0eV9tYXN0ZXI6OnNldHVwICgpCiAg
ICAgICBnb3RvIGVycjsKICAgICB9CiAKKyAgX19zbWFsbF9zcHJpbnRmIChw
aXBlbmFtZSwgInB0eSVkLXRvLW1hc3Rlci1jeWciLCB1bml0KTsKKyAgcmVz
ID0gZmhhbmRsZXJfcGlwZTo6Y3JlYXRlICgmc2VjX25vbmUsICZnZXRfaW9f
aGFuZGxlX2N5ZyAoKSwgJnRvX21hc3Rlcl9jeWcsCisJCQkgICAgICAgZmhh
bmRsZXJfcHR5X2NvbW1vbjo6cGlwZXNpemUsIHBpcGVuYW1lLCAwKTsKKyAg
aWYgKHJlcykKKyAgICB7CisgICAgICBlcnJzdHIgPSAib3V0cHV0IHBpcGUg
Zm9yIGN5Z3dpbiI7CisgICAgICBnb3RvIGVycjsKKyAgICB9CisKICAgUHJv
dGVjdEhhbmRsZTEgKGdldF9pb19oYW5kbGUgKCksIGZyb21fcHR5KTsKIAog
ICBfX3NtYWxsX3NwcmludGYgKHBpcGVuYW1lLCAicHR5JWQtZWNob2xvb3Ai
LCB1bml0KTsKQEAgLTE3MDAsMjggKzE3NzUsMzggQEAgZmhhbmRsZXJfcHR5
X21hc3Rlcjo6c2V0dXAgKCkKICAgICAgIGVycnN0ciA9ICJwdHkgbWFzdGVy
IGNvbnRyb2wgdGhyZWFkIjsKICAgICAgIGdvdG8gZXJyOwogICAgIH0KKyAg
bWFzdGVyX2Z3ZF90aHJlYWQgPSBuZXcgY3lndGhyZWFkICg6OnB0eV9tYXN0
ZXJfZndkX3RocmVhZCwgdGhpcywgInB0eW1mIik7CisgIGlmICghbWFzdGVy
X2Z3ZF90aHJlYWQpCisgICAgeworICAgICAgZXJyc3RyID0gInB0eSBtYXN0
ZXIgZm9yd2FyZGluZyB0aHJlYWQiOworICAgICAgZ290byBlcnI7CisgICAg
fQogCiAgIHQuc2V0X2Zyb21fbWFzdGVyIChmcm9tX21hc3Rlcik7CiAgIHQu
c2V0X3RvX21hc3RlciAodG9fbWFzdGVyKTsKKyAgdC5zZXRfdG9fbWFzdGVy
X2N5ZyAodG9fbWFzdGVyX2N5Zyk7CiAgIHQud2luc2l6ZS53c19jb2wgPSA4
MDsKICAgdC53aW5zaXplLndzX3JvdyA9IDI1OwogICB0Lm1hc3Rlcl9waWQg
PSBteXNlbGYtPnBpZDsKIAogICBkZXYgKCkucGFyc2UgKERFVl9QVFlNX01B
Sk9SLCB1bml0KTsKIAotICB0ZXJtaW9zX3ByaW50ZiAoInRoaXMgJXAsIHB0
eSVkIG9wZW5lZCAtIGZyb21fcHR5ICVwLCB0b19wdHkgJXAiLCB0aGlzLCB1
bml0LAotCQkgIGdldF9pb19oYW5kbGUgKCksIGdldF9vdXRwdXRfaGFuZGxl
ICgpKTsKKyAgdGVybWlvc19wcmludGYgKCJ0aGlzICVwLCBwdHklZCBvcGVu
ZWQgLSBmcm9tX3B0eSA8JXAsJXA+LCB0b19wdHkgJXAiLAorCXRoaXMsIHVu
aXQsIGdldF9pb19oYW5kbGUgKCksIGdldF9pb19oYW5kbGVfY3lnICgpLAor
CWdldF9vdXRwdXRfaGFuZGxlICgpKTsKICAgcmV0dXJuIHRydWU7CiAKIGVy
cjoKICAgX19zZXRlcnJubyAoKTsKICAgY2xvc2VfbWF5YmUgKGdldF9pb19o
YW5kbGUgKCkpOworICBjbG9zZV9tYXliZSAoZ2V0X2lvX2hhbmRsZV9jeWcg
KCkpOwogICBjbG9zZV9tYXliZSAoZ2V0X291dHB1dF9oYW5kbGUgKCkpOwog
ICBjbG9zZV9tYXliZSAoaW5wdXRfYXZhaWxhYmxlX2V2ZW50KTsKICAgY2xv
c2VfbWF5YmUgKG91dHB1dF9tdXRleCk7CiAgIGNsb3NlX21heWJlIChpbnB1
dF9tdXRleCk7CiAgIGNsb3NlX21heWJlIChmcm9tX21hc3Rlcik7CiAgIGNs
b3NlX21heWJlICh0b19tYXN0ZXIpOworICBjbG9zZV9tYXliZSAodG9fbWFz
dGVyX2N5Zyk7CiAgIGNsb3NlX21heWJlIChlY2hvX3IpOwogICBjbG9zZV9t
YXliZSAoZWNob193KTsKICAgY2xvc2VfbWF5YmUgKG1hc3Rlcl9jdGwpOwpA
QCAtMTc0MSwxMSArMTgyNiwxMyBAQCBmaGFuZGxlcl9wdHlfbWFzdGVyOjpm
aXh1cF9hZnRlcl9mb3JrIChIQU5ETEUgcGFyZW50KQogCXsKIAkgIHQuc2V0
X2Zyb21fbWFzdGVyIChhcmNoLT5mcm9tX21hc3Rlcik7CiAJICB0LnNldF90
b19tYXN0ZXIgKGFyY2gtPnRvX21hc3Rlcik7CisJICB0LnNldF90b19tYXN0
ZXJfY3lnIChhcmNoLT50b19tYXN0ZXJfY3lnKTsKIAl9CiAgICAgICBhcmNo
LT5kd1Byb2Nlc3NJZCA9IHdwaWQ7CiAgICAgfQogICBmcm9tX21hc3RlciA9
IGFyY2gtPmZyb21fbWFzdGVyOwogICB0b19tYXN0ZXIgPSBhcmNoLT50b19t
YXN0ZXI7CisgIHRvX21hc3Rlcl9jeWcgPSBhcmNoLT50b19tYXN0ZXJfY3ln
OwogICByZXBvcnRfdHR5X2NvdW50cyAodGhpcywgImluaGVyaXRlZCBtYXN0
ZXIiLCAiIik7CiB9CiAKQEAgLTE3NTUsNyArMTg0Miw3IEBAIGZoYW5kbGVy
X3B0eV9tYXN0ZXI6OmZpeHVwX2FmdGVyX2V4ZWMgKCkKICAgaWYgKCFjbG9z
ZV9vbl9leGVjICgpKQogICAgIGZpeHVwX2FmdGVyX2ZvcmsgKHNwYXduX2lu
Zm8tPnBhcmVudCk7CiAgIGVsc2UKLSAgICBmcm9tX21hc3RlciA9IHRvX21h
c3RlciA9IE5VTEw7CisgICAgZnJvbV9tYXN0ZXIgPSB0b19tYXN0ZXIgPSB0
b19tYXN0ZXJfY3lnID0gTlVMTDsKIH0KIAogQk9PTApkaWZmIC0tZ2l0IGEv
d2luc3VwL2N5Z3dpbi9zZWxlY3QuY2MgYi93aW5zdXAvY3lnd2luL3NlbGVj
dC5jYwppbmRleCAxNzA2Yzg3Li44MDNlNWQ1IDEwMDY0NAotLS0gYS93aW5z
dXAvY3lnd2luL3NlbGVjdC5jYworKysgYi93aW5zdXAvY3lnd2luL3NlbGVj
dC5jYwpAQCAtODAsNyArODAsNyBAQCBkZXRhaWxzLiAqLwogI2RlZmluZSBj
b3B5ZmRfc2V0KHRvLCBmcm9tLCBuKSBtZW1jcHkgKHRvLCBmcm9tLCBzaXpl
b2ZfZmRfc2V0IChuKSk7CiAKICNkZWZpbmUgc2V0X2hhbmRsZV9vcl9yZXR1
cm5faWZfbm90X29wZW4oaCwgcykgXAotICBoID0gKHMpLT5maC0+Z2V0X2hh
bmRsZSAoKTsgXAorICBoID0gKHMpLT5maC0+Z2V0X2lvX2hhbmRsZV9jeWcg
KCk7IFwKICAgaWYgKGN5Z2hlYXAtPmZkdGFiLm5vdF9vcGVuICgocyktPmZk
KSkgXAogICAgIHsgXAogICAgICAgKHMpLT50aHJlYWRfZXJybm8gPSAgRUJB
REY7IFwKQEAgLTEyNjQsNyArMTI2NCw3IEBAIGZoYW5kbGVyX2Jhc2U6OnNl
bGVjdF9yZWFkIChzZWxlY3Rfc3R1ZmYgKnNzKQogICAgICAgcy0+c3RhcnR1
cCA9IG5vX3N0YXJ0dXA7CiAgICAgICBzLT52ZXJpZnkgPSB2ZXJpZnlfb2s7
CiAgICAgfQotICBzLT5oID0gZ2V0X2hhbmRsZSAoKTsKKyAgcy0+aCA9IGdl
dF9pb19oYW5kbGVfY3lnICgpOwogICBzLT5yZWFkX3NlbGVjdGVkID0gdHJ1
ZTsKICAgcy0+cmVhZF9yZWFkeSA9IHRydWU7CiAgIHJldHVybiBzOwpkaWZm
IC0tZ2l0IGEvd2luc3VwL2N5Z3dpbi90dHkuaCBiL3dpbnN1cC9jeWd3aW4v
dHR5LmgKaW5kZXggMjdkNDNmNy4uNTIyY2Y5ZSAxMDA2NDQKLS0tIGEvd2lu
c3VwL2N5Z3dpbi90dHkuaAorKysgYi93aW5zdXAvY3lnd2luL3R0eS5oCkBA
IC05MiwxMiArOTIsMTUgQEAgcHVibGljOgogcHJpdmF0ZToKICAgSEFORExF
IF9mcm9tX21hc3RlcjsKICAgSEFORExFIF90b19tYXN0ZXI7CisgIEhBTkRM
RSBfdG9fbWFzdGVyX2N5ZzsKIAogcHVibGljOgogICBIQU5ETEUgZnJvbV9t
YXN0ZXIoKSBjb25zdCB7IHJldHVybiBfZnJvbV9tYXN0ZXI7IH0KICAgSEFO
RExFIHRvX21hc3RlcigpIGNvbnN0IHsgcmV0dXJuIF90b19tYXN0ZXI7IH0K
KyAgSEFORExFIHRvX21hc3Rlcl9jeWcoKSBjb25zdCB7IHJldHVybiBfdG9f
bWFzdGVyX2N5ZzsgfQogICB2b2lkIHNldF9mcm9tX21hc3RlciAoSEFORExF
IGgpIHsgX2Zyb21fbWFzdGVyID0gaDsgfQogICB2b2lkIHNldF90b19tYXN0
ZXIgKEhBTkRMRSBoKSB7IF90b19tYXN0ZXIgPSBoOyB9CisgIHZvaWQgc2V0
X3RvX21hc3Rlcl9jeWcgKEhBTkRMRSBoKSB7IF90b19tYXN0ZXJfY3lnID0g
aDsgfQogCiAgIGludCByZWFkX3JldHZhbDsKICAgYm9vbCB3YXNfb3BlbmVk
OwkvKiBUcnVlIGlmIG9wZW5lZCBhdCBsZWFzdCBvbmNlLiAqLwo=

--Multipart=_Wed__22_Apr_2015_19_57_03_+0900_v+HRqkQKJLnwpAk=--
