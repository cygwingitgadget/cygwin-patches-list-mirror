Return-Path: <cygwin-patches-return-3720-listarch-cygwin-patches=sources.redhat.com@cygwin.com>
Received: (qmail 1804 invoked by alias); 19 Mar 2003 14:56:24 -0000
Mailing-List: contact cygwin-patches-help@cygwin.com; run by ezmlm
Precedence: bulk
List-Subscribe: <mailto:cygwin-patches-subscribe@cygwin.com>
List-Post: <mailto:cygwin-patches@cygwin.com>
List-Archive: <http://sources.redhat.com/ml/cygwin-patches/>
List-Help: <mailto:cygwin-patches-help@cygwin.com>, <http://sources.redhat.com/ml/#faqs>
Sender: cygwin-patches-owner@cygwin.com
Received: (qmail 1717 invoked from network); 19 Mar 2003 14:56:23 -0000
X-Authentication-Warning: atacama.four-d.de: mail set sender to <tpfaff@gmx.net> using -f
Date: Wed, 19 Mar 2003 14:56:00 -0000
From: Thomas Pfaff <tpfaff@gmx.net>
To: cygwin-patches@cygwin.com
Subject: [PATCH] updated pthread list patch
Message-ID: <Pine.WNT.4.44.0303191454490.257-200000@algeria.intern.net>
X-X-Sender: pfaff@antarctica.intern.net
MIME-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="4498836-15493-1048085758=:257"
X-SW-Source: 2003-q1/txt/msg00369.txt.bz2

  This message is in MIME format.  The first part should be readable text,
  while the remaining parts are likely unreadable without MIME-aware tools.
  Send mail to mime@docserver.cac.washington.edu for more info.

--4498836-15493-1048085758=:257
Content-Type: TEXT/PLAIN; charset=US-ASCII
Content-length: 2808


2002-03-19  Thomas Pfaff  <tpfaff@gmx.net>

	* thread.h (class List): Move inline code inside class
	declaration.
	(List::forEach): Change callback parameter to member function
	pointer.
	(pthread_keys::fixup_before_fork): Change to inline. Use
	List::forEach to fixup keys.
	(pthread_keys::fixup_after_fork): Ditto.
	(pthread_keys::runAllDestructors): Ditto.
	(pthread_key::saveAKey): Remove.
	(pthread_key::restoreAKey): Ditto.
	(pthread_key::destroyAKey): Ditto.
	(pthread_key::run_destructor): Rename to runDestructor.
	(pthread_mutex::fixup_after_fork): Change to inline. Use
	List::forEach to fixup mutexes after a fork.
	(pthread_mutex::FixupAfterFork): New method.
	(pthread_mutex::mutexes): New member.
	(pthread_cond::fixup_after_fork): Change to inline. Use
	List::forEach to fixup conds after a fork.
	(pthread_cond::FixupAfterFork): New method.
	(pthread_cond::conds): New member.
	(pthread_rwlock::fixup_after_fork): Change to inline. Use
	List::forEach to fixup rwlocks after a fork.
	(pthread_rwlock::FixupAfterFork): New method.
	(pthread_rwlock::rwlocks): New member.
	(semaphore::fixup_after_fork): Change to inline. Use
	List::forEach to fixup mutexes after a fork.
	(semaphore::FixupAfterFork): New method.
	(semaphore::semaphores): New member.
	(MTinterface::mutexs): Remove.
	(MTinterface::conds): Ditto.
	(MTinterface::rwlocks): Ditto.
	(MTinterface::semaphores): Ditto.

	* thread.cc (MTinterface::fixup_after_fork): Change
	fixup_after_fork for pthread objects.
	(semaphore::conds): Instantiate.
	(pthread_cond::pthread_cond): Use List::Insert rather than
	custom list code.
	(pthread_cond::~pthread_cond): Use List::Remove rather than
	custom list code.
	(pthread_cond::fixup_after_fork): Rename to FixupAfterFork.
	(pthread_rwlock::rwlocks): Instantiate.
	(pthread_rwlock::pthread_crwlock): Use List::Insert rather than
	custom list code.
	(pthread_rwlock::~pthread_rwlock): Use List::Remove rather than
	custom list code.
	(pthread_rwlock::fixup_after_fork): Rename to FixupAfterFork.
	(pthread_key::saveAKey): Remove.
	(pthread_key::fixup_before_fork): Ditto.
	(pthread_key::restoreAKey): Ditto.
	(pthread_key::fixup_after_fork): Ditto.
	(pthread_key::destroyAKey): Ditto.
	(pthread_key::runAllDestructors): Ditto.
	(pthread_key::run_destructor): Rename to runDestructor.
	(pthread_mutex::mutexes): Instantiate.
	(pthread_mutex::pthread_mutex): Use List::Insert rather than
	custom list code.
	(pthread_mutex::~pthread_mutex): Use List::Remove rather than
	custom list code.
	(pthread_mutex::fixup_after_fork): Rename to FixupAfterFork.
	(semaphore::conds): Instantiate.
	(semaphore::semaphore): Use List::Insert rather than custom list
	code.
	(semaphores::~semaphore): Use List::Remove rather than custom
	list code.
	(semaphore::fixup_after_fork): Rename to FixupAfterFork.

--4498836-15493-1048085758=:257
Content-Type: TEXT/plain; name="pthread_list.patch"
Content-Transfer-Encoding: BASE64
Content-ID: <Pine.WNT.4.44.0303191555580.257@algeria.intern.net>
Content-Description: 
Content-Disposition: attachment; filename="pthread_list.patch"
Content-length: 21802

ZGlmZiAtdXJwIHNyYy5vbGQvd2luc3VwL2N5Z3dpbi90aHJlYWQuY2Mgc3Jj
L3dpbnN1cC9jeWd3aW4vdGhyZWFkLmNjCi0tLSBzcmMub2xkL3dpbnN1cC9j
eWd3aW4vdGhyZWFkLmNjCTIwMDMtMDMtMTkgMTQ6MzE6NDkuMDAwMDAwMDAw
ICswMTAwCisrKyBzcmMvd2luc3VwL2N5Z3dpbi90aHJlYWQuY2MJMjAwMy0w
My0xOSAxMzoyMDoxMS4wMDAwMDAwMDAgKzAxMDAKQEAgLTIxNywzNCArMjE3
LDEwIEBAIE1UaW50ZXJmYWNlOjpmaXh1cF9hZnRlcl9mb3JrICh2b2lkKQog
ICB0aHJlYWRjb3VudCA9IDE7CiAgIHB0aHJlYWQ6OmluaXRNYWluVGhyZWFk
ICh0cnVlKTsKIAotICBwdGhyZWFkX211dGV4ICptdXRleCA9IG11dGV4czsK
LSAgZGVidWdfcHJpbnRmICgibXV0ZXhzIGlzICV4IixtdXRleHMpOwotICB3
aGlsZSAobXV0ZXgpCi0gICAgewotICAgICAgbXV0ZXgtPmZpeHVwX2FmdGVy
X2ZvcmsgKCk7Ci0gICAgICBtdXRleCA9IG11dGV4LT5uZXh0OwotICAgIH0K
LSAgcHRocmVhZF9jb25kICpjb25kID0gY29uZHM7Ci0gIGRlYnVnX3ByaW50
ZiAoImNvbmRzIGlzICV4Iixjb25kcyk7Ci0gIHdoaWxlIChjb25kKQotICAg
IHsKLSAgICAgIGNvbmQtPmZpeHVwX2FmdGVyX2ZvcmsgKCk7Ci0gICAgICBj
b25kID0gY29uZC0+bmV4dDsKLSAgICB9Ci0gIHB0aHJlYWRfcndsb2NrICpy
d2xvY2sgPSByd2xvY2tzOwotICBkZWJ1Z19wcmludGYgKCJyd2xvY2tzIGlz
ICV4Iixyd2xvY2tzKTsKLSAgd2hpbGUgKHJ3bG9jaykKLSAgICB7Ci0gICAg
ICByd2xvY2stPmZpeHVwX2FmdGVyX2ZvcmsgKCk7Ci0gICAgICByd2xvY2sg
PSByd2xvY2stPm5leHQ7Ci0gICAgfQotICBzZW1hcGhvcmUgKnNlbSA9IHNl
bWFwaG9yZXM7Ci0gIGRlYnVnX3ByaW50ZiAoInNlbWFwaG9yZXMgaXMgJXgi
LHNlbWFwaG9yZXMpOwotICB3aGlsZSAoc2VtKQotICAgIHsKLSAgICAgIHNl
bS0+Zml4dXBfYWZ0ZXJfZm9yayAoKTsKLSAgICAgIHNlbSA9IHNlbS0+bmV4
dDsKLSAgICB9CisgIHB0aHJlYWRfbXV0ZXg6OmZpeHVwX2FmdGVyX2Zvcmsg
KCk7CisgIHB0aHJlYWRfY29uZDo6Zml4dXBfYWZ0ZXJfZm9yayAoKTsKKyAg
cHRocmVhZF9yd2xvY2s6OmZpeHVwX2FmdGVyX2ZvcmsgKCk7CisgIHNlbWFw
aG9yZTo6Zml4dXBfYWZ0ZXJfZm9yayAoKTsKIH0KIAogLyogcHRocmVhZCBj
YWxscyAqLwpAQCAtODA3LDYgKzc4Myw4IEBAIHB0aHJlYWRfY29uZGF0dHI6
On5wdGhyZWFkX2NvbmRhdHRyICgpCiB7CiB9CiAKK0xpc3Q8cHRocmVhZF9j
b25kPiBwdGhyZWFkX2NvbmQ6OmNvbmRzOworCiAvKiBUaGlzIGlzIHVzZWQg
Zm9yIGNvbmQgY3JlYXRpb24gcHJvdGVjdGlvbiB3aXRoaW4gYSBzaW5nbGUg
cHJvY2VzcyBvbmx5ICovCiBuYXRpdmVNdXRleCBOT19DT1BZIHB0aHJlYWRf
Y29uZDo6Y29uZEluaXRpYWxpemF0aW9uTG9jazsKIApAQCAtODYyLDggKzg0
MCw3IEBAIHB0aHJlYWRfY29uZDo6cHRocmVhZF9jb25kIChwdGhyZWFkX2Nv
bmQKICAgICAgIHJldHVybjsKICAgICB9CiAKLSAgLyogdGhyZWFkc2FmZSBh
ZGRpdGlvbiBpcyBlYXN5ICovCi0gIG5leHQgPSAocHRocmVhZF9jb25kICop
IEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgmTVRfSU5URVJGQUNFLT5j
b25kcywgdGhpcyk7CisgIGNvbmRzLkluc2VydCAodGhpcyk7CiB9CiAKIHB0
aHJlYWRfY29uZDo6fnB0aHJlYWRfY29uZCAoKQpAQCAtODcxLDE3ICs4NDgs
NyBAQCBwdGhyZWFkX2NvbmQ6On5wdGhyZWFkX2NvbmQgKCkKICAgaWYgKHNl
bVdhaXQpCiAgICAgQ2xvc2VIYW5kbGUgKHNlbVdhaXQpOwogCi0gIC8qIEkn
bSBub3QgMTAwJSBzdXJlIHRoZSBuZXh0IGJpdCBpcyB0aHJlYWRzYWZlLiBJ
IHRoaW5rIGl0IGlzLi4uICovCi0gIGlmIChNVF9JTlRFUkZBQ0UtPmNvbmRz
ID09IHRoaXMpCi0gICAgSW50ZXJsb2NrZWRFeGNoYW5nZVBvaW50ZXIgKCZN
VF9JTlRFUkZBQ0UtPmNvbmRzLCB0aGlzLT5uZXh0KTsKLSAgZWxzZQotICAg
IHsKLSAgICAgIHB0aHJlYWRfY29uZCAqdGVtcGNvbmQgPSBNVF9JTlRFUkZB
Q0UtPmNvbmRzOwotICAgICAgd2hpbGUgKHRlbXBjb25kLT5uZXh0ICYmIHRl
bXBjb25kLT5uZXh0ICE9IHRoaXMpCi0JdGVtcGNvbmQgPSB0ZW1wY29uZC0+
bmV4dDsKLSAgICAgIC8qIGJ1dCB0aGVyZSBtYXkgYmUgYSByYWNlIGJldHdl
ZW4gdGhlIGxvb3AgYWJvdmUgYW5kIHRoaXMgc3RhdGVtZW50ICovCi0gICAg
ICBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJnRlbXBjb25kLT5uZXh0
LCB0aGlzLT5uZXh0KTsKLSAgICB9CisgIGNvbmRzLlJlbW92ZSAodGhpcyk7
CiB9CiAKIHZvaWQKQEAgLTk5Miw3ICs5NTksNyBAQCBwdGhyZWFkX2NvbmQ6
OldhaXQgKHB0aHJlYWRfbXV0ZXhfdCBtdXRlCiB9CiAKIHZvaWQKLXB0aHJl
YWRfY29uZDo6Zml4dXBfYWZ0ZXJfZm9yayAoKQorcHRocmVhZF9jb25kOjpG
aXh1cEFmdGVyRm9yayAoKQogewogICB3YWl0aW5nID0gcGVuZGluZyA9IDA7
CiAgIG10eENvbmQgPSBOVUxMOwpAQCAtMTAwMyw3ICs5NzAsNyBAQCBwdGhy
ZWFkX2NvbmQ6OmZpeHVwX2FmdGVyX2ZvcmsgKCkKIAogICBzZW1XYWl0ID0g
OjpDcmVhdGVTZW1hcGhvcmUgKCZzZWNfbm9uZV9uaWgsIDAsIExPTkdfTUFY
LCBOVUxMKTsKICAgaWYgKCFzZW1XYWl0KQotICAgIGFwaV9mYXRhbCAoInB0
aHJlYWRfY29uZDo6Zml4dXBfYWZ0ZXJfZm9yayAoKSBmYWlsZWQgdG8gcmVj
cmVhdGUgd2luMzIgc2VtYXBob3JlIik7CisgICAgYXBpX2ZhdGFsICgicHRo
cmVhZF9jb25kOjpGaXh1cEFmdGVyRm9yayAoKSBmYWlsZWQgdG8gcmVjcmVh
dGUgd2luMzIgc2VtYXBob3JlIik7CiB9CiAKIGJvb2wKQEAgLTEwMjMsNiAr
OTkwLDggQEAgcHRocmVhZF9yd2xvY2thdHRyOjp+cHRocmVhZF9yd2xvY2th
dHRyIAogewogfQogCitMaXN0PHB0aHJlYWRfcndsb2NrPiBwdGhyZWFkX3J3
bG9jazo6cndsb2NrczsKKwogLyogVGhpcyBpcyB1c2VkIGZvciByd2xvY2sg
Y3JlYXRpb24gcHJvdGVjdGlvbiB3aXRoaW4gYSBzaW5nbGUgcHJvY2VzcyBv
bmx5ICovCiBuYXRpdmVNdXRleCBOT19DT1BZIHB0aHJlYWRfcndsb2NrOjpy
d2xvY2tJbml0aWFsaXphdGlvbkxvY2s7CiAKQEAgLTEwNzgsMjMgKzEwNDcs
MTIgQEAgcHRocmVhZF9yd2xvY2s6OnB0aHJlYWRfcndsb2NrIChwdGhyZWFk
XwogICAgIH0KIAogCi0gIC8qIHRocmVhZHNhZmUgYWRkaXRpb24gaXMgZWFz
eSAqLwotICBuZXh0ID0gKHB0aHJlYWRfcndsb2NrICopIEludGVybG9ja2Vk
RXhjaGFuZ2VQb2ludGVyICgmTVRfSU5URVJGQUNFLT5yd2xvY2tzLCB0aGlz
KTsKKyAgcndsb2Nrcy5JbnNlcnQgKHRoaXMpOwogfQogCiBwdGhyZWFkX3J3
bG9jazo6fnB0aHJlYWRfcndsb2NrICgpCiB7Ci0gIC8qIEknbSBub3QgMTAw
JSBzdXJlIHRoZSBuZXh0IGJpdCBpcyB0aHJlYWRzYWZlLiBJIHRoaW5rIGl0
IGlzLi4uICovCi0gIGlmIChNVF9JTlRFUkZBQ0UtPnJ3bG9ja3MgPT0gdGhp
cykKLSAgICBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJk1UX0lOVEVS
RkFDRS0+cndsb2NrcywgdGhpcy0+bmV4dCk7Ci0gIGVsc2UKLSAgICB7Ci0g
ICAgICBwdGhyZWFkX3J3bG9jayAqdGVtcHJ3bG9jayA9IE1UX0lOVEVSRkFD
RS0+cndsb2NrczsKLSAgICAgIHdoaWxlICh0ZW1wcndsb2NrLT5uZXh0ICYm
IHRlbXByd2xvY2stPm5leHQgIT0gdGhpcykKLQl0ZW1wcndsb2NrID0gdGVt
cHJ3bG9jay0+bmV4dDsKLSAgICAgIC8qIGJ1dCB0aGVyZSBtYXkgYmUgYSBy
YWNlIGJldHdlZW4gdGhlIGxvb3AgYWJvdmUgYW5kIHRoaXMgc3RhdGVtZW50
ICovCi0gICAgICBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJnRlbXBy
d2xvY2stPm5leHQsIHRoaXMtPm5leHQpOwotICAgIH0KKyAgcndsb2Nrcy5S
ZW1vdmUgKHRoaXMpOwogfQogCiBpbnQKQEAgLTEzMTUsNyArMTI3Myw3IEBA
IHB0aHJlYWRfcndsb2NrOjpXckxvY2tDbGVhbnVwICh2b2lkICphcmcKIH0K
IAogdm9pZAotcHRocmVhZF9yd2xvY2s6OmZpeHVwX2FmdGVyX2ZvcmsgKCkK
K3B0aHJlYWRfcndsb2NrOjpGaXh1cEFmdGVyRm9yayAoKQogewogICBwdGhy
ZWFkX3Qgc2VsZiA9IHB0aHJlYWQ6OnNlbGYgKCk7CiAgIHN0cnVjdCBSV0xP
Q0tfUkVBREVSICoqdGVtcCA9ICZyZWFkZXJzOwpAQCAtMTM0Niw0MiArMTMw
NCw2IEBAIHB0aHJlYWRfcndsb2NrOjpmaXh1cF9hZnRlcl9mb3JrICgpCiAv
KiBUaGlzIHN0b3JlcyBwdGhyZWFkX2tleSBpbmZvcm1hdGlvbiBhY3Jvc3Mg
Zm9yaygpIGJvdW5kYXJpZXMgKi8KIExpc3Q8cHRocmVhZF9rZXk+IHB0aHJl
YWRfa2V5OjprZXlzOwogCi12b2lkCi1wdGhyZWFkX2tleTo6c2F2ZUFLZXkg
KHB0aHJlYWRfa2V5ICprZXkpCi17Ci0gIGtleS0+c2F2ZUtleVRvQnVmZmVy
ICgpOwotfQotCi12b2lkCi1wdGhyZWFkX2tleTo6Zml4dXBfYmVmb3JlX2Zv
cmsgKCkKLXsKLSAga2V5cy5mb3JFYWNoIChzYXZlQUtleSk7Ci19Ci0KLXZv
aWQKLXB0aHJlYWRfa2V5OjpyZXN0b3JlQUtleSAocHRocmVhZF9rZXkgKmtl
eSkKLXsKLSAga2V5LT5yZWNyZWF0ZUtleUZyb21CdWZmZXIgKCk7Ci19Ci0K
LXZvaWQKLXB0aHJlYWRfa2V5OjpmaXh1cF9hZnRlcl9mb3JrICgpCi17Ci0g
IGtleXMuZm9yRWFjaCAocmVzdG9yZUFLZXkpOwotfQotCi12b2lkCi1wdGhy
ZWFkX2tleTo6ZGVzdHJveUFLZXkgKHB0aHJlYWRfa2V5ICprZXkpCi17Ci0g
IGtleS0+cnVuX2Rlc3RydWN0b3IgKCk7Ci19Ci0KLXZvaWQKLXB0aHJlYWRf
a2V5OjpydW5BbGxEZXN0cnVjdG9ycyAoKQotewotICBrZXlzLmZvckVhY2gg
KGRlc3Ryb3lBS2V5KTsKLX0KLQogYm9vbAogcHRocmVhZF9rZXk6OmlzR29v
ZE9iamVjdCAocHRocmVhZF9rZXlfdCBjb25zdCAqa2V5KQogewpAQCAtMTQ0
NSw3ICsxMzY3LDcgQEAgcHRocmVhZF9rZXk6OnJlY3JlYXRlS2V5RnJvbUJ1
ZmZlciAoKQogfQogCiB2b2lkCi1wdGhyZWFkX2tleTo6cnVuX2Rlc3RydWN0
b3IgKCkKK3B0aHJlYWRfa2V5OjpydW5EZXN0cnVjdG9yICgpCiB7CiAgIGlm
IChkZXN0cnVjdG9yKQogICAgIHsKQEAgLTE1MjgsNiArMTQ1MCw4IEBAIHB0
aHJlYWRfbXV0ZXg6OmNhbkJlVW5sb2NrZWQgKHB0aHJlYWRfbXUKICAgcmV0
dXJuIChwdGhyZWFkOjplcXVhbCAoKCptdXRleCktPm93bmVyLCBzZWxmKSkg
JiYgMSA9PSAoKm11dGV4KS0+cmVjdXJzaW9uX2NvdW50ZXI7CiB9CiAKK0xp
c3Q8cHRocmVhZF9tdXRleD4gcHRocmVhZF9tdXRleDo6bXV0ZXhlczsKKwog
LyogVGhpcyBpcyB1c2VkIGZvciBtdXRleCBjcmVhdGlvbiBwcm90ZWN0aW9u
IHdpdGhpbiBhIHNpbmdsZSBwcm9jZXNzIG9ubHkgKi8KIG5hdGl2ZU11dGV4
IE5PX0NPUFkgcHRocmVhZF9tdXRleDo6bXV0ZXhJbml0aWFsaXphdGlvbkxv
Y2s7CiAKQEAgLTE1NjcsOCArMTQ5MSw3IEBAIHB0aHJlYWRfbXV0ZXg6OnB0
aHJlYWRfbXV0ZXggKHB0aHJlYWRfbXUKICAgICAgIHR5cGUgPSBhdHRyLT5t
dXRleHR5cGU7CiAgICAgfQogCi0gIC8qIHRocmVhZHNhZmUgYWRkaXRpb24g
aXMgZWFzeSAqLwotICBuZXh0ID0gKHB0aHJlYWRfbXV0ZXggKikgSW50ZXJs
b2NrZWRFeGNoYW5nZVBvaW50ZXIgKCZNVF9JTlRFUkZBQ0UtPm11dGV4cywg
dGhpcyk7CisgIG11dGV4ZXMuSW5zZXJ0ICh0aGlzKTsKIH0KIAogcHRocmVh
ZF9tdXRleDo6fnB0aHJlYWRfbXV0ZXggKCkKQEAgLTE1NzYsMTkgKzE0OTks
NyBAQCBwdGhyZWFkX211dGV4Ojp+cHRocmVhZF9tdXRleCAoKQogICBpZiAo
d2luMzJfb2JqX2lkKQogICAgIENsb3NlSGFuZGxlICh3aW4zMl9vYmpfaWQp
OwogCi0gIC8qIEknbSBub3QgMTAwJSBzdXJlIHRoZSBuZXh0IGJpdCBpcyB0
aHJlYWRzYWZlLiBJIHRoaW5rIGl0IGlzLi4uICovCi0gIGlmIChNVF9JTlRF
UkZBQ0UtPm11dGV4cyA9PSB0aGlzKQotICAgIC8qIFRPRE86IHByaW50ZiBh
biBlcnJvciBpZiB0aGUgcmV0dXJuIHZhbHVlICE9IHRoaXMgKi8KLSAgICBJ
bnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJk1UX0lOVEVSRkFDRS0+bXV0
ZXhzLCBuZXh0KTsKLSAgZWxzZQotICAgIHsKLSAgICAgIHB0aHJlYWRfbXV0
ZXggKnRlbXBtdXRleCA9IE1UX0lOVEVSRkFDRS0+bXV0ZXhzOwotICAgICAg
d2hpbGUgKHRlbXBtdXRleC0+bmV4dCAmJiB0ZW1wbXV0ZXgtPm5leHQgIT0g
dGhpcykKLQl0ZW1wbXV0ZXggPSB0ZW1wbXV0ZXgtPm5leHQ7Ci0gICAgICAv
KiBidXQgdGhlcmUgbWF5IGJlIGEgcmFjZSBiZXR3ZWVuIHRoZSBsb29wIGFi
b3ZlIGFuZCB0aGlzIHN0YXRlbWVudCAqLwotICAgICAgLyogVE9ETzogcHJp
bnRmIGFuIGVycm9yIGlmIHRoZSByZXR1cm4gdmFsdWUgIT0gdGhpcyAqLwot
ICAgICAgSW50ZXJsb2NrZWRFeGNoYW5nZVBvaW50ZXIgKCZ0ZW1wbXV0ZXgt
Pm5leHQsIHRoaXMtPm5leHQpOwotICAgIH0KKyAgbXV0ZXhlcy5SZW1vdmUg
KHRoaXMpOwogfQogCiBpbnQKQEAgLTE2NjUsMTEgKzE1NzYsMTEgQEAgcHRo
cmVhZF9tdXRleDo6X0Rlc3Ryb3kgKHB0aHJlYWRfdCBzZWxmKQogfQogCiB2
b2lkCi1wdGhyZWFkX211dGV4OjpmaXh1cF9hZnRlcl9mb3JrICgpCitwdGhy
ZWFkX211dGV4OjpGaXh1cEFmdGVyRm9yayAoKQogewotICBkZWJ1Z19wcmlu
dGYgKCJtdXRleCAleCBpbiBmaXh1cF9hZnRlcl9mb3JrIiwgdGhpcyk7Cisg
IGRlYnVnX3ByaW50ZiAoIm11dGV4ICV4IGluIEZpeHVwQWZ0ZXJGb3JrIiwg
dGhpcyk7CiAgIGlmIChwc2hhcmVkICE9IFBUSFJFQURfUFJPQ0VTU19QUklW
QVRFKQotICAgIGFwaV9mYXRhbCAoInB0aHJlYWRfbXV0ZXg6OmZpeHVwX2Fm
dGVyX2ZvcmsgKCkgZG9lc24ndHVuZGVyc3RhbmQgUFJPQ0VTU19TSEFSRUQg
bXV0ZXgncyIpOworICAgIGFwaV9mYXRhbCAoInB0aHJlYWRfbXV0ZXg6OkZp
eHVwQWZ0ZXJGb3JrICgpIGRvZXNuJ3R1bmRlcnN0YW5kIFBST0NFU1NfU0hB
UkVEIG11dGV4J3MiKTsKIAogICBpZiAoTlVMTCA9PSBvd25lcikKICAgICAv
KiBtdXRleCBoYXMgbm8gb3duZXIsIHJlc2V0IHRvIGluaXRpYWwgKi8KQEAg
LTE2ODAsNyArMTU5MSw3IEBAIHB0aHJlYWRfbXV0ZXg6OmZpeHVwX2FmdGVy
X2ZvcmsgKCkKIAogICB3aW4zMl9vYmpfaWQgPSA6OkNyZWF0ZVNlbWFwaG9y
ZSAoJnNlY19ub25lX25paCwgMCwgTE9OR19NQVgsIE5VTEwpOwogICBpZiAo
IXdpbjMyX29ial9pZCkKLSAgICBhcGlfZmF0YWwgKCJwdGhyZWFkX211dGV4
OjpmaXh1cF9hZnRlcl9mb3JrICgpIGZhaWxlZCB0byByZWNyZWF0ZSB3aW4z
MiBzZW1hcGhvcmUgZm9yIG11dGV4Iik7CisgICAgYXBpX2ZhdGFsICgicHRo
cmVhZF9tdXRleDo6Rml4dXBBZnRlckZvcmsgKCkgZmFpbGVkIHRvIHJlY3Jl
YXRlIHdpbjMyIHNlbWFwaG9yZSBmb3IgbXV0ZXgiKTsKIAogICBjb25kd2Fp
dHMgPSAwOwogfQpAQCAtMTcwMiw2ICsxNjEzLDggQEAgcHRocmVhZF9tdXRl
eGF0dHI6On5wdGhyZWFkX211dGV4YXR0ciAoKQogewogfQogCitMaXN0PHNl
bWFwaG9yZT4gc2VtYXBob3JlOjpzZW1hcGhvcmVzOworCiBzZW1hcGhvcmU6
OnNlbWFwaG9yZSAoaW50IHBzaGFyZWQsIHVuc2lnbmVkIGludCB2YWx1ZSk6
dmVyaWZ5YWJsZV9vYmplY3QgKFNFTV9NQUdJQykKIHsKICAgdGhpcy0+d2lu
MzJfb2JqX2lkID0gOjpDcmVhdGVTZW1hcGhvcmUgKCZzZWNfbm9uZV9uaWgs
IHZhbHVlLCBMT05HX01BWCwKQEAgLTE3MTAsMjUgKzE2MjMsMTYgQEAgc2Vt
YXBob3JlOjpzZW1hcGhvcmUgKGludCBwc2hhcmVkLCB1bnNpZwogICAgIG1h
Z2ljID0gMDsKICAgdGhpcy0+c2hhcmVkID0gcHNoYXJlZDsKICAgY3VycmVu
dHZhbHVlID0gdmFsdWU7Ci0gIC8qIHRocmVhZHNhZmUgYWRkaXRpb24gaXMg
ZWFzeSAqLwotICBuZXh0ID0gKHNlbWFwaG9yZSAqKSBJbnRlcmxvY2tlZEV4
Y2hhbmdlUG9pbnRlciAoJk1UX0lOVEVSRkFDRS0+c2VtYXBob3JlcywgdGhp
cyk7CisKKyAgc2VtYXBob3Jlcy5JbnNlcnQgKHRoaXMpOwogfQogCiBzZW1h
cGhvcmU6On5zZW1hcGhvcmUgKCkKIHsKICAgaWYgKHdpbjMyX29ial9pZCkK
ICAgICBDbG9zZUhhbmRsZSAod2luMzJfb2JqX2lkKTsKLSAgLyogSSdtIG5v
dCAxMDAlIHN1cmUgdGhlIG5leHQgYml0IGlzIHRocmVhZHNhZmUuIEkgdGhp
bmsgaXQgaXMuLi4gKi8KLSAgaWYgKE1UX0lOVEVSRkFDRS0+c2VtYXBob3Jl
cyA9PSB0aGlzKQotICAgIEludGVybG9ja2VkRXhjaGFuZ2VQb2ludGVyICgm
TVRfSU5URVJGQUNFLT5zZW1hcGhvcmVzLCB0aGlzLT5uZXh0KTsKLSAgZWxz
ZQotICAgIHsKLSAgICAgIHNlbWFwaG9yZSAqdGVtcHNlbSA9IE1UX0lOVEVS
RkFDRS0+c2VtYXBob3JlczsKLSAgICAgIHdoaWxlICh0ZW1wc2VtLT5uZXh0
ICYmIHRlbXBzZW0tPm5leHQgIT0gdGhpcykKLQl0ZW1wc2VtID0gdGVtcHNl
bS0+bmV4dDsKLSAgICAgIC8qIGJ1dCB0aGVyZSBtYXkgYmUgYSByYWNlIGJl
dHdlZW4gdGhlIGxvb3AgYWJvdmUgYW5kIHRoaXMgc3RhdGVtZW50ICovCi0g
ICAgICBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJnRlbXBzZW0tPm5l
eHQsIHRoaXMtPm5leHQpOwotICAgIH0KKworICBzZW1hcGhvcmVzLlJlbW92
ZSAodGhpcyk7CiB9CiAKIHZvaWQKQEAgLTE3NjksOSArMTY3Myw5IEBAIHNl
bWFwaG9yZTo6V2FpdCAoKQogfQogCiB2b2lkCi1zZW1hcGhvcmU6OmZpeHVw
X2FmdGVyX2ZvcmsgKCkKK3NlbWFwaG9yZTo6Rml4dXBBZnRlckZvcmsgKCkK
IHsKLSAgZGVidWdfcHJpbnRmICgic2VtICV4IGluIGZpeHVwX2FmdGVyX2Zv
cmsiLCB0aGlzKTsKKyAgZGVidWdfcHJpbnRmICgic2VtICV4IGluIEZpeHVw
QWZ0ZXJGb3JrIiwgdGhpcyk7CiAgIGlmIChzaGFyZWQgIT0gUFRIUkVBRF9Q
Uk9DRVNTX1BSSVZBVEUpCiAgICAgYXBpX2ZhdGFsICgiZG9lc24ndCB1bmRl
cnN0YW5kIFBST0NFU1NfU0hBUkVEIHNlbWFwaG9yZXMgdmFyaWFibGVzIik7
CiAgIC8qIEZJWE1FOiBkdXBsaWNhdGUgY29kZSBoZXJlIGFuZCBpbiB0aGUg
Y29uc3RydWN0b3IuICovCkBAIC0yOTEzLDcgKzI4MTcsNyBAQCBwdGhyZWFk
X211dGV4X2dldHByaW9jZWlsaW5nIChjb25zdCBwdGhyCiAgIHJldHVybiBF
Tk9TWVM7CiB9CiAKLWludAorZXh0ZXJuICJDIiBpbnQKIHB0aHJlYWRfbXV0
ZXhfbG9jayAocHRocmVhZF9tdXRleF90ICptdXRleCkKIHsKICAgcHRocmVh
ZF9tdXRleF90ICp0aGVtdXRleCA9IG11dGV4OwpkaWZmIC11cnAgc3JjLm9s
ZC93aW5zdXAvY3lnd2luL3RocmVhZC5oIHNyYy93aW5zdXAvY3lnd2luL3Ro
cmVhZC5oCi0tLSBzcmMub2xkL3dpbnN1cC9jeWd3aW4vdGhyZWFkLmgJMjAw
My0wMy0xOSAxNDozMTo0OS4wMDAwMDAwMDAgKzAxMDAKKysrIHNyYy93aW5z
dXAvY3lnd2luL3RocmVhZC5oCTIwMDMtMDMtMTkgMTQ6MzY6MDMuMDAwMDAw
MDAwICswMTAwCkBAIC0xODksMTQgKzE4OSw1MCBAQCB0eXBlZGVmIGVudW0K
IHZlcmlmeWFibGVfb2JqZWN0X3N0YXRlIHZlcmlmeWFibGVfb2JqZWN0X2lz
dmFsaWQgKHZvaWQgY29uc3QgKiwgbG9uZyk7CiB2ZXJpZnlhYmxlX29iamVj
dF9zdGF0ZSB2ZXJpZnlhYmxlX29iamVjdF9pc3ZhbGlkICh2b2lkIGNvbnN0
ICosIGxvbmcsIHZvaWQgKik7CiAKLS8qIGludGVyZmFjZSAqLwogdGVtcGxh
dGUgPGNsYXNzIExpc3ROb2RlPiBjbGFzcyBMaXN0IHsKIHB1YmxpYzoKLSAg
TGlzdCgpOwotICB2b2lkIEluc2VydCAoTGlzdE5vZGUgKmFOb2RlKTsKLSAg
TGlzdE5vZGUgKlJlbW92ZSAoIExpc3ROb2RlICphTm9kZSk7Ci0gIExpc3RO
b2RlICpQb3AgKCk7Ci0gIHZvaWQgZm9yRWFjaCAodm9pZCAoKikoTGlzdE5v
ZGUgKmFOb2RlKSk7CisgIExpc3QoKSA6IGhlYWQoTlVMTCkKKyAgeworICB9
CisKKyAgdm9pZCBJbnNlcnQgKExpc3ROb2RlICphTm9kZSkKKyAgeworICAg
IGlmICghYU5vZGUpCisgICAgICByZXR1cm47CisgICAgYU5vZGUtPm5leHQg
PSAoTGlzdE5vZGUgKikgSW50ZXJsb2NrZWRFeGNoYW5nZVBvaW50ZXIgKCZo
ZWFkLCBhTm9kZSk7CisgIH0KKworICBMaXN0Tm9kZSAqUmVtb3ZlICggTGlz
dE5vZGUgKmFOb2RlKQorICB7CisgICAgaWYgKCFhTm9kZSB8fCAhaGVhZCkK
KyAgICAgIHJldHVybiBOVUxMOworICAgIGlmIChhTm9kZSA9PSBoZWFkKQor
ICAgICAgcmV0dXJuIFBvcCAoKTsKKworICAgIExpc3ROb2RlICpyZXN1bHRQ
cmV2ID0gaGVhZDsKKyAgICB3aGlsZSAocmVzdWx0UHJldiAmJiByZXN1bHRQ
cmV2LT5uZXh0ICYmICEoYU5vZGUgPT0gcmVzdWx0UHJldi0+bmV4dCkpCisg
ICAgICByZXN1bHRQcmV2ID0gcmVzdWx0UHJldi0+bmV4dDsKKyAgICBpZiAo
cmVzdWx0UHJldikKKyAgICAgIHJldHVybiAoTGlzdE5vZGUgKilJbnRlcmxv
Y2tlZEV4Y2hhbmdlUG9pbnRlciAoJnJlc3VsdFByZXYtPm5leHQsIHJlc3Vs
dFByZXYtPm5leHQtPm5leHQpOworICAgIHJldHVybiBOVUxMOworICB9CisK
KyAgTGlzdE5vZGUgKlBvcCAoKQorICB7CisgICAgcmV0dXJuIChMaXN0Tm9k
ZSAqKSBJbnRlcmxvY2tlZEV4Y2hhbmdlUG9pbnRlciAoJmhlYWQsIGhlYWQt
Pm5leHQpOworICB9CisKKyAgLyogcG9vciBtYW5zIGdlbmVyaWMgcHJvZ3Jh
bW1pbmcuICovCisgIHZvaWQgZm9yRWFjaCAodm9pZCAoTGlzdE5vZGU6Oipj
YWxsYmFjaykgKCkpCisgIHsKKyAgICBMaXN0Tm9kZSAqYU5vZGUgPSBoZWFk
OworICAgIHdoaWxlIChhTm9kZSkKKyAgICAgIHsKKyAgICAgICAgKGFOb2Rl
LT4qY2FsbGJhY2spICgpOworICAgICAgICBhTm9kZSA9IGFOb2RlLT5uZXh0
OworICAgICAgfQorICB9CisKIHByb3RlY3RlZDoKICAgTGlzdE5vZGUgKmhl
YWQ7CiB9OwpAQCAtMjA1LDggKzI0MSw2IEBAIGNsYXNzIHB0aHJlYWRfa2V5
OnB1YmxpYyB2ZXJpZnlhYmxlX29iamUKIHsKIHB1YmxpYzoKICAgc3RhdGlj
IGJvb2wgaXNHb29kT2JqZWN0IChwdGhyZWFkX2tleV90IGNvbnN0ICopOwot
ICBzdGF0aWMgdm9pZCBydW5BbGxEZXN0cnVjdG9ycyAoKTsKLQogICBEV09S
RCBkd1Rsc0luZGV4OwogCiAgIGludCBzZXQgKGNvbnN0IHZvaWQgKik7CkBA
IC0yMTQsNjkgKzI0OCwzMiBAQCBwdWJsaWM6CiAKICAgcHRocmVhZF9rZXkg
KHZvaWQgKCopKHZvaWQgKikpOwogICB+cHRocmVhZF9rZXkgKCk7Ci0gIHN0
YXRpYyB2b2lkIGZpeHVwX2JlZm9yZV9mb3JrKCk7Ci0gIHN0YXRpYyB2b2lk
IGZpeHVwX2FmdGVyX2ZvcmsoKTsKKyAgc3RhdGljIHZvaWQgZml4dXBfYmVm
b3JlX2ZvcmsoKQorICB7CisgICAga2V5cy5mb3JFYWNoICgmcHRocmVhZF9r
ZXk6OnNhdmVLZXlUb0J1ZmZlcik7CisgIH0KKworICBzdGF0aWMgdm9pZCBm
aXh1cF9hZnRlcl9mb3JrKCkKKyAgeworICAgIGtleXMuZm9yRWFjaCAoJnB0
aHJlYWRfa2V5OjpyZWNyZWF0ZUtleUZyb21CdWZmZXIpOworICB9CisKKyAg
c3RhdGljIHZvaWQgcnVuQWxsRGVzdHJ1Y3RvcnMgKCkKKyAgeworICAgIGtl
eXMuZm9yRWFjaCAoJnB0aHJlYWRfa2V5OjpydW5EZXN0cnVjdG9yKTsKKyAg
fQogCiAgIC8qIExpc3Qgc3VwcG9ydCBjYWxscyAqLwogICBjbGFzcyBwdGhy
ZWFkX2tleSAqbmV4dDsKIHByaXZhdGU6Ci0gIC8vIGxpc3RzIG9mIG9iamVj
dHMuIFVTRSBUSFJFQURTQUZFIElOU0VSVFMgQU5EIERFTEVURVMuCiAgIHN0
YXRpYyBMaXN0PHB0aHJlYWRfa2V5PiBrZXlzOwotICBzdGF0aWMgdm9pZCBz
YXZlQUtleSAocHRocmVhZF9rZXkgKik7Ci0gIHN0YXRpYyB2b2lkIHJlc3Rv
cmVBS2V5IChwdGhyZWFkX2tleSAqKTsKLSAgc3RhdGljIHZvaWQgZGVzdHJv
eUFLZXkgKHB0aHJlYWRfa2V5ICopOwogICB2b2lkIHNhdmVLZXlUb0J1ZmZl
ciAoKTsKICAgdm9pZCByZWNyZWF0ZUtleUZyb21CdWZmZXIgKCk7CiAgIHZv
aWQgKCpkZXN0cnVjdG9yKSAodm9pZCAqKTsKLSAgdm9pZCBydW5fZGVzdHJ1
Y3RvciAoKTsKKyAgdm9pZCBydW5EZXN0cnVjdG9yICgpOwogICB2b2lkICpm
b3JrX2J1ZjsKIH07CiAKLS8qIGltcGxlbWVudGF0aW9uICovCi10ZW1wbGF0
ZSA8Y2xhc3MgTGlzdE5vZGU+Ci1MaXN0PExpc3ROb2RlPjo6TGlzdDxMaXN0
Tm9kZT4gKCkgOiBoZWFkKE5VTEwpCi17Ci19Ci10ZW1wbGF0ZSA8Y2xhc3Mg
TGlzdE5vZGU+IHZvaWQKLUxpc3Q8TGlzdE5vZGU+OjpJbnNlcnQgKExpc3RO
b2RlICphTm9kZSkKLXsKLSAgaWYgKCFhTm9kZSkKLSAgcmV0dXJuOwotICBh
Tm9kZS0+bmV4dCA9IChMaXN0Tm9kZSAqKSBJbnRlcmxvY2tlZEV4Y2hhbmdl
UG9pbnRlciAoJmhlYWQsIGFOb2RlKTsKLX0KLXRlbXBsYXRlIDxjbGFzcyBM
aXN0Tm9kZT4gTGlzdE5vZGUgKgotTGlzdDxMaXN0Tm9kZT46OlJlbW92ZSAo
IExpc3ROb2RlICphTm9kZSkKLXsKLSAgaWYgKCFhTm9kZSkKLSAgcmV0dXJu
IE5VTEw7Ci0gIGlmICghaGVhZCkKLSAgcmV0dXJuIE5VTEw7Ci0gIGlmIChh
Tm9kZSA9PSBoZWFkKQotICByZXR1cm4gUG9wICgpOwotICBMaXN0Tm9kZSAq
cmVzdWx0UHJldiA9IGhlYWQ7Ci0gIHdoaWxlIChyZXN1bHRQcmV2ICYmIHJl
c3VsdFByZXYtPm5leHQgJiYgIShhTm9kZSA9PSByZXN1bHRQcmV2LT5uZXh0
KSkKLSAgcmVzdWx0UHJldiA9IHJlc3VsdFByZXYtPm5leHQ7Ci0gIGlmIChy
ZXN1bHRQcmV2KQotICByZXR1cm4gKExpc3ROb2RlICopSW50ZXJsb2NrZWRF
eGNoYW5nZVBvaW50ZXIgKCZyZXN1bHRQcmV2LT5uZXh0LCByZXN1bHRQcmV2
LT5uZXh0LT5uZXh0KTsKLSAgcmV0dXJuIE5VTEw7Ci19Ci10ZW1wbGF0ZSA8
Y2xhc3MgTGlzdE5vZGU+IExpc3ROb2RlICoKLUxpc3Q8TGlzdE5vZGU+OjpQ
b3AgKCkKLXsKLSAgcmV0dXJuIChMaXN0Tm9kZSAqKSBJbnRlcmxvY2tlZEV4
Y2hhbmdlUG9pbnRlciAoJmhlYWQsIGhlYWQtPm5leHQpOwotfQotLyogcG9v
ciBtYW5zIGdlbmVyaWMgcHJvZ3JhbW1pbmcuICovCi10ZW1wbGF0ZSA8Y2xh
c3MgTGlzdE5vZGU+IHZvaWQKLUxpc3Q8TGlzdE5vZGU+Ojpmb3JFYWNoICh2
b2lkICgqY2FsbGJhY2spKExpc3ROb2RlICopKQotewotICBMaXN0Tm9kZSAq
YU5vZGUgPSBoZWFkOwotICB3aGlsZSAoYU5vZGUpCi0gIHsKLSAgICBjYWxs
YmFjayAoYU5vZGUpOwotICAgIGFOb2RlID0gYU5vZGUtPm5leHQ7Ci0gIH0K
LX0KLQogY2xhc3MgcHRocmVhZF9hdHRyOnB1YmxpYyB2ZXJpZnlhYmxlX29i
amVjdAogewogcHVibGljOgpAQCAtMzE5LDcgKzMxNiw2IEBAIHB1YmxpYzoK
ICAgcHRocmVhZF90IG93bmVyOwogICBpbnQgdHlwZTsKICAgaW50IHBzaGFy
ZWQ7Ci0gIGNsYXNzIHB0aHJlYWRfbXV0ZXggKiBuZXh0OwogCiAgIHB0aHJl
YWRfdCBHZXRQdGhyZWFkU2VsZiAoKSBjb25zdAogICB7CkBAIC0zNTgsMTgg
KzM1NCwyNSBAQCBwdWJsaWM6CiAgICAgcmV0dXJuIDA7CiAgIH0KIAotICB2
b2lkIGZpeHVwX2FmdGVyX2ZvcmsgKCk7Ci0KICAgcHRocmVhZF9tdXRleCAo
cHRocmVhZF9tdXRleGF0dHIgKiA9IE5VTEwpOwogICBwdGhyZWFkX211dGV4
IChwdGhyZWFkX211dGV4X3QgKiwgcHRocmVhZF9tdXRleGF0dHIgKik7CiAg
IH5wdGhyZWFkX211dGV4ICgpOwogCisgIGNsYXNzIHB0aHJlYWRfbXV0ZXgg
KiBuZXh0OworICBzdGF0aWMgdm9pZCBmaXh1cF9hZnRlcl9mb3JrICgpCisg
IHsKKyAgICBtdXRleGVzLmZvckVhY2ggKCZwdGhyZWFkX211dGV4OjpGaXh1
cEFmdGVyRm9yayk7CisgIH0KKworICB2b2lkIEZpeHVwQWZ0ZXJGb3JrICgp
OworCiBwcml2YXRlOgogICBpbnQgX0xvY2sgKHB0aHJlYWRfdCBzZWxmKTsK
ICAgaW50IF9UcnlMb2NrIChwdGhyZWFkX3Qgc2VsZik7CiAgIGludCBfVW5M
b2NrIChwdGhyZWFkX3Qgc2VsZik7CiAgIGludCBfRGVzdHJveSAocHRocmVh
ZF90IHNlbGYpOwogCisgIHN0YXRpYyBMaXN0PHB0aHJlYWRfbXV0ZXg+IG11
dGV4ZXM7CiAgIHN0YXRpYyBuYXRpdmVNdXRleCBtdXRleEluaXRpYWxpemF0
aW9uTG9jazsKIH07CiAKQEAgLTUxMSwxNiArNTE0LDIyIEBAIHB1YmxpYzoK
IAogICBwdGhyZWFkX211dGV4X3QgbXR4Q29uZDsKIAotICBjbGFzcyBwdGhy
ZWFkX2NvbmQgKiBuZXh0OwotCiAgIHZvaWQgVW5CbG9jayAoY29uc3QgYm9v
bCBhbGwpOwogICBpbnQgV2FpdCAocHRocmVhZF9tdXRleF90IG11dGV4LCBE
V09SRCBkd01pbGxpc2Vjb25kcyA9IElORklOSVRFKTsKLSAgdm9pZCBmaXh1
cF9hZnRlcl9mb3JrICgpOwogCiAgIHB0aHJlYWRfY29uZCAocHRocmVhZF9j
b25kYXR0ciAqKTsKICAgfnB0aHJlYWRfY29uZCAoKTsKIAorICBjbGFzcyBw
dGhyZWFkX2NvbmQgKiBuZXh0OworICBzdGF0aWMgdm9pZCBmaXh1cF9hZnRl
cl9mb3JrICgpCisgIHsKKyAgICBjb25kcy5mb3JFYWNoICgmcHRocmVhZF9j
b25kOjpGaXh1cEFmdGVyRm9yayk7CisgIH0KKworICB2b2lkIEZpeHVwQWZ0
ZXJGb3JrICgpOworCiBwcml2YXRlOgorICBzdGF0aWMgTGlzdDxwdGhyZWFk
X2NvbmQ+IGNvbmRzOwogICBzdGF0aWMgbmF0aXZlTXV0ZXggY29uZEluaXRp
YWxpemF0aW9uTG9jazsKIH07CiAKQEAgLTU2NywxNCArNTc2LDIwIEBAIHB1
YmxpYzoKICAgcHRocmVhZF9jb25kIGNvbmRSZWFkZXJzOwogICBwdGhyZWFk
X2NvbmQgY29uZFdyaXRlcnM7CiAKLSAgY2xhc3MgcHRocmVhZF9yd2xvY2sg
KiBuZXh0OwotCi0gIHZvaWQgZml4dXBfYWZ0ZXJfZm9yayAoKTsKLQogICBw
dGhyZWFkX3J3bG9jayAocHRocmVhZF9yd2xvY2thdHRyICopOwogICB+cHRo
cmVhZF9yd2xvY2sgKCk7CiAKKyAgY2xhc3MgcHRocmVhZF9yd2xvY2sgKiBu
ZXh0OworICBzdGF0aWMgdm9pZCBmaXh1cF9hZnRlcl9mb3JrICgpCisgIHsK
KyAgICByd2xvY2tzLmZvckVhY2ggKCZwdGhyZWFkX3J3bG9jazo6Rml4dXBB
ZnRlckZvcmspOworICB9CisKKyAgdm9pZCBGaXh1cEFmdGVyRm9yayAoKTsK
KwogcHJpdmF0ZToKKyAgc3RhdGljIExpc3Q8cHRocmVhZF9yd2xvY2s+IHJ3
bG9ja3M7CisKICAgdm9pZCBhZGRSZWFkZXIgKHN0cnVjdCBSV0xPQ0tfUkVB
REVSICpyZCk7CiAgIHZvaWQgcmVtb3ZlUmVhZGVyIChzdHJ1Y3QgUldMT0NL
X1JFQURFUiAqcmQpOwogICBzdHJ1Y3QgUldMT0NLX1JFQURFUiAqbG9va3Vw
UmVhZGVyIChwdGhyZWFkX3QgdGhyZWFkKTsKQEAgLTYwNSwxNiArNjIwLDI1
IEBAIHB1YmxpYzoKICAgc3RhdGljIGludCBwb3N0IChzZW1fdCAqIHNlbSk7
CiAKICAgSEFORExFIHdpbjMyX29ial9pZDsKLSAgY2xhc3Mgc2VtYXBob3Jl
ICogbmV4dDsKICAgaW50IHNoYXJlZDsKICAgbG9uZyBjdXJyZW50dmFsdWU7
CiAgIHZvaWQgV2FpdCAoKTsKICAgdm9pZCBQb3N0ICgpOwogICBpbnQgVHJ5
V2FpdCAoKTsKLSAgdm9pZCBmaXh1cF9hZnRlcl9mb3JrICgpOwogCiAgIHNl
bWFwaG9yZSAoaW50LCB1bnNpZ25lZCBpbnQpOwogICB+c2VtYXBob3JlICgp
OworCisgIGNsYXNzIHNlbWFwaG9yZSAqIG5leHQ7CisgIHN0YXRpYyB2b2lk
IGZpeHVwX2FmdGVyX2ZvcmsgKCkKKyAgeworICAgIHNlbWFwaG9yZXMuZm9y
RWFjaCAoJnNlbWFwaG9yZTo6Rml4dXBBZnRlckZvcmspOworICB9CisKKyAg
dm9pZCBGaXh1cEFmdGVyRm9yayAoKTsKKworcHJpdmF0ZToKKyAgc3RhdGlj
IExpc3Q8c2VtYXBob3JlPiBzZW1hcGhvcmVzOwogfTsKIAogY2xhc3MgY2Fs
bGJhY2sKQEAgLTYzOSwxMiArNjYzLDYgQEAgcHVibGljOgogICBjYWxsYmFj
ayAqcHRocmVhZF9jaGlsZDsKICAgY2FsbGJhY2sgKnB0aHJlYWRfcGFyZW50
OwogCi0gIC8vIGxpc3RzIG9mIHB0aHJlYWQgb2JqZWN0cy4gVVNFIFRIUkVB
RFNBRkUgSU5TRVJUUyBBTkQgREVMRVRFUy4KLSAgY2xhc3MgcHRocmVhZF9t
dXRleCAqIG11dGV4czsKLSAgY2xhc3MgcHRocmVhZF9jb25kICAqIGNvbmRz
OwotICBjbGFzcyBwdGhyZWFkX3J3bG9jayAqIHJ3bG9ja3M7Ci0gIGNsYXNz
IHNlbWFwaG9yZSAgICAgKiBzZW1hcGhvcmVzOwotCiAgIHB0aHJlYWRfa2V5
IHJlZW50X2tleTsKICAgcHRocmVhZF9rZXkgdGhyZWFkX3NlbGZfa2V5Owog
CkBAIC02NTUsNyArNjczLDYgQEAgcHVibGljOgogICBNVGludGVyZmFjZSAo
KSA6CiAgICAgY29uY3VycmVuY3kgKDApLCB0aHJlYWRjb3VudCAoMSksCiAg
ICAgcHRocmVhZF9wcmVwYXJlIChOVUxMKSwgcHRocmVhZF9jaGlsZCAoTlVM
TCksIHB0aHJlYWRfcGFyZW50IChOVUxMKSwKLSAgICBtdXRleHMgKE5VTEwp
LCBjb25kcyAoTlVMTCksIHJ3bG9ja3MgKE5VTEwpLCBzZW1hcGhvcmVzIChO
VUxMKSwKICAgICByZWVudF9rZXkgKE5VTEwpLCB0aHJlYWRfc2VsZl9rZXkg
KE5VTEwpCiAgIHsKICAgfQo=

--4498836-15493-1048085758=:257--
